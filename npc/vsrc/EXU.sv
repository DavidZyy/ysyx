// Generated by CIRCT firtool-1.43.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module EXU(	// <stdin>:2529:10
  input         clock,	// <stdin>:2530:11
                reset,	// <stdin>:2531:11
                from_ISU_valid,	// src/main/scala/rv32e/EXU.scala:16:22
  input  [31:0] from_ISU_bits_imm,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_pc,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_rdata1,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_rdata2,	// src/main/scala/rv32e/EXU.scala:16:22
  input  [4:0]  from_ISU_bits_rd,	// src/main/scala/rv32e/EXU.scala:16:22
  input         from_ISU_bits_ctrl_sig_reg_wen,	// src/main/scala/rv32e/EXU.scala:16:22
  input  [2:0]  from_ISU_bits_ctrl_sig_fu_op,	// src/main/scala/rv32e/EXU.scala:16:22
  input         from_ISU_bits_ctrl_sig_mem_wen,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_ctrl_sig_is_ebreak,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_ctrl_sig_not_impl,	// src/main/scala/rv32e/EXU.scala:16:22
  input  [1:0]  from_ISU_bits_ctrl_sig_src1_op,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_ctrl_sig_src2_op,	// src/main/scala/rv32e/EXU.scala:16:22
  input  [3:0]  from_ISU_bits_ctrl_sig_alu_op,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_ctrl_sig_lsu_op,	// src/main/scala/rv32e/EXU.scala:16:22
                from_ISU_bits_ctrl_sig_bru_op,	// src/main/scala/rv32e/EXU.scala:16:22
  input  [2:0]  from_ISU_bits_ctrl_sig_csr_op,	// src/main/scala/rv32e/EXU.scala:16:22
  input  [3:0]  from_ISU_bits_ctrl_sig_mdu_op,	// src/main/scala/rv32e/EXU.scala:16:22
  input         lsu_to_cache_ready,	// src/main/scala/rv32e/EXU.scala:21:28
                lsu_from_cache_valid,	// src/main/scala/rv32e/EXU.scala:22:28
  input  [31:0] lsu_from_cache_bits_data,	// src/main/scala/rv32e/EXU.scala:22:28
  input         lsu_from_cache_bits_bresp,	// src/main/scala/rv32e/EXU.scala:22:28
  output        from_ISU_ready,	// src/main/scala/rv32e/EXU.scala:16:22
                to_WBU_valid,	// src/main/scala/rv32e/EXU.scala:17:22
  output [31:0] to_WBU_bits_alu_result,	// src/main/scala/rv32e/EXU.scala:17:22
                to_WBU_bits_mdu_result,	// src/main/scala/rv32e/EXU.scala:17:22
                to_WBU_bits_lsu_rdata,	// src/main/scala/rv32e/EXU.scala:17:22
                to_WBU_bits_csr_rdata,	// src/main/scala/rv32e/EXU.scala:17:22
                to_WBU_bits_pc,	// src/main/scala/rv32e/EXU.scala:17:22
  output        to_WBU_bits_reg_wen,	// src/main/scala/rv32e/EXU.scala:17:22
  output [4:0]  to_WBU_bits_rd,	// src/main/scala/rv32e/EXU.scala:17:22
  output [2:0]  to_WBU_bits_fu_op,	// src/main/scala/rv32e/EXU.scala:17:22
  output        to_IFU_bits_bru_ctrl_br,	// src/main/scala/rv32e/EXU.scala:18:22
  output [31:0] to_IFU_bits_bru_addr,	// src/main/scala/rv32e/EXU.scala:18:22
  output        to_IFU_bits_csr_ctrl_br,	// src/main/scala/rv32e/EXU.scala:18:22
  output [31:0] to_IFU_bits_csr_addr,	// src/main/scala/rv32e/EXU.scala:18:22
                difftest_mcause,	// src/main/scala/rv32e/EXU.scala:19:22
                difftest_mepc,	// src/main/scala/rv32e/EXU.scala:19:22
                difftest_mstatus,	// src/main/scala/rv32e/EXU.scala:19:22
                difftest_mtvec,	// src/main/scala/rv32e/EXU.scala:19:22
  output        lsu_to_cache_valid,	// src/main/scala/rv32e/EXU.scala:21:28
  output [31:0] lsu_to_cache_bits_addr,	// src/main/scala/rv32e/EXU.scala:21:28
                lsu_to_cache_bits_wdata,	// src/main/scala/rv32e/EXU.scala:21:28
  output        lsu_to_cache_bits_is_write,	// src/main/scala/rv32e/EXU.scala:21:28
  output [31:0] lsu_to_cache_bits_wmask	// src/main/scala/rv32e/EXU.scala:21:28
);

  wire        _Lsu_i_io_out_end;	// src/main/scala/rv32e/EXU.scala:28:35
  wire        _Lsu_i_io_out_idle;	// src/main/scala/rv32e/EXU.scala:28:35
  wire [31:0] _Alu_i_io_out_result;	// src/main/scala/rv32e/EXU.scala:24:35
  reg  [1:0]  state;	// src/main/scala/rv32e/EXU.scala:40:24
  wire        _from_ISU_ready_output = state == 2'h0;	// src/main/scala/rv32e/EXU.scala:40:24, :41:20
  always @(posedge clock) begin	// <stdin>:2530:11
    if (reset)	// <stdin>:2530:11
      state <= 2'h0;	// src/main/scala/rv32e/EXU.scala:40:24
    else begin	// <stdin>:2530:11
      automatic logic [3:0][1:0] _GEN =
        {{2'h0},
         {{1'h1, _Lsu_i_io_out_end}},
         {from_ISU_bits_ctrl_sig_fu_op == 3'h4
            ? (_Lsu_i_io_out_idle ? 2'h2 : 2'h1)
            : 2'h3},
         {{1'h0, _from_ISU_ready_output & from_ISU_valid}}};	// <stdin>:2529:10, src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/rv32e/EXU.scala:28:35, :40:24, :41:20, :43:{19,25}, :47:{48,69}, :48:{23,29}, :50:23, :54:{19,25}, :57:19
      state <= _GEN[state];	// src/main/scala/rv32e/EXU.scala:40:24, :41:20, :43:19, :47:69, :54:19, :57:19
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:2529:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2529:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2529:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2529:10
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:2529:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2529:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2529:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2529:10
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:2529:10
        state = _RANDOM[/*Zero width*/ 1'b0][1:0];	// <stdin>:2529:10, src/main/scala/rv32e/EXU.scala:40:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2529:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2529:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Alu Alu_i (	// src/main/scala/rv32e/EXU.scala:24:35
    .io_in_src1
      (from_ISU_bits_ctrl_sig_src1_op == 2'h1
         ? from_ISU_bits_pc
         : from_ISU_bits_ctrl_sig_src1_op == 2'h2 ? from_ISU_bits_rdata1 : 32'h0),	// src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/EXU.scala:43:25, :48:29
    .io_in_src2
      ((&from_ISU_bits_ctrl_sig_src2_op)
         ? from_ISU_bits_imm
         : from_ISU_bits_ctrl_sig_src2_op == 2'h2 ? from_ISU_bits_rdata2 : 32'h0),	// src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/EXU.scala:48:29
    .io_in_op      (from_ISU_bits_ctrl_sig_alu_op),
    .io_out_result (_Alu_i_io_out_result)
  );
  Mdu Mdu_i (	// src/main/scala/rv32e/EXU.scala:25:35
    .io_in_src1    (from_ISU_bits_rdata1),
    .io_in_src2    (from_ISU_bits_rdata2),
    .io_in_op      (from_ISU_bits_ctrl_sig_mdu_op),
    .io_out_result (to_WBU_bits_mdu_result)
  );
  Bru Bru_i (	// src/main/scala/rv32e/EXU.scala:26:35
    .io_in_src1     (from_ISU_bits_rdata1),
    .io_in_src2     (from_ISU_bits_rdata2),
    .io_in_op       (from_ISU_bits_ctrl_sig_bru_op),
    .io_out_ctrl_br (to_IFU_bits_bru_ctrl_br)
  );
  Lsu_cache Lsu_i (	// src/main/scala/rv32e/EXU.scala:28:35
    .clock                  (clock),
    .reset                  (reset),
    .io_in_valid            (state == 2'h2),	// src/main/scala/rv32e/EXU.scala:40:24, :41:20, :48:29
    .io_in_mem_wen          (from_ISU_bits_ctrl_sig_mem_wen),
    .io_in_addr             (_Alu_i_io_out_result),	// src/main/scala/rv32e/EXU.scala:24:35
    .io_in_wdata            (from_ISU_bits_rdata2),
    .io_in_op               (from_ISU_bits_ctrl_sig_lsu_op),
    .to_cache_ready         (lsu_to_cache_ready),
    .from_cache_valid       (lsu_from_cache_valid),
    .from_cache_bits_data   (lsu_from_cache_bits_data),
    .from_cache_bits_bresp  (lsu_from_cache_bits_bresp),
    .io_out_rdata           (to_WBU_bits_lsu_rdata),
    .io_out_end             (_Lsu_i_io_out_end),
    .io_out_idle            (_Lsu_i_io_out_idle),
    .to_cache_valid         (lsu_to_cache_valid),
    .to_cache_bits_addr     (lsu_to_cache_bits_addr),
    .to_cache_bits_wdata    (lsu_to_cache_bits_wdata),
    .to_cache_bits_is_write (lsu_to_cache_bits_is_write),
    .to_cache_bits_wmask    (lsu_to_cache_bits_wmask)
  );
  Csr Csr_i (	// src/main/scala/rv32e/EXU.scala:29:35
    .clock                   (clock),
    .reset                   (reset),
    .io_in_op                (from_ISU_bits_ctrl_sig_csr_op),
    .io_in_cur_pc            (from_ISU_bits_pc),
    .io_in_csr_id            (from_ISU_bits_imm),
    .io_in_wdata             (from_ISU_bits_rdata1),
    .io_out_csr_br           (to_IFU_bits_csr_ctrl_br),
    .io_out_csr_addr         (to_IFU_bits_csr_addr),
    .io_out_r_csr            (to_WBU_bits_csr_rdata),
    .io_out_difftest_mcause  (difftest_mcause),
    .io_out_difftest_mepc    (difftest_mepc),
    .io_out_difftest_mstatus (difftest_mstatus),
    .io_out_difftest_mtvec   (difftest_mtvec)
  );
  ebreak_moudle ebreak_moudle_i (	// src/main/scala/rv32e/EXU.scala:30:35
    .is_ebreak (from_ISU_bits_ctrl_sig_is_ebreak)
  );
  not_impl_moudle not_impl_moudle_i (	// src/main/scala/rv32e/EXU.scala:31:35
    .not_impl (from_ISU_bits_ctrl_sig_not_impl)
  );
  assign from_ISU_ready = _from_ISU_ready_output;	// <stdin>:2529:10, src/main/scala/rv32e/EXU.scala:41:20
  assign to_WBU_valid = &state;	// <stdin>:2529:10, src/main/scala/rv32e/EXU.scala:40:24, :41:20
  assign to_WBU_bits_alu_result = _Alu_i_io_out_result;	// <stdin>:2529:10, src/main/scala/rv32e/EXU.scala:24:35
  assign to_WBU_bits_pc = from_ISU_bits_pc;	// <stdin>:2529:10
  assign to_WBU_bits_reg_wen = from_ISU_bits_ctrl_sig_reg_wen;	// <stdin>:2529:10
  assign to_WBU_bits_rd = from_ISU_bits_rd;	// <stdin>:2529:10
  assign to_WBU_bits_fu_op = from_ISU_bits_ctrl_sig_fu_op;	// <stdin>:2529:10
  assign to_IFU_bits_bru_addr = _Alu_i_io_out_result;	// <stdin>:2529:10, src/main/scala/rv32e/EXU.scala:24:35
endmodule

