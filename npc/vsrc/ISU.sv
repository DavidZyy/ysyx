// Generated by CIRCT firtool-1.43.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ISU(	// <stdin>:2031:10
  input         clock,	// <stdin>:2032:11
                reset,	// <stdin>:2033:11
                from_IDU_valid,	// src/main/scala/rv32e/ISU.scala:12:22
  input  [31:0] from_IDU_bits_imm,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_pc,	// src/main/scala/rv32e/ISU.scala:12:22
  input  [4:0]  from_IDU_bits_rs1,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_rs2,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_rd,	// src/main/scala/rv32e/ISU.scala:12:22
  input         from_IDU_bits_ctrl_sig_reg_wen,	// src/main/scala/rv32e/ISU.scala:12:22
  input  [2:0]  from_IDU_bits_ctrl_sig_fu_op,	// src/main/scala/rv32e/ISU.scala:12:22
  input         from_IDU_bits_ctrl_sig_mem_wen,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_ctrl_sig_is_ebreak,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_ctrl_sig_not_impl,	// src/main/scala/rv32e/ISU.scala:12:22
  input  [1:0]  from_IDU_bits_ctrl_sig_src1_op,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_ctrl_sig_src2_op,	// src/main/scala/rv32e/ISU.scala:12:22
  input  [3:0]  from_IDU_bits_ctrl_sig_alu_op,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_ctrl_sig_lsu_op,	// src/main/scala/rv32e/ISU.scala:12:22
                from_IDU_bits_ctrl_sig_bru_op,	// src/main/scala/rv32e/ISU.scala:12:22
  input  [2:0]  from_IDU_bits_ctrl_sig_csr_op,	// src/main/scala/rv32e/ISU.scala:12:22
  input  [3:0]  from_IDU_bits_ctrl_sig_mdu_op,	// src/main/scala/rv32e/ISU.scala:12:22
  input         from_WBU_bits_reg_wen,	// src/main/scala/rv32e/ISU.scala:13:22
  input  [31:0] from_WBU_bits_wdata,	// src/main/scala/rv32e/ISU.scala:13:22
  input  [4:0]  from_WBU_bits_rd,	// src/main/scala/rv32e/ISU.scala:13:22
  output        to_EXU_valid,	// src/main/scala/rv32e/ISU.scala:14:22
  output [31:0] to_EXU_bits_imm,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_pc,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_rdata1,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_rdata2,	// src/main/scala/rv32e/ISU.scala:14:22
  output [4:0]  to_EXU_bits_rd,	// src/main/scala/rv32e/ISU.scala:14:22
  output        to_EXU_bits_ctrl_sig_reg_wen,	// src/main/scala/rv32e/ISU.scala:14:22
  output [2:0]  to_EXU_bits_ctrl_sig_fu_op,	// src/main/scala/rv32e/ISU.scala:14:22
  output        to_EXU_bits_ctrl_sig_mem_wen,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_ctrl_sig_is_ebreak,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_ctrl_sig_not_impl,	// src/main/scala/rv32e/ISU.scala:14:22
  output [1:0]  to_EXU_bits_ctrl_sig_src1_op,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_ctrl_sig_src2_op,	// src/main/scala/rv32e/ISU.scala:14:22
  output [3:0]  to_EXU_bits_ctrl_sig_alu_op,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_ctrl_sig_lsu_op,	// src/main/scala/rv32e/ISU.scala:14:22
                to_EXU_bits_ctrl_sig_bru_op,	// src/main/scala/rv32e/ISU.scala:14:22
  output [2:0]  to_EXU_bits_ctrl_sig_csr_op,	// src/main/scala/rv32e/ISU.scala:14:22
  output [3:0]  to_EXU_bits_ctrl_sig_mdu_op	// src/main/scala/rv32e/ISU.scala:14:22
);

  RegFile RegFile_i (	// src/main/scala/rv32e/ISU.scala:20:37
    .clock         (clock),
    .reset         (reset),
    .io_in_rs1     (from_IDU_bits_rs1),
    .io_in_rs2     (from_IDU_bits_rs2),
    .io_in_rd      (from_WBU_bits_rd),
    .io_in_wdata   (from_WBU_bits_wdata),
    .io_in_reg_wen (from_WBU_bits_reg_wen),
    .io_out_rdata1 (to_EXU_bits_rdata1),
    .io_out_rdata2 (to_EXU_bits_rdata2)
  );
  assign to_EXU_valid = from_IDU_valid;	// <stdin>:2031:10
  assign to_EXU_bits_imm = from_IDU_bits_imm;	// <stdin>:2031:10
  assign to_EXU_bits_pc = from_IDU_bits_pc;	// <stdin>:2031:10
  assign to_EXU_bits_rd = from_IDU_bits_rd;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_reg_wen = from_IDU_bits_ctrl_sig_reg_wen;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_fu_op = from_IDU_bits_ctrl_sig_fu_op;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_mem_wen = from_IDU_bits_ctrl_sig_mem_wen;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_is_ebreak = from_IDU_bits_ctrl_sig_is_ebreak;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_not_impl = from_IDU_bits_ctrl_sig_not_impl;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_src1_op = from_IDU_bits_ctrl_sig_src1_op;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_src2_op = from_IDU_bits_ctrl_sig_src2_op;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_alu_op = from_IDU_bits_ctrl_sig_alu_op;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_lsu_op = from_IDU_bits_ctrl_sig_lsu_op;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_bru_op = from_IDU_bits_ctrl_sig_bru_op;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_csr_op = from_IDU_bits_ctrl_sig_csr_op;	// <stdin>:2031:10
  assign to_EXU_bits_ctrl_sig_mdu_op = from_IDU_bits_ctrl_sig_mdu_op;	// <stdin>:2031:10
endmodule

