/* verilator lint_off DECLFILENAME */
/* verilator lint_off UNUSEDSIGNAL */
/* verilator lint_off UNDRIVEN */
/* verilator lint_off UNOPTFLAT */
/* verilator lint_off WIDTHEXPAND */
/* verilator lint_off PINCONNECTEMPTY */
// Generated by CIRCT firtool-1.52.0
module IDU(
  input         from_IFU_valid,
  input  [31:0] from_IFU_bits_inst,
                from_IFU_bits_pc,
  input         to_ISU_ready,
  output        from_IFU_ready,
                to_ISU_valid,
  output [31:0] to_ISU_bits_imm,
                to_ISU_bits_pc,
  output [4:0]  to_ISU_bits_rs1,
                to_ISU_bits_rs2,
                to_ISU_bits_rd,
  output        to_ISU_bits_ctrl_sig_reg_wen,
  output [2:0]  to_ISU_bits_ctrl_sig_fu_op,
  output        to_ISU_bits_ctrl_sig_mem_wen,
                to_ISU_bits_ctrl_sig_is_ebreak,
                to_ISU_bits_ctrl_sig_not_impl,
  output [1:0]  to_ISU_bits_ctrl_sig_src1_op,
                to_ISU_bits_ctrl_sig_src2_op,
  output [3:0]  to_ISU_bits_ctrl_sig_alu_op,
                to_ISU_bits_ctrl_sig_lsu_op,
                to_ISU_bits_ctrl_sig_bru_op,
  output [2:0]  to_ISU_bits_ctrl_sig_csr_op,
  output [3:0]  to_ISU_bits_ctrl_sig_mdu_op,
  output [31:0] to_ISU_bits_inst
);

  wire [29:0]      decode_info_invInputs = ~(from_IFU_bits_inst[31:2]);
  wire [7:0]       _decode_info_T =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[11]};
  wire [7:0]       _decode_info_T_2 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[12]};
  wire [8:0]       _decode_info_T_6 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[12]};
  wire [7:0]       _decode_info_T_8 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10]};
  wire [8:0]       _decode_info_T_10 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11]};
  wire [14:0]      _decode_info_T_12 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[29]};
  wire [11:0]      _decode_info_T_14 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_16 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [5:0]       _decode_info_T_18 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     from_IFU_bits_inst[2],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4]};
  wire [7:0]       _decode_info_T_22 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [8:0]       _decode_info_T_24 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [9:0]       _decode_info_T_28 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [9:0]       _decode_info_T_30 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     from_IFU_bits_inst[2],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [6:0]       _decode_info_T_32 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     from_IFU_bits_inst[2],
     from_IFU_bits_inst[3],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6]};
  wire [30:0]      _decode_info_T_34 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     decode_info_invInputs[18],
     decode_info_invInputs[19],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [9:0]       _decode_info_T_36 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [14:0]      _decode_info_T_38 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_40 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [8:0]       _decode_info_T_44 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11]};
  wire [9:0]       _decode_info_T_46 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [7:0]       _decode_info_T_50 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[13]};
  wire [8:0]       _decode_info_T_52 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12]};
  wire [14:0]      _decode_info_T_54 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [9:0]       _decode_info_T_56 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12]};
  wire [9:0]       _decode_info_T_58 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12]};
  wire [8:0]       _decode_info_T_60 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13]};
  wire [14:0]      _decode_info_T_62 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [8:0]       _decode_info_T_64 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14]};
  wire [8:0]       _decode_info_T_66 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[14]};
  wire [12:0]      _decode_info_T_68 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[14],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_72 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[14],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [7:0]       _decode_info_T_74 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[14]};
  wire [8:0]       _decode_info_T_76 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     from_IFU_bits_inst[14]};
  wire [14:0]      _decode_info_T_80 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[29]};
  wire [9:0]       _decode_info_T_88 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     from_IFU_bits_inst[14]};
  wire [31:0]      _decode_info_T_90 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     from_IFU_bits_inst[20],
     decode_info_invInputs[19],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_92 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [15:0]      _decode_info_T_94 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [16:0]      _decode_info_T_98 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [16:0]      _decode_info_T_104 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     from_IFU_bits_inst[14],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [30:0]      _decode_info_T_106 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[10],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     decode_info_invInputs[18],
     from_IFU_bits_inst[21],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     from_IFU_bits_inst[28],
     from_IFU_bits_inst[29],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [30:0]      _decode_info_T_108 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     decode_info_invInputs[18],
     from_IFU_bits_inst[21],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     from_IFU_bits_inst[28],
     from_IFU_bits_inst[29],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [16:0]      _decode_info_T_110 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     from_IFU_bits_inst[30],
     decode_info_invInputs[29]};
  wire [15:0]      _decode_info_T_112 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     from_IFU_bits_inst[30],
     decode_info_invInputs[29]};
  wire [15:0]      _decode_info_T_114 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     from_IFU_bits_inst[30],
     decode_info_invInputs[29]};
  wire [7:0][31:0] _GEN =
    {{32'h0},
     {32'h0},
     {{{12{from_IFU_bits_inst[31]}},
       from_IFU_bits_inst[19:12],
       from_IFU_bits_inst[20],
       from_IFU_bits_inst[30:21],
       1'h0}},
     {{from_IFU_bits_inst[31:12], 12'h0}},
     {{{20{from_IFU_bits_inst[31]}},
       from_IFU_bits_inst[7],
       from_IFU_bits_inst[30:25],
       from_IFU_bits_inst[11:8],
       1'h0}},
     {{{20{from_IFU_bits_inst[31]}},
       from_IFU_bits_inst[31:25],
       from_IFU_bits_inst[11:7]}},
     {{{20{from_IFU_bits_inst[31]}}, from_IFU_bits_inst[31:20]}},
     {32'h0}};
  assign from_IFU_ready = to_ISU_ready;
  assign to_ISU_valid = from_IFU_valid;
  assign to_ISU_bits_imm =
    _GEN[{{&_decode_info_T,
           &_decode_info_T_2,
           &_decode_info_T_8,
           &_decode_info_T_12,
           &_decode_info_T_14,
           &_decode_info_T_22,
           &_decode_info_T_30,
           &_decode_info_T_46,
           &_decode_info_T_50,
           &_decode_info_T_58,
           &_decode_info_T_68,
           &_decode_info_T_74,
           &_decode_info_T_80,
           &_decode_info_T_106} == 14'h0,
          {&_decode_info_T,
           &{from_IFU_bits_inst[0],
             from_IFU_bits_inst[1],
             decode_info_invInputs[0],
             decode_info_invInputs[1],
             decode_info_invInputs[3],
             decode_info_invInputs[4],
             decode_info_invInputs[10],
             decode_info_invInputs[12]},
           &_decode_info_T_8,
           &_decode_info_T_12,
           &_decode_info_T_14,
           &_decode_info_T_18,
           &_decode_info_T_30,
           &_decode_info_T_32,
           &_decode_info_T_46,
           &_decode_info_T_50,
           &_decode_info_T_58,
           &_decode_info_T_68,
           &_decode_info_T_80,
           &_decode_info_T_106} == 14'h0,
          |{&_decode_info_T_6,
            &_decode_info_T_10,
            &_decode_info_T_28,
            &_decode_info_T_30,
            &_decode_info_T_32,
            &_decode_info_T_36,
            &_decode_info_T_38,
            &_decode_info_T_44,
            &_decode_info_T_46,
            &_decode_info_T_52,
            &_decode_info_T_58,
            &_decode_info_T_60,
            &_decode_info_T_64,
            &_decode_info_T_66,
            &_decode_info_T_76,
            &_decode_info_T_88,
            &_decode_info_T_108,
            &_decode_info_T_112}}];
  assign to_ISU_bits_pc = from_IFU_bits_pc;
  assign to_ISU_bits_rs1 = from_IFU_bits_inst[19:15];
  assign to_ISU_bits_rs2 = from_IFU_bits_inst[24:20];
  assign to_ISU_bits_rd = from_IFU_bits_inst[11:7];
  assign to_ISU_bits_ctrl_sig_reg_wen =
    |{&_decode_info_T_6,
      &_decode_info_T_10,
      &_decode_info_T_16,
      &_decode_info_T_18,
      &_decode_info_T_30,
      &_decode_info_T_32,
      &_decode_info_T_36,
      &_decode_info_T_38,
      &_decode_info_T_40,
      &_decode_info_T_46,
      &_decode_info_T_52,
      &_decode_info_T_54,
      &_decode_info_T_58,
      &_decode_info_T_60,
      &_decode_info_T_62,
      &_decode_info_T_64,
      &_decode_info_T_66,
      &_decode_info_T_72,
      &_decode_info_T_92,
      &_decode_info_T_94,
      &_decode_info_T_98,
      &_decode_info_T_104,
      &_decode_info_T_110,
      &_decode_info_T_112,
      &_decode_info_T_114};
  assign to_ISU_bits_ctrl_sig_fu_op =
    {|{&_decode_info_T_6,
       &_decode_info_T_24,
       &_decode_info_T_34,
       &_decode_info_T_36,
       &_decode_info_T_46,
       &_decode_info_T_56,
       &_decode_info_T_58,
       &_decode_info_T_64,
       &_decode_info_T_90,
       &_decode_info_T_108},
     |{&_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_44,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_92,
       &_decode_info_T_94,
       &_decode_info_T_98,
       &_decode_info_T_104},
     |{&_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_18,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_34,
       &_decode_info_T_38,
       &_decode_info_T_40,
       &_decode_info_T_44,
       &_decode_info_T_46,
       &_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_58,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_66,
       &_decode_info_T_72,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_90,
       &_decode_info_T_108,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114}};
  assign to_ISU_bits_ctrl_sig_mem_wen = |{&_decode_info_T_24, &_decode_info_T_56};
  assign to_ISU_bits_ctrl_sig_is_ebreak = &_decode_info_T_90;
  assign to_ISU_bits_ctrl_sig_not_impl =
    {&_decode_info_T,
     &_decode_info_T_2,
     &_decode_info_T_8,
     &_decode_info_T_12,
     &_decode_info_T_14,
     &_decode_info_T_18,
     &_decode_info_T_22,
     &{from_IFU_bits_inst[0],
       from_IFU_bits_inst[1],
       decode_info_invInputs[0],
       decode_info_invInputs[1],
       from_IFU_bits_inst[5],
       decode_info_invInputs[5],
       decode_info_invInputs[6],
       decode_info_invInputs[7],
       decode_info_invInputs[8],
       decode_info_invInputs[9],
       decode_info_invInputs[11],
       decode_info_invInputs[12],
       decode_info_invInputs[13],
       decode_info_invInputs[14],
       decode_info_invInputs[15],
       decode_info_invInputs[16],
       decode_info_invInputs[17],
       decode_info_invInputs[19],
       decode_info_invInputs[20],
       decode_info_invInputs[21],
       decode_info_invInputs[22],
       decode_info_invInputs[23],
       decode_info_invInputs[24],
       decode_info_invInputs[25],
       decode_info_invInputs[26],
       decode_info_invInputs[27],
       decode_info_invInputs[28],
       decode_info_invInputs[29]},
     &_decode_info_T_30,
     &_decode_info_T_32,
     &_decode_info_T_46,
     &_decode_info_T_50,
     &_decode_info_T_58,
     &_decode_info_T_68,
     &_decode_info_T_74,
     &_decode_info_T_80,
     &_decode_info_T_106} == 17'h0;
  assign to_ISU_bits_ctrl_sig_src1_op =
    {|{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_24,
       &_decode_info_T_30,
       &_decode_info_T_36,
       &_decode_info_T_38,
       &_decode_info_T_40,
       &_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_64,
       &_decode_info_T_66,
       &_decode_info_T_72,
       &_decode_info_T_92,
       &_decode_info_T_94,
       &_decode_info_T_98,
       &_decode_info_T_104,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114},
     |{&{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         from_IFU_bits_inst[2],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         decode_info_invInputs[3],
         decode_info_invInputs[4]},
       &_decode_info_T_28,
       &_decode_info_T_32,
       &_decode_info_T_44,
       &_decode_info_T_76,
       &_decode_info_T_88}};
  assign to_ISU_bits_ctrl_sig_src2_op =
    {|{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_18,
       &_decode_info_T_24,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_36,
       &_decode_info_T_38,
       &_decode_info_T_40,
       &_decode_info_T_44,
       &_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_64,
       &_decode_info_T_66,
       &_decode_info_T_72,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_92,
       &_decode_info_T_94,
       &_decode_info_T_98,
       &_decode_info_T_104,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114},
     |{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_18,
       &_decode_info_T_24,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_36,
       &_decode_info_T_38,
       &_decode_info_T_44,
       &_decode_info_T_52,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_64,
       &_decode_info_T_66,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_112}};
  assign to_ISU_bits_ctrl_sig_alu_op =
    {|{&_decode_info_T_38, &_decode_info_T_40, &_decode_info_T_112, &_decode_info_T_114},
     |{&_decode_info_T_52, &_decode_info_T_54, &_decode_info_T_66, &_decode_info_T_72},
     |{&_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114},
     |{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_18,
       &_decode_info_T_24,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_36,
       &_decode_info_T_44,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_64,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         decode_info_invInputs[3],
         decode_info_invInputs[4],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]},
       &_decode_info_T_76,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         decode_info_invInputs[4],
         from_IFU_bits_inst[12],
         from_IFU_bits_inst[14],
         decode_info_invInputs[23],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]},
       &_decode_info_T_88}};
  assign to_ISU_bits_ctrl_sig_lsu_op =
    {&_decode_info_T_56,
     |{&_decode_info_T_24, &_decode_info_T_64},
     |{&_decode_info_T_24,
       &_decode_info_T_36,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         decode_info_invInputs[3],
         decode_info_invInputs[4],
         decode_info_invInputs[10],
         from_IFU_bits_inst[13],
         decode_info_invInputs[12]}},
     |{&_decode_info_T_6,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         from_IFU_bits_inst[12],
         decode_info_invInputs[11],
         decode_info_invInputs[12]},
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         decode_info_invInputs[3],
         decode_info_invInputs[4],
         from_IFU_bits_inst[12],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14]}}};
  assign to_ISU_bits_ctrl_sig_bru_op =
    {&_decode_info_T_88,
     |{&_decode_info_T_44, &_decode_info_T_76},
     |{&_decode_info_T_28,
       &_decode_info_T_30,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         from_IFU_bits_inst[5],
         from_IFU_bits_inst[6],
         from_IFU_bits_inst[12],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14]},
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         from_IFU_bits_inst[5],
         from_IFU_bits_inst[6],
         decode_info_invInputs[10],
         from_IFU_bits_inst[13],
         from_IFU_bits_inst[14]}},
     |{&_decode_info_T_28, &_decode_info_T_32, &_decode_info_T_76}};
  assign to_ISU_bits_ctrl_sig_csr_op =
    {&_decode_info_T_58,
     |{&_decode_info_T_46, &_decode_info_T_108},
     |{&_decode_info_T_34, &_decode_info_T_46}};
  assign to_ISU_bits_ctrl_sig_mdu_op =
    {&_decode_info_T_104,
     |{&_decode_info_T_98,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         decode_info_invInputs[10],
         from_IFU_bits_inst[14],
         from_IFU_bits_inst[25],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]},
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14],
         from_IFU_bits_inst[25],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]}},
     |{&_decode_info_T_94,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         decode_info_invInputs[10],
         from_IFU_bits_inst[13],
         from_IFU_bits_inst[25],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]}},
     &_decode_info_T_92};
  assign to_ISU_bits_inst = from_IFU_bits_inst;
endmodule

// external module RegisterFileBB

module RegFile(
  input         clock,
                reset,
  input  [4:0]  io_in_rs1,
                io_in_rs2,
                io_in_rd,
  input  [31:0] io_in_wdata,
  input         io_in_reg_wen,
  output [31:0] io_out_rdata1,
                io_out_rdata2
);

  RegisterFileBB regfile (
    .clock   (clock),
    .reset   (reset),
    .rs1     (io_in_rs1),
    .rs2     (io_in_rs2),
    .rd      (io_in_rd),
    .wdata   (io_in_wdata),
    .reg_wen (io_in_reg_wen),
    .rdata1  (io_out_rdata1),
    .rdata2  (io_out_rdata2)
  );
endmodule

module ISU(
  input         clock,
                reset,
                from_IDU_valid,
  input  [31:0] from_IDU_bits_imm,
                from_IDU_bits_pc,
  input  [4:0]  from_IDU_bits_rs1,
                from_IDU_bits_rs2,
                from_IDU_bits_rd,
  input         from_IDU_bits_ctrl_sig_reg_wen,
  input  [2:0]  from_IDU_bits_ctrl_sig_fu_op,
  input         from_IDU_bits_ctrl_sig_mem_wen,
                from_IDU_bits_ctrl_sig_is_ebreak,
                from_IDU_bits_ctrl_sig_not_impl,
  input  [1:0]  from_IDU_bits_ctrl_sig_src1_op,
                from_IDU_bits_ctrl_sig_src2_op,
  input  [3:0]  from_IDU_bits_ctrl_sig_alu_op,
                from_IDU_bits_ctrl_sig_lsu_op,
                from_IDU_bits_ctrl_sig_bru_op,
  input  [2:0]  from_IDU_bits_ctrl_sig_csr_op,
  input  [3:0]  from_IDU_bits_ctrl_sig_mdu_op,
  input  [31:0] from_IDU_bits_inst,
  input         from_WBU_bits_reg_wen,
  input  [31:0] from_WBU_bits_wdata,
  input  [4:0]  from_WBU_bits_rd,
  input         to_EXU_ready,
  input  [4:0]  from_EXU_rd,
  input         from_EXU_have_wb,
                from_EXU_isBRU,
  output        from_IDU_ready,
                to_EXU_valid,
  output [31:0] to_EXU_bits_imm,
                to_EXU_bits_pc,
                to_EXU_bits_rdata1,
                to_EXU_bits_rdata2,
  output [4:0]  to_EXU_bits_rd,
  output        to_EXU_bits_ctrl_sig_reg_wen,
  output [2:0]  to_EXU_bits_ctrl_sig_fu_op,
  output        to_EXU_bits_ctrl_sig_mem_wen,
                to_EXU_bits_ctrl_sig_is_ebreak,
                to_EXU_bits_ctrl_sig_not_impl,
  output [1:0]  to_EXU_bits_ctrl_sig_src1_op,
                to_EXU_bits_ctrl_sig_src2_op,
  output [3:0]  to_EXU_bits_ctrl_sig_alu_op,
                to_EXU_bits_ctrl_sig_lsu_op,
                to_EXU_bits_ctrl_sig_bru_op,
  output [2:0]  to_EXU_bits_ctrl_sig_csr_op,
  output [3:0]  to_EXU_bits_ctrl_sig_mdu_op,
  output [31:0] to_EXU_bits_inst
);

  wire has_hazard =
    (from_EXU_rd == from_IDU_bits_rs1 | from_EXU_rd == from_IDU_bits_rs2)
    & ~from_EXU_have_wb & from_IDU_valid & ~from_EXU_isBRU;
  RegFile RegFile_i (
    .clock         (clock),
    .reset         (reset),
    .io_in_rs1     (from_IDU_bits_rs1),
    .io_in_rs2     (from_IDU_bits_rs2),
    .io_in_rd      (from_WBU_bits_rd),
    .io_in_wdata   (from_WBU_bits_wdata),
    .io_in_reg_wen (from_WBU_bits_reg_wen),
    .io_out_rdata1 (to_EXU_bits_rdata1),
    .io_out_rdata2 (to_EXU_bits_rdata2)
  );
  assign from_IDU_ready = ~has_hazard & to_EXU_ready;
  assign to_EXU_valid = ~has_hazard & from_IDU_valid;
  assign to_EXU_bits_imm = from_IDU_bits_imm;
  assign to_EXU_bits_pc = from_IDU_bits_pc;
  assign to_EXU_bits_rd = from_IDU_bits_rd;
  assign to_EXU_bits_ctrl_sig_reg_wen = from_IDU_bits_ctrl_sig_reg_wen;
  assign to_EXU_bits_ctrl_sig_fu_op = from_IDU_bits_ctrl_sig_fu_op;
  assign to_EXU_bits_ctrl_sig_mem_wen = from_IDU_bits_ctrl_sig_mem_wen;
  assign to_EXU_bits_ctrl_sig_is_ebreak = from_IDU_bits_ctrl_sig_is_ebreak;
  assign to_EXU_bits_ctrl_sig_not_impl = from_IDU_bits_ctrl_sig_not_impl;
  assign to_EXU_bits_ctrl_sig_src1_op = from_IDU_bits_ctrl_sig_src1_op;
  assign to_EXU_bits_ctrl_sig_src2_op = from_IDU_bits_ctrl_sig_src2_op;
  assign to_EXU_bits_ctrl_sig_alu_op = from_IDU_bits_ctrl_sig_alu_op;
  assign to_EXU_bits_ctrl_sig_lsu_op = from_IDU_bits_ctrl_sig_lsu_op;
  assign to_EXU_bits_ctrl_sig_bru_op = from_IDU_bits_ctrl_sig_bru_op;
  assign to_EXU_bits_ctrl_sig_csr_op = from_IDU_bits_ctrl_sig_csr_op;
  assign to_EXU_bits_ctrl_sig_mdu_op = from_IDU_bits_ctrl_sig_mdu_op;
  assign to_EXU_bits_inst = from_IDU_bits_inst;
endmodule

module Alu(
  input  [31:0] io_in_src1,
                io_in_src2,
  input  [3:0]  io_in_op,
  output [31:0] io_out_result
);

  wire [62:0]       _io_out_result_T_11 = {31'h0, io_in_src1} << io_in_src2[4:0];
  wire [31:0]       _GEN = {27'h0, io_in_src2[4:0]};
  wire [15:0][31:0] _GEN_0 =
    {{32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {$signed($signed(io_in_src1) >>> _GEN)},
     {io_in_src1 >> _GEN},
     {_io_out_result_T_11[31:0]},
     {{31'h0, io_in_src1 < io_in_src2}},
     {{31'h0, $signed(io_in_src1) < $signed(io_in_src2)}},
     {io_in_src1 ^ io_in_src2},
     {io_in_src1 | io_in_src2},
     {io_in_src1 & io_in_src2},
     {io_in_src1 - io_in_src2},
     {io_in_src1 + io_in_src2},
     {32'h0}};
  assign io_out_result = _GEN_0[io_in_op];
endmodule

module Mdu(
  input  [31:0] io_in_src1,
                io_in_src2,
  input  [3:0]  io_in_op,
  output [31:0] io_out_result
);

  wire [63:0] _GEN = {32'h0, io_in_src2};
  wire [63:0] _io_out_result_T_13 = {32'h0, io_in_src1} * _GEN;
  wire [63:0] _GEN_0 = {{32{io_in_src1[31]}}, io_in_src1};
  wire [63:0] _io_out_result_T_3 = _GEN_0 * {{32{io_in_src2[31]}}, io_in_src2};
  wire [63:0] _io_out_result_T_8 = _GEN_0 * _GEN;
  wire [32:0] _io_out_result_T_17 =
    $signed({io_in_src1[31], io_in_src1}) / $signed({io_in_src2[31], io_in_src2});
  assign io_out_result =
    io_in_op == 4'h8
      ? io_in_src1 % io_in_src2
      : io_in_op == 4'h7
          ? $signed(io_in_src1) % $signed(io_in_src2)
          : io_in_op == 4'h6
              ? io_in_src1 / io_in_src2
              : io_in_op == 4'h5
                  ? _io_out_result_T_17[31:0]
                  : io_in_op == 4'h4
                      ? _io_out_result_T_13[63:32]
                      : io_in_op == 4'h3
                          ? _io_out_result_T_8[63:32]
                          : io_in_op == 4'h2
                              ? _io_out_result_T_3[63:32]
                              : io_in_op == 4'h1 ? _io_out_result_T_13[31:0] : 32'h0;
endmodule

module Bru(
  input  [31:0] io_in_src1,
                io_in_src2,
  input  [3:0]  io_in_op,
  output        io_out_ctrl_br
);

  assign io_out_ctrl_br =
    io_in_op == 4'h8
      ? io_in_src1 >= io_in_src2
      : io_in_op == 4'h7
          ? io_in_src1 < io_in_src2
          : io_in_op == 4'h6
              ? $signed(io_in_src1) >= $signed(io_in_src2)
              : io_in_op == 4'h5
                  ? $signed(io_in_src1) < $signed(io_in_src2)
                  : io_in_op == 4'h4
                      ? io_in_src1 != io_in_src2
                      : io_in_op == 4'h3
                          ? io_in_src1 == io_in_src2
                          : io_in_op == 4'h2 | io_in_op == 4'h1;
endmodule

module Lsu_axi(
  input         clock,
                reset,
                io_in_valid,
                io_in_mem_wen,
  input  [31:0] io_in_addr,
                io_in_wdata,
  input  [3:0]  io_in_op,
  input         axi_ar_ready,
                axi_r_valid,
  input  [31:0] axi_r_bits_data,
  input         axi_aw_ready,
                axi_b_valid,
  output [31:0] io_out_rdata,
  output        io_out_end,
                axi_ar_valid,
  output [31:0] axi_ar_bits_addr,
  output        axi_r_ready,
                axi_aw_valid,
  output [31:0] axi_aw_bits_addr,
  output        axi_w_valid,
  output [31:0] axi_w_bits_data,
  output [3:0]  axi_w_bits_strb
);

  reg  [2:0]       state_lsu;
  wire             _sh_wmask_T_2 = io_in_addr[1:0] == 2'h2;
  wire [3:0][31:0] _GEN =
    {{{{24{axi_r_bits_data[31]}}, axi_r_bits_data[31:24]}},
     {{{24{axi_r_bits_data[23]}}, axi_r_bits_data[23:16]}},
     {{{24{axi_r_bits_data[15]}}, axi_r_bits_data[15:8]}},
     {{{24{axi_r_bits_data[7]}}, axi_r_bits_data[7:0]}}};
  wire [3:0][7:0]  _GEN_0 =
    {{axi_r_bits_data[31:24]},
     {axi_r_bits_data[23:16]},
     {axi_r_bits_data[15:8]},
     {axi_r_bits_data[7:0]}};
  wire             _sh_wmask_T = io_in_addr[1:0] == 2'h0;
  wire             _axi_ar_valid_output = state_lsu == 3'h1;
  wire             _axi_r_ready_output = state_lsu == 3'h2;
  wire             _axi_aw_valid_output = state_lsu == 3'h3;
  wire             _axi_b_ready_T_1 = state_lsu == 3'h4;
  wire [7:0][2:0]  _GEN_1 =
    {{state_lsu},
     {state_lsu},
     {3'h0},
     {{2'h2, _axi_b_ready_T_1 & axi_b_valid}},
     {axi_aw_ready & _axi_aw_valid_output ? 3'h4 : 3'h3},
     {_axi_r_ready_output & axi_r_valid ? 3'h5 : 3'h2},
     {axi_ar_ready & _axi_ar_valid_output ? 3'h2 : 3'h1},
     {io_in_valid ? {1'h0, io_in_mem_wen, 1'h1} : 3'h0}};
  always @(posedge clock) begin
    if (reset)
      state_lsu <= 3'h0;
    else
      state_lsu <= _GEN_1[state_lsu];
  end // always @(posedge)
  assign io_out_rdata =
    io_in_op == 4'h3
      ? axi_r_bits_data
      : io_in_op == 4'h5
          ? (_sh_wmask_T_2
               ? {16'h0, axi_r_bits_data[31:16]}
               : _sh_wmask_T ? {16'h0, axi_r_bits_data[15:0]} : 32'h0)
          : io_in_op == 4'h2
              ? (_sh_wmask_T_2
                   ? {{16{axi_r_bits_data[31]}}, axi_r_bits_data[31:16]}
                   : _sh_wmask_T
                       ? {{16{axi_r_bits_data[15]}}, axi_r_bits_data[15:0]}
                       : 32'h0)
              : io_in_op == 4'h4
                  ? {24'h0, _GEN_0[io_in_addr[1:0]]}
                  : io_in_op == 4'h1 ? _GEN[io_in_addr[1:0]] : 32'h0;
  assign io_out_end = state_lsu == 3'h5;
  assign axi_ar_valid = _axi_ar_valid_output;
  assign axi_ar_bits_addr = io_in_addr;
  assign axi_r_ready = _axi_r_ready_output;
  assign axi_aw_valid = _axi_aw_valid_output;
  assign axi_aw_bits_addr = io_in_addr;
  assign axi_w_valid = _axi_b_ready_T_1;
  assign axi_w_bits_data = io_in_wdata;
  assign axi_w_bits_strb =
    io_in_op == 4'h8
      ? 4'hF
      : io_in_op == 4'h7
          ? (_sh_wmask_T_2 ? 4'hC : {2'h0, {2{_sh_wmask_T}}})
          : io_in_op == 4'h6
              ? ((&(io_in_addr[1:0]))
                   ? 4'h8
                   : {1'h0,
                      _sh_wmask_T_2
                        ? 3'h4
                        : {1'h0, io_in_addr[1:0] == 2'h1 ? 2'h2 : 2'h1}})
              : 4'h0;
endmodule

module Csr(
  input         clock,
                reset,
  input  [2:0]  io_in_op,
  input  [31:0] io_in_cur_pc,
                io_in_csr_id,
                io_in_wdata,
  output        io_out_csr_br,
  output [31:0] io_out_csr_addr,
                io_out_r_csr,
                io_out_difftest_mcause,
                io_out_difftest_mepc,
                io_out_difftest_mstatus,
                io_out_difftest_mtvec
);

  reg  [31:0] reg_mepc;
  reg  [31:0] reg_mcause;
  reg  [31:0] reg_mstatus;
  reg  [31:0] reg_mtvec;
  wire        _io_out_r_csr_T_4 = io_in_csr_id == 32'h342;
  wire        _io_out_csr_addr_T = io_in_op == 3'h1;
  wire        _io_out_r_csr_T_2 = io_in_csr_id == 32'h341;
  wire        _io_out_r_csr_T_6 = io_in_csr_id == 32'h300;
  wire        _io_out_csr_addr_T_2 = io_in_op == 3'h2;
  wire        _io_out_r_csr_T = io_in_csr_id == 32'h305;
  wire        _reg_mtvec_T = io_in_op == 3'h3;
  always @(posedge clock) begin
    if (reset) begin
      reg_mepc <= 32'h0;
      reg_mcause <= 32'h0;
      reg_mstatus <= 32'h0;
      reg_mtvec <= 32'h0;
    end
    else if (io_in_op == 3'h4) begin
      reg_mepc <= {32{_io_out_r_csr_T_2}} & io_in_wdata | reg_mepc;
      reg_mcause <= {32{_io_out_r_csr_T_4}} & io_in_wdata | reg_mcause;
      reg_mstatus <= {32{_io_out_r_csr_T_6}} & io_in_wdata | reg_mstatus;
      reg_mtvec <= {32{_io_out_r_csr_T}} & io_in_wdata | reg_mtvec;
    end
    else begin
      if (_reg_mtvec_T) begin
        if (_io_out_r_csr_T_2)
          reg_mepc <= io_in_wdata;
        if (_io_out_r_csr_T_4)
          reg_mcause <= io_in_wdata;
        if (_io_out_r_csr_T_6)
          reg_mstatus <= io_in_wdata;
      end
      else begin
        if (_io_out_csr_addr_T) begin
          reg_mepc <= io_in_cur_pc;
          reg_mcause <= 32'hB;
        end
        if (_io_out_csr_addr_T_2)
          reg_mstatus <=
            {1'h0,
             reg_mstatus[31:13],
             1'h0,
             reg_mstatus[10:8],
             1'h1,
             reg_mstatus[6:4],
             reg_mstatus[7],
             reg_mstatus[2:0]};
        else if (_io_out_csr_addr_T)
          reg_mstatus <=
            {reg_mstatus[31:13],
             2'h3,
             reg_mstatus[10:8],
             reg_mstatus[3],
             reg_mstatus[6:4],
             1'h0,
             reg_mstatus[2:0]};
      end
      if (_reg_mtvec_T & _io_out_r_csr_T)
        reg_mtvec <= io_in_wdata;
    end
  end // always @(posedge)
  assign io_out_csr_br = _io_out_csr_addr_T_2 | _io_out_csr_addr_T;
  assign io_out_csr_addr =
    _io_out_csr_addr_T_2 ? reg_mepc : _io_out_csr_addr_T ? reg_mtvec : 32'h0;
  assign io_out_r_csr =
    _io_out_r_csr_T_6
      ? reg_mstatus
      : _io_out_r_csr_T_4
          ? reg_mcause
          : _io_out_r_csr_T_2 ? reg_mepc : _io_out_r_csr_T ? reg_mtvec : 32'h0;
  assign io_out_difftest_mcause = reg_mcause;
  assign io_out_difftest_mepc = reg_mepc;
  assign io_out_difftest_mstatus = reg_mstatus;
  assign io_out_difftest_mtvec = reg_mtvec;
endmodule

// external module EbreakBB

module ebreak_moudle(
  input is_ebreak
);

  EbreakBB EbreakBB_i1 (
    .is_ebreak (is_ebreak)
  );
endmodule

// external module NotImplBB

module not_impl_moudle(
  input not_impl
);

  NotImplBB NotImplBB_i1 (
    .not_impl (not_impl)
  );
endmodule

module EXU_pipeline(
  input         clock,
                reset,
                from_ISU_valid,
  input  [31:0] from_ISU_bits_imm,
                from_ISU_bits_pc,
                from_ISU_bits_rdata1,
                from_ISU_bits_rdata2,
  input  [4:0]  from_ISU_bits_rd,
  input         from_ISU_bits_ctrl_sig_reg_wen,
  input  [2:0]  from_ISU_bits_ctrl_sig_fu_op,
  input         from_ISU_bits_ctrl_sig_mem_wen,
                from_ISU_bits_ctrl_sig_is_ebreak,
                from_ISU_bits_ctrl_sig_not_impl,
  input  [1:0]  from_ISU_bits_ctrl_sig_src1_op,
                from_ISU_bits_ctrl_sig_src2_op,
  input  [3:0]  from_ISU_bits_ctrl_sig_alu_op,
                from_ISU_bits_ctrl_sig_lsu_op,
                from_ISU_bits_ctrl_sig_bru_op,
  input  [2:0]  from_ISU_bits_ctrl_sig_csr_op,
  input  [3:0]  from_ISU_bits_ctrl_sig_mdu_op,
  input  [31:0] from_ISU_bits_inst,
  input         to_IFU_ready,
                lsu_to_mem_ar_ready,
                lsu_to_mem_r_valid,
  input  [31:0] lsu_to_mem_r_bits_data,
  input         lsu_to_mem_aw_ready,
                lsu_to_mem_b_valid,
  output        from_ISU_ready,
                to_WBU_valid,
  output [31:0] to_WBU_bits_alu_result,
                to_WBU_bits_mdu_result,
                to_WBU_bits_lsu_rdata,
                to_WBU_bits_csr_rdata,
                to_WBU_bits_pc,
  output        to_WBU_bits_reg_wen,
  output [4:0]  to_WBU_bits_rd,
  output [2:0]  to_WBU_bits_fu_op,
  output [31:0] to_WBU_bits_inst,
  output        to_IFU_valid,
  output [31:0] to_IFU_bits_target,
  output        to_IFU_bits_redirect,
  output [31:0] difftest_mcause,
                difftest_mepc,
                difftest_mstatus,
                difftest_mtvec,
  output        lsu_to_mem_ar_valid,
  output [31:0] lsu_to_mem_ar_bits_addr,
  output        lsu_to_mem_r_ready,
                lsu_to_mem_aw_valid,
  output [31:0] lsu_to_mem_aw_bits_addr,
  output        lsu_to_mem_w_valid,
  output [31:0] lsu_to_mem_w_bits_data,
  output [3:0]  lsu_to_mem_w_bits_strb,
  output [4:0]  to_ISU_rd,
  output        to_ISU_have_wb,
                to_ISU_isBRU
);

  wire        _to_IFU_valid_output;
  wire        _Csr_i_io_out_csr_br;
  wire [31:0] _Csr_i_io_out_csr_addr;
  wire        _Lsu_i_io_out_end;
  wire        _Bru_i_io_out_ctrl_br;
  wire [31:0] _Alu_i_io_out_result;
  wire        _GEN = from_ISU_bits_ctrl_sig_fu_op != 3'h4;
  wire        _to_IFU_bits_target_T = from_ISU_bits_ctrl_sig_fu_op == 3'h3;
  wire        _to_IFU_bits_target_T_2 = from_ISU_bits_ctrl_sig_fu_op == 3'h5;
  wire        _GEN_0 = _to_IFU_bits_target_T_2 | _to_IFU_bits_target_T;
  assign _to_IFU_valid_output = _to_IFU_bits_target_T_2 | _to_IFU_bits_target_T;
  Alu Alu_i (
    .io_in_src1
      (from_ISU_bits_ctrl_sig_src1_op == 2'h1
         ? from_ISU_bits_pc
         : from_ISU_bits_ctrl_sig_src1_op == 2'h2 ? from_ISU_bits_rdata1 : 32'h0),
    .io_in_src2
      ((&from_ISU_bits_ctrl_sig_src2_op)
         ? from_ISU_bits_imm
         : from_ISU_bits_ctrl_sig_src2_op == 2'h2 ? from_ISU_bits_rdata2 : 32'h0),
    .io_in_op      (from_ISU_bits_ctrl_sig_alu_op),
    .io_out_result (_Alu_i_io_out_result)
  );
  Mdu Mdu_i (
    .io_in_src1    (from_ISU_bits_rdata1),
    .io_in_src2    (from_ISU_bits_rdata2),
    .io_in_op      (from_ISU_bits_ctrl_sig_mdu_op),
    .io_out_result (to_WBU_bits_mdu_result)
  );
  Bru Bru_i (
    .io_in_src1     (from_ISU_bits_rdata1),
    .io_in_src2     (from_ISU_bits_rdata2),
    .io_in_op       (from_ISU_bits_ctrl_sig_bru_op),
    .io_out_ctrl_br (_Bru_i_io_out_ctrl_br)
  );
  Lsu_axi Lsu_i (
    .clock            (clock),
    .reset            (reset),
    .io_in_valid      (from_ISU_bits_ctrl_sig_fu_op == 3'h4 & from_ISU_valid),
    .io_in_mem_wen    (from_ISU_bits_ctrl_sig_mem_wen),
    .io_in_addr       (_Alu_i_io_out_result),
    .io_in_wdata      (from_ISU_bits_rdata2),
    .io_in_op         (from_ISU_bits_ctrl_sig_lsu_op),
    .axi_ar_ready     (lsu_to_mem_ar_ready),
    .axi_r_valid      (lsu_to_mem_r_valid),
    .axi_r_bits_data  (lsu_to_mem_r_bits_data),
    .axi_aw_ready     (lsu_to_mem_aw_ready),
    .axi_b_valid      (lsu_to_mem_b_valid),
    .io_out_rdata     (to_WBU_bits_lsu_rdata),
    .io_out_end       (_Lsu_i_io_out_end),
    .axi_ar_valid     (lsu_to_mem_ar_valid),
    .axi_ar_bits_addr (lsu_to_mem_ar_bits_addr),
    .axi_r_ready      (lsu_to_mem_r_ready),
    .axi_aw_valid     (lsu_to_mem_aw_valid),
    .axi_aw_bits_addr (lsu_to_mem_aw_bits_addr),
    .axi_w_valid      (lsu_to_mem_w_valid),
    .axi_w_bits_data  (lsu_to_mem_w_bits_data),
    .axi_w_bits_strb  (lsu_to_mem_w_bits_strb)
  );
  Csr Csr_i (
    .clock                   (clock),
    .reset                   (reset),
    .io_in_op                (from_ISU_bits_ctrl_sig_csr_op),
    .io_in_cur_pc            (from_ISU_bits_pc),
    .io_in_csr_id            (from_ISU_bits_imm),
    .io_in_wdata             (from_ISU_bits_rdata1),
    .io_out_csr_br           (_Csr_i_io_out_csr_br),
    .io_out_csr_addr         (_Csr_i_io_out_csr_addr),
    .io_out_r_csr            (to_WBU_bits_csr_rdata),
    .io_out_difftest_mcause  (difftest_mcause),
    .io_out_difftest_mepc    (difftest_mepc),
    .io_out_difftest_mstatus (difftest_mstatus),
    .io_out_difftest_mtvec   (difftest_mtvec)
  );
  ebreak_moudle ebreak_moudle_i (
    .is_ebreak (from_ISU_bits_ctrl_sig_is_ebreak & from_ISU_valid)
  );
  not_impl_moudle not_impl_moudle_i (
    .not_impl (from_ISU_bits_ctrl_sig_not_impl & from_ISU_valid)
  );
  assign from_ISU_ready =
    _GEN_0 ? to_IFU_ready : _GEN | ~from_ISU_valid | _Lsu_i_io_out_end;
  assign to_WBU_valid =
    from_ISU_valid
    & (_GEN_0 ? to_IFU_ready & _to_IFU_valid_output : _GEN | _Lsu_i_io_out_end);
  assign to_WBU_bits_alu_result = _Alu_i_io_out_result;
  assign to_WBU_bits_pc = from_ISU_bits_pc;
  assign to_WBU_bits_reg_wen = from_ISU_bits_ctrl_sig_reg_wen;
  assign to_WBU_bits_rd = from_ISU_bits_rd;
  assign to_WBU_bits_fu_op = from_ISU_bits_ctrl_sig_fu_op;
  assign to_WBU_bits_inst = from_ISU_bits_inst;
  assign to_IFU_valid = _to_IFU_valid_output;
  assign to_IFU_bits_target =
    _to_IFU_bits_target_T_2
      ? _Csr_i_io_out_csr_addr
      : _to_IFU_bits_target_T ? _Alu_i_io_out_result : 32'h0;
  assign to_IFU_bits_redirect =
    (_Bru_i_io_out_ctrl_br | _Csr_i_io_out_csr_br) & from_ISU_valid;
  assign to_ISU_rd = from_ISU_bits_rd;
  assign to_ISU_have_wb = ~from_ISU_valid;
  assign to_ISU_isBRU = from_ISU_bits_ctrl_sig_fu_op == 3'h3;
endmodule

module WBU(
  input         from_EXU_valid,
  input  [31:0] from_EXU_bits_alu_result,
                from_EXU_bits_mdu_result,
                from_EXU_bits_lsu_rdata,
                from_EXU_bits_csr_rdata,
                from_EXU_bits_pc,
  input         from_EXU_bits_reg_wen,
  input  [4:0]  from_EXU_bits_rd,
  input  [2:0]  from_EXU_bits_fu_op,
  output        to_ISU_bits_reg_wen,
  output [31:0] to_ISU_bits_wdata,
  output [4:0]  to_ISU_bits_rd
);

  wire [7:0][31:0] _GEN =
    {{32'h0},
     {32'h0},
     {from_EXU_bits_csr_rdata},
     {from_EXU_bits_lsu_rdata},
     {from_EXU_bits_pc + 32'h4},
     {from_EXU_bits_mdu_result},
     {from_EXU_bits_alu_result},
     {32'h0}};
  assign to_ISU_bits_reg_wen = from_EXU_valid & from_EXU_bits_reg_wen;
  assign to_ISU_bits_wdata = _GEN[from_EXU_bits_fu_op];
  assign to_ISU_bits_rd = from_EXU_bits_rd;
endmodule

module IFU_pipeline(
  input         clock,
                reset,
                to_IDU_ready,
                from_EXU_valid,
  input  [31:0] from_EXU_bits_target,
  input         from_EXU_bits_redirect,
                to_mem_req_ready,
                to_mem_resp_valid,
  input  [31:0] to_mem_resp_bits_rdata,
                to_IDU_PC,
  output        to_IDU_valid,
  output [31:0] to_IDU_bits_inst,
                to_IDU_bits_pc,
  output        from_EXU_ready,
                to_mem_req_valid,
  output [31:0] to_mem_req_bits_addr,
  output        to_mem_resp_ready,
  output [31:0] fetch_PC
);

  reg [31:0] reg_PC;
  always @(posedge clock) begin
    if (reset)
      reg_PC <= 32'h80000000;
    else if (to_mem_req_ready & to_IDU_ready) begin
      if (to_mem_req_ready & from_EXU_valid & from_EXU_bits_redirect)
        reg_PC <= from_EXU_bits_target;
      else
        reg_PC <= reg_PC + 32'h4;
    end
  end // always @(posedge)
  assign to_IDU_valid = to_mem_resp_valid;
  assign to_IDU_bits_inst = to_mem_resp_bits_rdata;
  assign to_IDU_bits_pc = to_IDU_PC;
  assign from_EXU_ready = to_mem_req_ready;
  assign to_mem_req_valid = to_IDU_ready;
  assign to_mem_req_bits_addr = reg_PC;
  assign to_mem_resp_ready = to_IDU_ready;
  assign fetch_PC = reg_PC;
endmodule

// external module RamBB

module AXI4RAM(
  input         clock,
                reset,
                axi_ar_valid,
  input  [31:0] axi_ar_bits_addr,
  input  [7:0]  axi_ar_bits_len,
  input         axi_r_ready,
                axi_aw_valid,
  input  [31:0] axi_aw_bits_addr,
  input  [7:0]  axi_aw_bits_len,
  input  [1:0]  axi_aw_bits_burst,
  input         axi_w_valid,
  input  [31:0] axi_w_bits_data,
  input  [3:0]  axi_w_bits_strb,
  output        axi_ar_ready,
                axi_r_valid,
  output [31:0] axi_r_bits_data,
  output        axi_aw_ready,
                axi_b_valid
);

  reg              delay;
  reg  [7:0]       reg_AxLen;
  reg  [31:0]      reg_addr;
  reg  [1:0]       reg_burst;
  reg  [2:0]       state_sram;
  wire             _axi_aw_ready_output = state_sram == 3'h0;
  wire             _axi_w_ready_T_2 = state_sram == 3'h6;
  wire             _axi_r_valid_T_1 = state_sram == 3'h2;
  wire             _axi_r_valid_T_2 = state_sram == 3'h3;
  wire             _axi_r_valid_output = _axi_r_valid_T_2 | _axi_r_valid_T_1;
  wire             _GEN = _axi_aw_ready_output & axi_ar_valid;
  wire             _GEN_0 = _axi_aw_ready_output & axi_aw_valid;
  wire             _reg_addr_T = axi_r_ready & _axi_r_valid_output;
  wire             _GEN_1 = state_sram == 3'h3;
  wire             _GEN_2 = state_sram == 3'h4;
  wire             _GEN_3 = state_sram == 3'h6;
  wire             _reg_addr_T_6 =
    ((&state_sram) | _axi_w_ready_T_2 | state_sram == 3'h5) & axi_w_valid;
  wire             _GEN_4 = _GEN_1 | _GEN_2 | state_sram == 3'h5;
  wire [7:0]       _GEN_5 =
    _GEN_4 | ~(_GEN_3 & _reg_addr_T_6) ? reg_AxLen : reg_AxLen - 8'h1;
  wire [31:0]      _GEN_6 =
    _GEN_4 | ~(_GEN_3 & reg_burst == 2'h1 & _reg_addr_T_6) ? reg_addr : reg_addr + 32'h4;
  wire [7:0][7:0]  _GEN_7 =
    {{_GEN_5},
     {_GEN_5},
     {reg_AxLen},
     {reg_AxLen},
     {reg_AxLen},
     {_reg_addr_T ? reg_AxLen - 8'h1 : reg_AxLen},
     {reg_AxLen},
     {_GEN ? axi_ar_bits_len : _GEN_0 ? axi_aw_bits_len : reg_AxLen}};
  wire [7:0][31:0] _GEN_8 =
    {{_GEN_6},
     {_GEN_6},
     {reg_addr},
     {reg_addr},
     {reg_addr},
     {reg_burst == 2'h1 & _reg_addr_T ? reg_addr + 32'h4 : reg_addr},
     {reg_addr},
     {_GEN ? axi_ar_bits_addr : _GEN_0 ? axi_aw_bits_addr : reg_addr}};
  wire [7:0][2:0]  _GEN_9 =
    {{3'h0},
     {{2'h3, reg_AxLen == 8'h1}},
     {{2'h3, ~(|reg_AxLen)}},
     {{2'h2, ~delay}},
     {3'h0},
     {{2'h1, reg_AxLen == 8'h1}},
     {delay ? 3'h1 : {2'h1, ~(|reg_AxLen)}},
     {_GEN ? 3'h1 : {_GEN_0, 2'h0}}};
  always @(posedge clock) begin
    if (reset) begin
      delay <= 1'h0;
      reg_AxLen <= 8'h0;
      reg_addr <= 32'h0;
      reg_burst <= 2'h3;
      state_sram <= 3'h0;
    end
    else begin
      delay <=
        ~_axi_aw_ready_output
        & (state_sram == 3'h1
             ? delay - 1'h1
             : state_sram == 3'h2 | _GEN_1 | ~_GEN_2 ? delay : delay - 1'h1);
      reg_AxLen <= _GEN_7[state_sram];
      reg_addr <= _GEN_8[state_sram];
      if (_axi_aw_ready_output) begin
        if (_GEN)
          reg_burst <= 2'h1;
        else if (_GEN_0)
          reg_burst <= axi_aw_bits_burst;
      end
      state_sram <= _GEN_9[state_sram];
    end
  end // always @(posedge)
  RamBB RamBB_i1 (
    .clock   (clock),
    .addr    (reg_addr),
    .mem_wen ((&state_sram) | _axi_w_ready_T_2),
    .valid   ((&state_sram) | _axi_w_ready_T_2 | _axi_r_valid_T_2 | _axi_r_valid_T_1),
    .wdata   (axi_w_bits_data),
    .wmask   (axi_w_bits_strb),
    .rdata   (axi_r_bits_data)
  );
  assign axi_ar_ready = _axi_aw_ready_output;
  assign axi_r_valid = _axi_r_valid_output;
  assign axi_aw_ready = _axi_aw_ready_output;
  assign axi_b_valid = &state_sram;
endmodule

// VCS coverage exclude_file
module array_128x32(
  input  [6:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [6:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data
);

  reg [31:0] Memory[0:127];
  reg        _R0_en_d0;
  reg [6:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;
endmodule

module SRAMTemplate(
  input         clock,
                reset,
                io_r_req_valid,
  input  [6:0]  io_r_req_bits_raddr,
  input         io_w_req_valid,
  input  [6:0]  io_w_req_bits_waddr,
  input  [31:0] io_w_req_bits_wdata,
  output [31:0] io_r_resp_rdata
);

  wire [31:0] _array_ext_R0_data;
  reg         io_r_resp_rdata_REG;
  reg  [31:0] io_r_resp_rdata_r;
  always @(posedge clock) begin
    io_r_resp_rdata_REG <= io_r_req_valid;
    if (reset)
      io_r_resp_rdata_r <= 32'h0;
    else if (io_r_resp_rdata_REG)
      io_r_resp_rdata_r <= _array_ext_R0_data;
  end // always @(posedge)
  array_128x32 array_ext (
    .R0_addr (io_r_req_bits_raddr),
    .R0_en   (io_r_req_valid),
    .R0_clk  (clock),
    .W0_addr (io_w_req_bits_waddr),
    .W0_en   (io_w_req_valid),
    .W0_clk  (clock),
    .W0_data (io_w_req_bits_wdata),
    .R0_data (_array_ext_R0_data)
  );
  assign io_r_resp_rdata = io_r_resp_rdata_REG ? _array_ext_R0_data : io_r_resp_rdata_r;
endmodule

module CacheStage1(
  input         clock,
                reset,
                io_in_valid,
  input  [31:0] io_in_bits_addr,
  input         io_mem_req_ready,
                io_mem_resp_valid,
  input  [31:0] io_mem_resp_bits_rdata,
  output        io_in_ready,
                io_mem_req_valid,
  output [31:0] io_mem_req_bits_addr,
  output        io_mem_resp_ready,
                io_out_valid,
  output [31:0] io_out_bits_addr,
  output        io_dataReadBus_valid,
  output [6:0]  io_dataReadBus_bits_raddr,
  output        io_dataWriteBus_req_valid,
  output [6:0]  io_dataWriteBus_req_bits_waddr,
  output [31:0] io_dataWriteBus_req_bits_wdata
);

  reg               replaceWayReg;
  reg               randomNum;
  reg  [23:0]       tagArray_0_0;
  reg  [23:0]       tagArray_0_1;
  reg  [23:0]       tagArray_0_2;
  reg  [23:0]       tagArray_0_3;
  reg  [23:0]       tagArray_0_4;
  reg  [23:0]       tagArray_0_5;
  reg  [23:0]       tagArray_0_6;
  reg  [23:0]       tagArray_0_7;
  reg  [23:0]       tagArray_0_8;
  reg  [23:0]       tagArray_0_9;
  reg  [23:0]       tagArray_0_10;
  reg  [23:0]       tagArray_0_11;
  reg  [23:0]       tagArray_0_12;
  reg  [23:0]       tagArray_0_13;
  reg  [23:0]       tagArray_0_14;
  reg  [23:0]       tagArray_0_15;
  reg  [23:0]       tagArray_1_0;
  reg  [23:0]       tagArray_1_1;
  reg  [23:0]       tagArray_1_2;
  reg  [23:0]       tagArray_1_3;
  reg  [23:0]       tagArray_1_4;
  reg  [23:0]       tagArray_1_5;
  reg  [23:0]       tagArray_1_6;
  reg  [23:0]       tagArray_1_7;
  reg  [23:0]       tagArray_1_8;
  reg  [23:0]       tagArray_1_9;
  reg  [23:0]       tagArray_1_10;
  reg  [23:0]       tagArray_1_11;
  reg  [23:0]       tagArray_1_12;
  reg  [23:0]       tagArray_1_13;
  reg  [23:0]       tagArray_1_14;
  reg  [23:0]       tagArray_1_15;
  reg               validArray_0_0;
  reg               validArray_0_1;
  reg               validArray_0_2;
  reg               validArray_0_3;
  reg               validArray_0_4;
  reg               validArray_0_5;
  reg               validArray_0_6;
  reg               validArray_0_7;
  reg               validArray_0_8;
  reg               validArray_0_9;
  reg               validArray_0_10;
  reg               validArray_0_11;
  reg               validArray_0_12;
  reg               validArray_0_13;
  reg               validArray_0_14;
  reg               validArray_0_15;
  reg               validArray_1_0;
  reg               validArray_1_1;
  reg               validArray_1_2;
  reg               validArray_1_3;
  reg               validArray_1_4;
  reg               validArray_1_5;
  reg               validArray_1_6;
  reg               validArray_1_7;
  reg               validArray_1_8;
  reg               validArray_1_9;
  reg               validArray_1_10;
  reg               validArray_1_11;
  reg               validArray_1_12;
  reg               validArray_1_13;
  reg               validArray_1_14;
  reg               validArray_1_15;
  wire [15:0][23:0] _GEN =
    {{tagArray_0_15},
     {tagArray_0_14},
     {tagArray_0_13},
     {tagArray_0_12},
     {tagArray_0_11},
     {tagArray_0_10},
     {tagArray_0_9},
     {tagArray_0_8},
     {tagArray_0_7},
     {tagArray_0_6},
     {tagArray_0_5},
     {tagArray_0_4},
     {tagArray_0_3},
     {tagArray_0_2},
     {tagArray_0_1},
     {tagArray_0_0}};
  wire [15:0]       _GEN_0 =
    {{validArray_0_15},
     {validArray_0_14},
     {validArray_0_13},
     {validArray_0_12},
     {validArray_0_11},
     {validArray_0_10},
     {validArray_0_9},
     {validArray_0_8},
     {validArray_0_7},
     {validArray_0_6},
     {validArray_0_5},
     {validArray_0_4},
     {validArray_0_3},
     {validArray_0_2},
     {validArray_0_1},
     {validArray_0_0}};
  wire [15:0][23:0] _GEN_1 =
    {{tagArray_1_15},
     {tagArray_1_14},
     {tagArray_1_13},
     {tagArray_1_12},
     {tagArray_1_11},
     {tagArray_1_10},
     {tagArray_1_9},
     {tagArray_1_8},
     {tagArray_1_7},
     {tagArray_1_6},
     {tagArray_1_5},
     {tagArray_1_4},
     {tagArray_1_3},
     {tagArray_1_2},
     {tagArray_1_1},
     {tagArray_1_0}};
  wire [23:0]       _GEN_2 = _GEN_1[io_in_bits_addr[7:4]];
  wire [15:0]       _GEN_3 =
    {{validArray_1_15},
     {validArray_1_14},
     {validArray_1_13},
     {validArray_1_12},
     {validArray_1_11},
     {validArray_1_10},
     {validArray_1_9},
     {validArray_1_8},
     {validArray_1_7},
     {validArray_1_6},
     {validArray_1_5},
     {validArray_1_4},
     {validArray_1_3},
     {validArray_1_2},
     {validArray_1_1},
     {validArray_1_0}};
  wire              hit =
    io_in_bits_addr[31:8] == _GEN[io_in_bits_addr[7:4]] & _GEN_0[io_in_bits_addr[7:4]]
    | io_in_bits_addr[31:8] == _GEN_2 & _GEN_3[io_in_bits_addr[7:4]];
  reg  [1:0]        entryOff;
  reg  [2:0]        stateCache;
  wire              _io_mem_req_valid_output = stateCache == 3'h2;
  wire              _io_mem_resp_ready_output = stateCache == 3'h3;
  wire              _GEN_4 = stateCache == 3'h3;
  wire              _GEN_5 = stateCache == 3'h2;
  wire              _GEN_6 = io_in_bits_addr[7:4] == 4'h0;
  wire              _GEN_7 = (&entryOff) & ~replaceWayReg & _GEN_6;
  wire              _GEN_8 = io_in_bits_addr[7:4] == 4'h1;
  wire              _GEN_9 = (&entryOff) & ~replaceWayReg & _GEN_8;
  wire              _GEN_10 = io_in_bits_addr[7:4] == 4'h2;
  wire              _GEN_11 = (&entryOff) & ~replaceWayReg & _GEN_10;
  wire              _GEN_12 = io_in_bits_addr[7:4] == 4'h3;
  wire              _GEN_13 = (&entryOff) & ~replaceWayReg & _GEN_12;
  wire              _GEN_14 = io_in_bits_addr[7:4] == 4'h4;
  wire              _GEN_15 = (&entryOff) & ~replaceWayReg & _GEN_14;
  wire              _GEN_16 = io_in_bits_addr[7:4] == 4'h5;
  wire              _GEN_17 = (&entryOff) & ~replaceWayReg & _GEN_16;
  wire              _GEN_18 = io_in_bits_addr[7:4] == 4'h6;
  wire              _GEN_19 = (&entryOff) & ~replaceWayReg & _GEN_18;
  wire              _GEN_20 = io_in_bits_addr[7:4] == 4'h7;
  wire              _GEN_21 = (&entryOff) & ~replaceWayReg & _GEN_20;
  wire              _GEN_22 = io_in_bits_addr[7:4] == 4'h8;
  wire              _GEN_23 = (&entryOff) & ~replaceWayReg & _GEN_22;
  wire              _GEN_24 = io_in_bits_addr[7:4] == 4'h9;
  wire              _GEN_25 = (&entryOff) & ~replaceWayReg & _GEN_24;
  wire              _GEN_26 = io_in_bits_addr[7:4] == 4'hA;
  wire              _GEN_27 = (&entryOff) & ~replaceWayReg & _GEN_26;
  wire              _GEN_28 = io_in_bits_addr[7:4] == 4'hB;
  wire              _GEN_29 = (&entryOff) & ~replaceWayReg & _GEN_28;
  wire              _GEN_30 = io_in_bits_addr[7:4] == 4'hC;
  wire              _GEN_31 = (&entryOff) & ~replaceWayReg & _GEN_30;
  wire              _GEN_32 = io_in_bits_addr[7:4] == 4'hD;
  wire              _GEN_33 = (&entryOff) & ~replaceWayReg & _GEN_32;
  wire              _GEN_34 = io_in_bits_addr[7:4] == 4'hE;
  wire              _GEN_35 = (&entryOff) & ~replaceWayReg & _GEN_34;
  wire              _GEN_36 = (&entryOff) & ~replaceWayReg & (&(io_in_bits_addr[7:4]));
  wire              _GEN_37 = (&entryOff) & replaceWayReg & _GEN_6;
  wire              _GEN_38 = (&entryOff) & replaceWayReg & _GEN_8;
  wire              _GEN_39 = (&entryOff) & replaceWayReg & _GEN_10;
  wire              _GEN_40 = (&entryOff) & replaceWayReg & _GEN_12;
  wire              _GEN_41 = (&entryOff) & replaceWayReg & _GEN_14;
  wire              _GEN_42 = (&entryOff) & replaceWayReg & _GEN_16;
  wire              _GEN_43 = (&entryOff) & replaceWayReg & _GEN_18;
  wire              _GEN_44 = (&entryOff) & replaceWayReg & _GEN_20;
  wire              _GEN_45 = (&entryOff) & replaceWayReg & _GEN_22;
  wire              _GEN_46 = (&entryOff) & replaceWayReg & _GEN_24;
  wire              _GEN_47 = (&entryOff) & replaceWayReg & _GEN_26;
  wire              _GEN_48 = (&entryOff) & replaceWayReg & _GEN_28;
  wire              _GEN_49 = (&entryOff) & replaceWayReg & _GEN_30;
  wire              _GEN_50 = (&entryOff) & replaceWayReg & _GEN_32;
  wire              _GEN_51 = (&entryOff) & replaceWayReg & _GEN_34;
  wire              _GEN_52 = (&entryOff) & replaceWayReg & (&(io_in_bits_addr[7:4]));
  always @(posedge clock) begin
    if (reset) begin
      replaceWayReg <= 1'h0;
      randomNum <= 1'h0;
      tagArray_0_0 <= 24'h0;
      tagArray_0_1 <= 24'h0;
      tagArray_0_2 <= 24'h0;
      tagArray_0_3 <= 24'h0;
      tagArray_0_4 <= 24'h0;
      tagArray_0_5 <= 24'h0;
      tagArray_0_6 <= 24'h0;
      tagArray_0_7 <= 24'h0;
      tagArray_0_8 <= 24'h0;
      tagArray_0_9 <= 24'h0;
      tagArray_0_10 <= 24'h0;
      tagArray_0_11 <= 24'h0;
      tagArray_0_12 <= 24'h0;
      tagArray_0_13 <= 24'h0;
      tagArray_0_14 <= 24'h0;
      tagArray_0_15 <= 24'h0;
      tagArray_1_0 <= 24'h0;
      tagArray_1_1 <= 24'h0;
      tagArray_1_2 <= 24'h0;
      tagArray_1_3 <= 24'h0;
      tagArray_1_4 <= 24'h0;
      tagArray_1_5 <= 24'h0;
      tagArray_1_6 <= 24'h0;
      tagArray_1_7 <= 24'h0;
      tagArray_1_8 <= 24'h0;
      tagArray_1_9 <= 24'h0;
      tagArray_1_10 <= 24'h0;
      tagArray_1_11 <= 24'h0;
      tagArray_1_12 <= 24'h0;
      tagArray_1_13 <= 24'h0;
      tagArray_1_14 <= 24'h0;
      tagArray_1_15 <= 24'h0;
      validArray_0_0 <= 1'h0;
      validArray_0_1 <= 1'h0;
      validArray_0_2 <= 1'h0;
      validArray_0_3 <= 1'h0;
      validArray_0_4 <= 1'h0;
      validArray_0_5 <= 1'h0;
      validArray_0_6 <= 1'h0;
      validArray_0_7 <= 1'h0;
      validArray_0_8 <= 1'h0;
      validArray_0_9 <= 1'h0;
      validArray_0_10 <= 1'h0;
      validArray_0_11 <= 1'h0;
      validArray_0_12 <= 1'h0;
      validArray_0_13 <= 1'h0;
      validArray_0_14 <= 1'h0;
      validArray_0_15 <= 1'h0;
      validArray_1_0 <= 1'h0;
      validArray_1_1 <= 1'h0;
      validArray_1_2 <= 1'h0;
      validArray_1_3 <= 1'h0;
      validArray_1_4 <= 1'h0;
      validArray_1_5 <= 1'h0;
      validArray_1_6 <= 1'h0;
      validArray_1_7 <= 1'h0;
      validArray_1_8 <= 1'h0;
      validArray_1_9 <= 1'h0;
      validArray_1_10 <= 1'h0;
      validArray_1_11 <= 1'h0;
      validArray_1_12 <= 1'h0;
      validArray_1_13 <= 1'h0;
      validArray_1_14 <= 1'h0;
      validArray_1_15 <= 1'h0;
      entryOff <= 2'h0;
      stateCache <= 3'h0;
    end
    else begin
      if ((|stateCache) & _GEN_5)
        replaceWayReg <= randomNum;
      randomNum <= randomNum - 1'h1;
      if (_GEN_7)
        tagArray_0_0 <= io_in_bits_addr[31:8];
      if (_GEN_9)
        tagArray_0_1 <= io_in_bits_addr[31:8];
      if (_GEN_11)
        tagArray_0_2 <= io_in_bits_addr[31:8];
      if (_GEN_13)
        tagArray_0_3 <= io_in_bits_addr[31:8];
      if (_GEN_15)
        tagArray_0_4 <= io_in_bits_addr[31:8];
      if (_GEN_17)
        tagArray_0_5 <= io_in_bits_addr[31:8];
      if (_GEN_19)
        tagArray_0_6 <= io_in_bits_addr[31:8];
      if (_GEN_21)
        tagArray_0_7 <= io_in_bits_addr[31:8];
      if (_GEN_23)
        tagArray_0_8 <= io_in_bits_addr[31:8];
      if (_GEN_25)
        tagArray_0_9 <= io_in_bits_addr[31:8];
      if (_GEN_27)
        tagArray_0_10 <= io_in_bits_addr[31:8];
      if (_GEN_29)
        tagArray_0_11 <= io_in_bits_addr[31:8];
      if (_GEN_31)
        tagArray_0_12 <= io_in_bits_addr[31:8];
      if (_GEN_33)
        tagArray_0_13 <= io_in_bits_addr[31:8];
      if (_GEN_35)
        tagArray_0_14 <= io_in_bits_addr[31:8];
      if (_GEN_36)
        tagArray_0_15 <= io_in_bits_addr[31:8];
      if (_GEN_37)
        tagArray_1_0 <= io_in_bits_addr[31:8];
      if (_GEN_38)
        tagArray_1_1 <= io_in_bits_addr[31:8];
      if (_GEN_39)
        tagArray_1_2 <= io_in_bits_addr[31:8];
      if (_GEN_40)
        tagArray_1_3 <= io_in_bits_addr[31:8];
      if (_GEN_41)
        tagArray_1_4 <= io_in_bits_addr[31:8];
      if (_GEN_42)
        tagArray_1_5 <= io_in_bits_addr[31:8];
      if (_GEN_43)
        tagArray_1_6 <= io_in_bits_addr[31:8];
      if (_GEN_44)
        tagArray_1_7 <= io_in_bits_addr[31:8];
      if (_GEN_45)
        tagArray_1_8 <= io_in_bits_addr[31:8];
      if (_GEN_46)
        tagArray_1_9 <= io_in_bits_addr[31:8];
      if (_GEN_47)
        tagArray_1_10 <= io_in_bits_addr[31:8];
      if (_GEN_48)
        tagArray_1_11 <= io_in_bits_addr[31:8];
      if (_GEN_49)
        tagArray_1_12 <= io_in_bits_addr[31:8];
      if (_GEN_50)
        tagArray_1_13 <= io_in_bits_addr[31:8];
      if (_GEN_51)
        tagArray_1_14 <= io_in_bits_addr[31:8];
      if (_GEN_52)
        tagArray_1_15 <= io_in_bits_addr[31:8];
      validArray_0_0 <= _GEN_7 | validArray_0_0;
      validArray_0_1 <= _GEN_9 | validArray_0_1;
      validArray_0_2 <= _GEN_11 | validArray_0_2;
      validArray_0_3 <= _GEN_13 | validArray_0_3;
      validArray_0_4 <= _GEN_15 | validArray_0_4;
      validArray_0_5 <= _GEN_17 | validArray_0_5;
      validArray_0_6 <= _GEN_19 | validArray_0_6;
      validArray_0_7 <= _GEN_21 | validArray_0_7;
      validArray_0_8 <= _GEN_23 | validArray_0_8;
      validArray_0_9 <= _GEN_25 | validArray_0_9;
      validArray_0_10 <= _GEN_27 | validArray_0_10;
      validArray_0_11 <= _GEN_29 | validArray_0_11;
      validArray_0_12 <= _GEN_31 | validArray_0_12;
      validArray_0_13 <= _GEN_33 | validArray_0_13;
      validArray_0_14 <= _GEN_35 | validArray_0_14;
      validArray_0_15 <= _GEN_36 | validArray_0_15;
      validArray_1_0 <= _GEN_37 | validArray_1_0;
      validArray_1_1 <= _GEN_38 | validArray_1_1;
      validArray_1_2 <= _GEN_39 | validArray_1_2;
      validArray_1_3 <= _GEN_40 | validArray_1_3;
      validArray_1_4 <= _GEN_41 | validArray_1_4;
      validArray_1_5 <= _GEN_42 | validArray_1_5;
      validArray_1_6 <= _GEN_43 | validArray_1_6;
      validArray_1_7 <= _GEN_44 | validArray_1_7;
      validArray_1_8 <= _GEN_45 | validArray_1_8;
      validArray_1_9 <= _GEN_46 | validArray_1_9;
      validArray_1_10 <= _GEN_47 | validArray_1_10;
      validArray_1_11 <= _GEN_48 | validArray_1_11;
      validArray_1_12 <= _GEN_49 | validArray_1_12;
      validArray_1_13 <= _GEN_50 | validArray_1_13;
      validArray_1_14 <= _GEN_51 | validArray_1_14;
      validArray_1_15 <= _GEN_52 | validArray_1_15;
      if (|stateCache) begin
        if (_GEN_5) begin
          entryOff <= 2'h0;
          stateCache <= {2'h1, io_mem_req_ready & _io_mem_req_valid_output};
        end
        else begin
          if (_GEN_4 & _io_mem_resp_ready_output & io_mem_resp_valid)
            entryOff <= entryOff + 2'h1;
          if (_GEN_4) begin
            if (&entryOff)
              stateCache <= 3'h4;
            else
              stateCache <= 3'h3;
          end
          else if (stateCache == 3'h4)
            stateCache <= 3'h0;
        end
      end
      else
        stateCache <= {1'h0, ~hit, 1'h0};
    end
  end // always @(posedge)
  assign io_in_ready = hit & (~(|stateCache) | stateCache == 3'h4);
  assign io_mem_req_valid = _io_mem_req_valid_output;
  assign io_mem_req_bits_addr = {io_in_bits_addr[31:4], 4'h0};
  assign io_mem_resp_ready = _io_mem_resp_ready_output;
  assign io_out_valid = hit;
  assign io_out_bits_addr = io_in_bits_addr;
  assign io_dataReadBus_valid = io_in_valid;
  assign io_dataReadBus_bits_raddr =
    {_GEN_2 == io_in_bits_addr[31:8], io_in_bits_addr[7:2]};
  assign io_dataWriteBus_req_valid =
    stateCache == 3'h3 & _io_mem_resp_ready_output & io_mem_resp_valid;
  assign io_dataWriteBus_req_bits_waddr = {replaceWayReg, io_in_bits_addr[7:4], entryOff};
  assign io_dataWriteBus_req_bits_wdata = io_mem_resp_bits_rdata;
endmodule

module CacheStage2(
  input         io_in_valid,
  input  [31:0] io_in_bits_addr,
                io_dataReadBus_rdata,
  input         io_out_resp_ready,
  output        io_in_ready,
  output [31:0] io_out_addr,
  output        io_out_resp_valid,
  output [31:0] io_out_resp_bits_rdata,
  output        io_in_valid__bore,
  output [31:0] io_in_bits_addr__bore
);

  assign io_in_ready = io_out_resp_ready;
  assign io_out_addr = io_in_bits_addr;
  assign io_out_resp_valid = io_in_valid;
  assign io_out_resp_bits_rdata = io_in_valid ? io_dataReadBus_rdata : 32'h0;
  assign io_in_valid__bore = io_in_valid;
  assign io_in_bits_addr__bore = io_in_bits_addr;
endmodule

module Cache(
  input         clock,
                reset,
                io_in_req_valid,
  input  [31:0] io_in_req_bits_addr,
  input         io_in_resp_ready,
                io_mem_req_ready,
                io_mem_resp_valid,
  input  [31:0] io_mem_resp_bits_rdata,
  input         io_flush,
  output        io_in_req_ready,
                io_in_resp_valid,
  output [31:0] io_in_resp_bits_rdata,
  output        io_mem_req_valid,
  output [31:0] io_mem_req_bits_addr,
  output        io_mem_resp_ready,
  output [31:0] io_stage2Addr,
  output        s2_io_in_valid__bore,
  output [31:0] s2_io_in_bits_addr__bore
);

  wire        _s2_io_in_ready;
  wire        _s2_io_out_resp_valid;
  wire        _s1_io_out_valid;
  wire [31:0] _s1_io_out_bits_addr;
  wire        _s1_io_dataReadBus_valid;
  wire [6:0]  _s1_io_dataReadBus_bits_raddr;
  wire        _s1_io_dataWriteBus_req_valid;
  wire [6:0]  _s1_io_dataWriteBus_req_bits_waddr;
  wire [31:0] _s1_io_dataWriteBus_req_bits_wdata;
  wire [31:0] _dataArray_io_r_resp_rdata;
  reg         valid;
  reg  [31:0] s2_io_in_bits_r_addr;
  wire        _s2_io_in_bits_T_1 = _s1_io_out_valid & _s2_io_in_ready;
  always @(posedge clock) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <=
        ~io_flush
        & (_s2_io_in_bits_T_1 | ~(io_in_resp_ready & _s2_io_out_resp_valid) & valid);
    if (_s2_io_in_bits_T_1) begin
      if (io_flush)
        s2_io_in_bits_r_addr <= 32'h0;
      else
        s2_io_in_bits_r_addr <= _s1_io_out_bits_addr;
    end
  end // always @(posedge)
  SRAMTemplate dataArray (
    .clock               (clock),
    .reset               (reset),
    .io_r_req_valid      (_s1_io_dataReadBus_valid),
    .io_r_req_bits_raddr (_s1_io_dataReadBus_bits_raddr),
    .io_w_req_valid      (_s1_io_dataWriteBus_req_valid),
    .io_w_req_bits_waddr (_s1_io_dataWriteBus_req_bits_waddr),
    .io_w_req_bits_wdata (_s1_io_dataWriteBus_req_bits_wdata),
    .io_r_resp_rdata     (_dataArray_io_r_resp_rdata)
  );
  CacheStage1 s1 (
    .clock                          (clock),
    .reset                          (reset),
    .io_in_valid                    (io_in_req_valid),
    .io_in_bits_addr                (io_in_req_bits_addr),
    .io_mem_req_ready               (io_mem_req_ready),
    .io_mem_resp_valid              (io_mem_resp_valid),
    .io_mem_resp_bits_rdata         (io_mem_resp_bits_rdata),
    .io_in_ready                    (io_in_req_ready),
    .io_mem_req_valid               (io_mem_req_valid),
    .io_mem_req_bits_addr           (io_mem_req_bits_addr),
    .io_mem_resp_ready              (io_mem_resp_ready),
    .io_out_valid                   (_s1_io_out_valid),
    .io_out_bits_addr               (_s1_io_out_bits_addr),
    .io_dataReadBus_valid           (_s1_io_dataReadBus_valid),
    .io_dataReadBus_bits_raddr      (_s1_io_dataReadBus_bits_raddr),
    .io_dataWriteBus_req_valid      (_s1_io_dataWriteBus_req_valid),
    .io_dataWriteBus_req_bits_waddr (_s1_io_dataWriteBus_req_bits_waddr),
    .io_dataWriteBus_req_bits_wdata (_s1_io_dataWriteBus_req_bits_wdata)
  );
  CacheStage2 s2 (
    .io_in_valid            (valid),
    .io_in_bits_addr        (s2_io_in_bits_r_addr),
    .io_dataReadBus_rdata   (_dataArray_io_r_resp_rdata),
    .io_out_resp_ready      (io_in_resp_ready),
    .io_in_ready            (_s2_io_in_ready),
    .io_out_addr            (io_stage2Addr),
    .io_out_resp_valid      (_s2_io_out_resp_valid),
    .io_out_resp_bits_rdata (io_in_resp_bits_rdata),
    .io_in_valid__bore      (s2_io_in_valid__bore),
    .io_in_bits_addr__bore  (s2_io_in_bits_addr__bore)
  );
  assign io_in_resp_valid = _s2_io_out_resp_valid;
endmodule

module SimpleBus2AXI4Converter(
  input         io_in_req_valid,
  input  [31:0] io_in_req_bits_addr,
  input         io_in_resp_ready,
                io_out_ar_ready,
                io_out_r_valid,
  input  [31:0] io_out_r_bits_data,
  output        io_in_req_ready,
                io_in_resp_valid,
  output [31:0] io_in_resp_bits_rdata,
  output        io_out_ar_valid,
  output [31:0] io_out_ar_bits_addr,
  output        io_out_r_ready,
  output [31:0] io_out_aw_bits_addr
);

  assign io_in_req_ready = io_out_ar_ready;
  assign io_in_resp_valid = io_out_r_valid;
  assign io_in_resp_bits_rdata = io_out_r_bits_data;
  assign io_out_ar_valid = io_in_req_valid;
  assign io_out_ar_bits_addr = io_in_req_bits_addr;
  assign io_out_r_ready = io_in_resp_ready;
  assign io_out_aw_bits_addr = io_in_req_bits_addr;
endmodule

module top(
  input         clock,
                reset,
  output [31:0] io_out_ifu_fetchPc,
                io_out_nextExecPC,
                io_out_ifu_inst,
                io_out_ifu_pc,
                io_out_idu_inst,
                io_out_idu_pc,
                io_out_exu_inst,
                io_out_exu_pc,
                io_out_wbu_inst,
                io_out_wbu_pc,
                io_out_difftest_mcause,
                io_out_difftest_mepc,
                io_out_difftest_mstatus,
                io_out_difftest_mtvec,
  output        io_out_wb
);

  wire        _ram_i2_axi_ar_ready;
  wire        _ram_i2_axi_r_valid;
  wire [31:0] _ram_i2_axi_r_bits_data;
  wire        _ram_i2_axi_aw_ready;
  wire        _ram_i2_axi_b_valid;
  wire        _bridge_io_in_req_ready;
  wire        _bridge_io_in_resp_valid;
  wire [31:0] _bridge_io_in_resp_bits_rdata;
  wire        _bridge_io_out_ar_valid;
  wire [31:0] _bridge_io_out_ar_bits_addr;
  wire        _bridge_io_out_r_ready;
  wire [31:0] _bridge_io_out_aw_bits_addr;
  wire        _icache_io_in_req_ready;
  wire        _icache_io_in_resp_valid;
  wire [31:0] _icache_io_in_resp_bits_rdata;
  wire        _icache_io_mem_req_valid;
  wire [31:0] _icache_io_mem_req_bits_addr;
  wire        _icache_io_mem_resp_ready;
  wire [31:0] _icache_io_stage2Addr;
  wire        _icache_s2_io_in_valid__bore;
  wire [31:0] _icache_s2_io_in_bits_addr__bore;
  wire        _ram_i_axi_ar_ready;
  wire        _ram_i_axi_r_valid;
  wire [31:0] _ram_i_axi_r_bits_data;
  wire        _IFU_i_to_IDU_valid;
  wire [31:0] _IFU_i_to_IDU_bits_inst;
  wire [31:0] _IFU_i_to_IDU_bits_pc;
  wire        _IFU_i_from_EXU_ready;
  wire        _IFU_i_to_mem_req_valid;
  wire [31:0] _IFU_i_to_mem_req_bits_addr;
  wire        _IFU_i_to_mem_resp_ready;
  wire [31:0] _IFU_i_fetch_PC;
  wire        _WBU_i_to_ISU_bits_reg_wen;
  wire [31:0] _WBU_i_to_ISU_bits_wdata;
  wire [4:0]  _WBU_i_to_ISU_bits_rd;
  wire        _EXU_i_from_ISU_ready;
  wire        _EXU_i_to_WBU_valid;
  wire [31:0] _EXU_i_to_WBU_bits_alu_result;
  wire [31:0] _EXU_i_to_WBU_bits_mdu_result;
  wire [31:0] _EXU_i_to_WBU_bits_lsu_rdata;
  wire [31:0] _EXU_i_to_WBU_bits_csr_rdata;
  wire [31:0] _EXU_i_to_WBU_bits_pc;
  wire        _EXU_i_to_WBU_bits_reg_wen;
  wire [4:0]  _EXU_i_to_WBU_bits_rd;
  wire [2:0]  _EXU_i_to_WBU_bits_fu_op;
  wire [31:0] _EXU_i_to_WBU_bits_inst;
  wire        _EXU_i_to_IFU_valid;
  wire [31:0] _EXU_i_to_IFU_bits_target;
  wire        _EXU_i_to_IFU_bits_redirect;
  wire        _EXU_i_lsu_to_mem_ar_valid;
  wire [31:0] _EXU_i_lsu_to_mem_ar_bits_addr;
  wire        _EXU_i_lsu_to_mem_r_ready;
  wire        _EXU_i_lsu_to_mem_aw_valid;
  wire [31:0] _EXU_i_lsu_to_mem_aw_bits_addr;
  wire        _EXU_i_lsu_to_mem_w_valid;
  wire [31:0] _EXU_i_lsu_to_mem_w_bits_data;
  wire [3:0]  _EXU_i_lsu_to_mem_w_bits_strb;
  wire [4:0]  _EXU_i_to_ISU_rd;
  wire        _EXU_i_to_ISU_have_wb;
  wire        _EXU_i_to_ISU_isBRU;
  wire        _ISU_i_from_IDU_ready;
  wire        _ISU_i_to_EXU_valid;
  wire [31:0] _ISU_i_to_EXU_bits_imm;
  wire [31:0] _ISU_i_to_EXU_bits_pc;
  wire [31:0] _ISU_i_to_EXU_bits_rdata1;
  wire [31:0] _ISU_i_to_EXU_bits_rdata2;
  wire [4:0]  _ISU_i_to_EXU_bits_rd;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_reg_wen;
  wire [2:0]  _ISU_i_to_EXU_bits_ctrl_sig_fu_op;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_mem_wen;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_is_ebreak;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_not_impl;
  wire [1:0]  _ISU_i_to_EXU_bits_ctrl_sig_src1_op;
  wire [1:0]  _ISU_i_to_EXU_bits_ctrl_sig_src2_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_alu_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_lsu_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_bru_op;
  wire [2:0]  _ISU_i_to_EXU_bits_ctrl_sig_csr_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_mdu_op;
  wire [31:0] _ISU_i_to_EXU_bits_inst;
  wire        _IDU_i_from_IFU_ready;
  wire        _IDU_i_to_ISU_valid;
  wire [31:0] _IDU_i_to_ISU_bits_imm;
  wire [31:0] _IDU_i_to_ISU_bits_pc;
  wire [4:0]  _IDU_i_to_ISU_bits_rs1;
  wire [4:0]  _IDU_i_to_ISU_bits_rs2;
  wire [4:0]  _IDU_i_to_ISU_bits_rd;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_reg_wen;
  wire [2:0]  _IDU_i_to_ISU_bits_ctrl_sig_fu_op;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_mem_wen;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_is_ebreak;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_not_impl;
  wire [1:0]  _IDU_i_to_ISU_bits_ctrl_sig_src1_op;
  wire [1:0]  _IDU_i_to_ISU_bits_ctrl_sig_src2_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_alu_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_lsu_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_bru_op;
  wire [2:0]  _IDU_i_to_ISU_bits_ctrl_sig_csr_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_mdu_op;
  wire [31:0] _IDU_i_to_ISU_bits_inst;
  reg         valid;
  reg  [31:0] IDU_i_from_IFU_bits_r_inst;
  reg  [31:0] IDU_i_from_IFU_bits_r_pc;
  reg         valid_1;
  reg  [31:0] EXU_i_from_ISU_bits_r_imm;
  reg  [31:0] EXU_i_from_ISU_bits_r_pc;
  reg  [31:0] EXU_i_from_ISU_bits_r_rdata1;
  reg  [31:0] EXU_i_from_ISU_bits_r_rdata2;
  reg  [4:0]  EXU_i_from_ISU_bits_r_rd;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_reg_wen;
  reg  [2:0]  EXU_i_from_ISU_bits_r_ctrl_sig_fu_op;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_mem_wen;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_is_ebreak;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_not_impl;
  reg  [1:0]  EXU_i_from_ISU_bits_r_ctrl_sig_src1_op;
  reg  [1:0]  EXU_i_from_ISU_bits_r_ctrl_sig_src2_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_alu_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_bru_op;
  reg  [2:0]  EXU_i_from_ISU_bits_r_ctrl_sig_csr_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op;
  reg  [31:0] EXU_i_from_ISU_bits_r_inst;
  wire        _GEN =
    _EXU_i_to_IFU_bits_redirect & _IDU_i_from_IFU_ready & _IFU_i_to_IDU_valid;
  wire        _IDU_i_from_IFU_bits_T_1 = _IFU_i_to_IDU_valid & _IDU_i_from_IFU_ready;
  wire        _GEN_0 =
    _EXU_i_to_IFU_bits_redirect & _EXU_i_from_ISU_ready & _ISU_i_to_EXU_valid;
  wire        _EXU_i_from_ISU_bits_T_1 = _ISU_i_to_EXU_valid & _EXU_i_from_ISU_ready;
  always @(posedge clock) begin
    if (reset) begin
      valid <= 1'h0;
      valid_1 <= 1'h0;
    end
    else begin
      valid <=
        ~_GEN
        & (_IDU_i_from_IFU_bits_T_1 | ~(_ISU_i_from_IDU_ready & _IDU_i_to_ISU_valid)
           & valid);
      valid_1 <= ~_GEN_0 & (_EXU_i_from_ISU_bits_T_1 | ~_EXU_i_to_WBU_valid & valid_1);
    end
    if (_IDU_i_from_IFU_bits_T_1) begin
      if (_GEN) begin
        IDU_i_from_IFU_bits_r_inst <= 32'h0;
        IDU_i_from_IFU_bits_r_pc <= 32'h0;
      end
      else begin
        IDU_i_from_IFU_bits_r_inst <= _IFU_i_to_IDU_bits_inst;
        IDU_i_from_IFU_bits_r_pc <= _IFU_i_to_IDU_bits_pc;
      end
    end
    if (_EXU_i_from_ISU_bits_T_1) begin
      if (_GEN_0) begin
        EXU_i_from_ISU_bits_r_imm <= 32'h0;
        EXU_i_from_ISU_bits_r_pc <= 32'h0;
        EXU_i_from_ISU_bits_r_rdata1 <= 32'h0;
        EXU_i_from_ISU_bits_r_rdata2 <= 32'h0;
        EXU_i_from_ISU_bits_r_rd <= 5'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_fu_op <= 3'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_src1_op <= 2'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_src2_op <= 2'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_alu_op <= 4'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op <= 4'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_bru_op <= 4'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_csr_op <= 3'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op <= 4'h0;
        EXU_i_from_ISU_bits_r_inst <= 32'h0;
      end
      else begin
        EXU_i_from_ISU_bits_r_imm <= _ISU_i_to_EXU_bits_imm;
        EXU_i_from_ISU_bits_r_pc <= _ISU_i_to_EXU_bits_pc;
        EXU_i_from_ISU_bits_r_rdata1 <= _ISU_i_to_EXU_bits_rdata1;
        EXU_i_from_ISU_bits_r_rdata2 <= _ISU_i_to_EXU_bits_rdata2;
        EXU_i_from_ISU_bits_r_rd <= _ISU_i_to_EXU_bits_rd;
        EXU_i_from_ISU_bits_r_ctrl_sig_fu_op <= _ISU_i_to_EXU_bits_ctrl_sig_fu_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_src1_op <= _ISU_i_to_EXU_bits_ctrl_sig_src1_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_src2_op <= _ISU_i_to_EXU_bits_ctrl_sig_src2_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_alu_op <= _ISU_i_to_EXU_bits_ctrl_sig_alu_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op <= _ISU_i_to_EXU_bits_ctrl_sig_lsu_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_bru_op <= _ISU_i_to_EXU_bits_ctrl_sig_bru_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_csr_op <= _ISU_i_to_EXU_bits_ctrl_sig_csr_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op <= _ISU_i_to_EXU_bits_ctrl_sig_mdu_op;
        EXU_i_from_ISU_bits_r_inst <= _ISU_i_to_EXU_bits_inst;
      end
      EXU_i_from_ISU_bits_r_ctrl_sig_reg_wen <=
        ~_GEN_0 & _ISU_i_to_EXU_bits_ctrl_sig_reg_wen;
      EXU_i_from_ISU_bits_r_ctrl_sig_mem_wen <=
        ~_GEN_0 & _ISU_i_to_EXU_bits_ctrl_sig_mem_wen;
      EXU_i_from_ISU_bits_r_ctrl_sig_is_ebreak <=
        ~_GEN_0 & _ISU_i_to_EXU_bits_ctrl_sig_is_ebreak;
      EXU_i_from_ISU_bits_r_ctrl_sig_not_impl <=
        ~_GEN_0 & _ISU_i_to_EXU_bits_ctrl_sig_not_impl;
    end
  end // always @(posedge)
  IDU IDU_i (
    .from_IFU_valid                 (valid),
    .from_IFU_bits_inst             (IDU_i_from_IFU_bits_r_inst),
    .from_IFU_bits_pc               (IDU_i_from_IFU_bits_r_pc),
    .to_ISU_ready                   (_ISU_i_from_IDU_ready),
    .from_IFU_ready                 (_IDU_i_from_IFU_ready),
    .to_ISU_valid                   (_IDU_i_to_ISU_valid),
    .to_ISU_bits_imm                (_IDU_i_to_ISU_bits_imm),
    .to_ISU_bits_pc                 (_IDU_i_to_ISU_bits_pc),
    .to_ISU_bits_rs1                (_IDU_i_to_ISU_bits_rs1),
    .to_ISU_bits_rs2                (_IDU_i_to_ISU_bits_rs2),
    .to_ISU_bits_rd                 (_IDU_i_to_ISU_bits_rd),
    .to_ISU_bits_ctrl_sig_reg_wen   (_IDU_i_to_ISU_bits_ctrl_sig_reg_wen),
    .to_ISU_bits_ctrl_sig_fu_op     (_IDU_i_to_ISU_bits_ctrl_sig_fu_op),
    .to_ISU_bits_ctrl_sig_mem_wen   (_IDU_i_to_ISU_bits_ctrl_sig_mem_wen),
    .to_ISU_bits_ctrl_sig_is_ebreak (_IDU_i_to_ISU_bits_ctrl_sig_is_ebreak),
    .to_ISU_bits_ctrl_sig_not_impl  (_IDU_i_to_ISU_bits_ctrl_sig_not_impl),
    .to_ISU_bits_ctrl_sig_src1_op   (_IDU_i_to_ISU_bits_ctrl_sig_src1_op),
    .to_ISU_bits_ctrl_sig_src2_op   (_IDU_i_to_ISU_bits_ctrl_sig_src2_op),
    .to_ISU_bits_ctrl_sig_alu_op    (_IDU_i_to_ISU_bits_ctrl_sig_alu_op),
    .to_ISU_bits_ctrl_sig_lsu_op    (_IDU_i_to_ISU_bits_ctrl_sig_lsu_op),
    .to_ISU_bits_ctrl_sig_bru_op    (_IDU_i_to_ISU_bits_ctrl_sig_bru_op),
    .to_ISU_bits_ctrl_sig_csr_op    (_IDU_i_to_ISU_bits_ctrl_sig_csr_op),
    .to_ISU_bits_ctrl_sig_mdu_op    (_IDU_i_to_ISU_bits_ctrl_sig_mdu_op),
    .to_ISU_bits_inst               (_IDU_i_to_ISU_bits_inst)
  );
  ISU ISU_i (
    .clock                            (clock),
    .reset                            (reset),
    .from_IDU_valid                   (_IDU_i_to_ISU_valid),
    .from_IDU_bits_imm                (_IDU_i_to_ISU_bits_imm),
    .from_IDU_bits_pc                 (_IDU_i_to_ISU_bits_pc),
    .from_IDU_bits_rs1                (_IDU_i_to_ISU_bits_rs1),
    .from_IDU_bits_rs2                (_IDU_i_to_ISU_bits_rs2),
    .from_IDU_bits_rd                 (_IDU_i_to_ISU_bits_rd),
    .from_IDU_bits_ctrl_sig_reg_wen   (_IDU_i_to_ISU_bits_ctrl_sig_reg_wen),
    .from_IDU_bits_ctrl_sig_fu_op     (_IDU_i_to_ISU_bits_ctrl_sig_fu_op),
    .from_IDU_bits_ctrl_sig_mem_wen   (_IDU_i_to_ISU_bits_ctrl_sig_mem_wen),
    .from_IDU_bits_ctrl_sig_is_ebreak (_IDU_i_to_ISU_bits_ctrl_sig_is_ebreak),
    .from_IDU_bits_ctrl_sig_not_impl  (_IDU_i_to_ISU_bits_ctrl_sig_not_impl),
    .from_IDU_bits_ctrl_sig_src1_op   (_IDU_i_to_ISU_bits_ctrl_sig_src1_op),
    .from_IDU_bits_ctrl_sig_src2_op   (_IDU_i_to_ISU_bits_ctrl_sig_src2_op),
    .from_IDU_bits_ctrl_sig_alu_op    (_IDU_i_to_ISU_bits_ctrl_sig_alu_op),
    .from_IDU_bits_ctrl_sig_lsu_op    (_IDU_i_to_ISU_bits_ctrl_sig_lsu_op),
    .from_IDU_bits_ctrl_sig_bru_op    (_IDU_i_to_ISU_bits_ctrl_sig_bru_op),
    .from_IDU_bits_ctrl_sig_csr_op    (_IDU_i_to_ISU_bits_ctrl_sig_csr_op),
    .from_IDU_bits_ctrl_sig_mdu_op    (_IDU_i_to_ISU_bits_ctrl_sig_mdu_op),
    .from_IDU_bits_inst               (_IDU_i_to_ISU_bits_inst),
    .from_WBU_bits_reg_wen            (_WBU_i_to_ISU_bits_reg_wen),
    .from_WBU_bits_wdata              (_WBU_i_to_ISU_bits_wdata),
    .from_WBU_bits_rd                 (_WBU_i_to_ISU_bits_rd),
    .to_EXU_ready                     (_EXU_i_from_ISU_ready),
    .from_EXU_rd                      (_EXU_i_to_ISU_rd),
    .from_EXU_have_wb                 (_EXU_i_to_ISU_have_wb),
    .from_EXU_isBRU                   (_EXU_i_to_ISU_isBRU),
    .from_IDU_ready                   (_ISU_i_from_IDU_ready),
    .to_EXU_valid                     (_ISU_i_to_EXU_valid),
    .to_EXU_bits_imm                  (_ISU_i_to_EXU_bits_imm),
    .to_EXU_bits_pc                   (_ISU_i_to_EXU_bits_pc),
    .to_EXU_bits_rdata1               (_ISU_i_to_EXU_bits_rdata1),
    .to_EXU_bits_rdata2               (_ISU_i_to_EXU_bits_rdata2),
    .to_EXU_bits_rd                   (_ISU_i_to_EXU_bits_rd),
    .to_EXU_bits_ctrl_sig_reg_wen     (_ISU_i_to_EXU_bits_ctrl_sig_reg_wen),
    .to_EXU_bits_ctrl_sig_fu_op       (_ISU_i_to_EXU_bits_ctrl_sig_fu_op),
    .to_EXU_bits_ctrl_sig_mem_wen     (_ISU_i_to_EXU_bits_ctrl_sig_mem_wen),
    .to_EXU_bits_ctrl_sig_is_ebreak   (_ISU_i_to_EXU_bits_ctrl_sig_is_ebreak),
    .to_EXU_bits_ctrl_sig_not_impl    (_ISU_i_to_EXU_bits_ctrl_sig_not_impl),
    .to_EXU_bits_ctrl_sig_src1_op     (_ISU_i_to_EXU_bits_ctrl_sig_src1_op),
    .to_EXU_bits_ctrl_sig_src2_op     (_ISU_i_to_EXU_bits_ctrl_sig_src2_op),
    .to_EXU_bits_ctrl_sig_alu_op      (_ISU_i_to_EXU_bits_ctrl_sig_alu_op),
    .to_EXU_bits_ctrl_sig_lsu_op      (_ISU_i_to_EXU_bits_ctrl_sig_lsu_op),
    .to_EXU_bits_ctrl_sig_bru_op      (_ISU_i_to_EXU_bits_ctrl_sig_bru_op),
    .to_EXU_bits_ctrl_sig_csr_op      (_ISU_i_to_EXU_bits_ctrl_sig_csr_op),
    .to_EXU_bits_ctrl_sig_mdu_op      (_ISU_i_to_EXU_bits_ctrl_sig_mdu_op),
    .to_EXU_bits_inst                 (_ISU_i_to_EXU_bits_inst)
  );
  EXU_pipeline EXU_i (
    .clock                            (clock),
    .reset                            (reset),
    .from_ISU_valid                   (valid_1),
    .from_ISU_bits_imm                (EXU_i_from_ISU_bits_r_imm),
    .from_ISU_bits_pc                 (EXU_i_from_ISU_bits_r_pc),
    .from_ISU_bits_rdata1             (EXU_i_from_ISU_bits_r_rdata1),
    .from_ISU_bits_rdata2             (EXU_i_from_ISU_bits_r_rdata2),
    .from_ISU_bits_rd                 (EXU_i_from_ISU_bits_r_rd),
    .from_ISU_bits_ctrl_sig_reg_wen   (EXU_i_from_ISU_bits_r_ctrl_sig_reg_wen),
    .from_ISU_bits_ctrl_sig_fu_op     (EXU_i_from_ISU_bits_r_ctrl_sig_fu_op),
    .from_ISU_bits_ctrl_sig_mem_wen   (EXU_i_from_ISU_bits_r_ctrl_sig_mem_wen),
    .from_ISU_bits_ctrl_sig_is_ebreak (EXU_i_from_ISU_bits_r_ctrl_sig_is_ebreak),
    .from_ISU_bits_ctrl_sig_not_impl  (EXU_i_from_ISU_bits_r_ctrl_sig_not_impl),
    .from_ISU_bits_ctrl_sig_src1_op   (EXU_i_from_ISU_bits_r_ctrl_sig_src1_op),
    .from_ISU_bits_ctrl_sig_src2_op   (EXU_i_from_ISU_bits_r_ctrl_sig_src2_op),
    .from_ISU_bits_ctrl_sig_alu_op    (EXU_i_from_ISU_bits_r_ctrl_sig_alu_op),
    .from_ISU_bits_ctrl_sig_lsu_op    (EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op),
    .from_ISU_bits_ctrl_sig_bru_op    (EXU_i_from_ISU_bits_r_ctrl_sig_bru_op),
    .from_ISU_bits_ctrl_sig_csr_op    (EXU_i_from_ISU_bits_r_ctrl_sig_csr_op),
    .from_ISU_bits_ctrl_sig_mdu_op    (EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op),
    .from_ISU_bits_inst               (EXU_i_from_ISU_bits_r_inst),
    .to_IFU_ready                     (_IFU_i_from_EXU_ready),
    .lsu_to_mem_ar_ready              (_ram_i2_axi_ar_ready),
    .lsu_to_mem_r_valid               (_ram_i2_axi_r_valid),
    .lsu_to_mem_r_bits_data           (_ram_i2_axi_r_bits_data),
    .lsu_to_mem_aw_ready              (_ram_i2_axi_aw_ready),
    .lsu_to_mem_b_valid               (_ram_i2_axi_b_valid),
    .from_ISU_ready                   (_EXU_i_from_ISU_ready),
    .to_WBU_valid                     (_EXU_i_to_WBU_valid),
    .to_WBU_bits_alu_result           (_EXU_i_to_WBU_bits_alu_result),
    .to_WBU_bits_mdu_result           (_EXU_i_to_WBU_bits_mdu_result),
    .to_WBU_bits_lsu_rdata            (_EXU_i_to_WBU_bits_lsu_rdata),
    .to_WBU_bits_csr_rdata            (_EXU_i_to_WBU_bits_csr_rdata),
    .to_WBU_bits_pc                   (_EXU_i_to_WBU_bits_pc),
    .to_WBU_bits_reg_wen              (_EXU_i_to_WBU_bits_reg_wen),
    .to_WBU_bits_rd                   (_EXU_i_to_WBU_bits_rd),
    .to_WBU_bits_fu_op                (_EXU_i_to_WBU_bits_fu_op),
    .to_WBU_bits_inst                 (_EXU_i_to_WBU_bits_inst),
    .to_IFU_valid                     (_EXU_i_to_IFU_valid),
    .to_IFU_bits_target               (_EXU_i_to_IFU_bits_target),
    .to_IFU_bits_redirect             (_EXU_i_to_IFU_bits_redirect),
    .difftest_mcause                  (io_out_difftest_mcause),
    .difftest_mepc                    (io_out_difftest_mepc),
    .difftest_mstatus                 (io_out_difftest_mstatus),
    .difftest_mtvec                   (io_out_difftest_mtvec),
    .lsu_to_mem_ar_valid              (_EXU_i_lsu_to_mem_ar_valid),
    .lsu_to_mem_ar_bits_addr          (_EXU_i_lsu_to_mem_ar_bits_addr),
    .lsu_to_mem_r_ready               (_EXU_i_lsu_to_mem_r_ready),
    .lsu_to_mem_aw_valid              (_EXU_i_lsu_to_mem_aw_valid),
    .lsu_to_mem_aw_bits_addr          (_EXU_i_lsu_to_mem_aw_bits_addr),
    .lsu_to_mem_w_valid               (_EXU_i_lsu_to_mem_w_valid),
    .lsu_to_mem_w_bits_data           (_EXU_i_lsu_to_mem_w_bits_data),
    .lsu_to_mem_w_bits_strb           (_EXU_i_lsu_to_mem_w_bits_strb),
    .to_ISU_rd                        (_EXU_i_to_ISU_rd),
    .to_ISU_have_wb                   (_EXU_i_to_ISU_have_wb),
    .to_ISU_isBRU                     (_EXU_i_to_ISU_isBRU)
  );
  WBU WBU_i (
    .from_EXU_valid           (_EXU_i_to_WBU_valid),
    .from_EXU_bits_alu_result (_EXU_i_to_WBU_bits_alu_result),
    .from_EXU_bits_mdu_result (_EXU_i_to_WBU_bits_mdu_result),
    .from_EXU_bits_lsu_rdata  (_EXU_i_to_WBU_bits_lsu_rdata),
    .from_EXU_bits_csr_rdata  (_EXU_i_to_WBU_bits_csr_rdata),
    .from_EXU_bits_pc         (_EXU_i_to_WBU_bits_pc),
    .from_EXU_bits_reg_wen    (_EXU_i_to_WBU_bits_reg_wen),
    .from_EXU_bits_rd         (_EXU_i_to_WBU_bits_rd),
    .from_EXU_bits_fu_op      (_EXU_i_to_WBU_bits_fu_op),
    .to_ISU_bits_reg_wen      (_WBU_i_to_ISU_bits_reg_wen),
    .to_ISU_bits_wdata        (_WBU_i_to_ISU_bits_wdata),
    .to_ISU_bits_rd           (_WBU_i_to_ISU_bits_rd)
  );
  IFU_pipeline IFU_i (
    .clock                  (clock),
    .reset                  (reset),
    .to_IDU_ready           (_IDU_i_from_IFU_ready),
    .from_EXU_valid         (_EXU_i_to_IFU_valid),
    .from_EXU_bits_target   (_EXU_i_to_IFU_bits_target),
    .from_EXU_bits_redirect (_EXU_i_to_IFU_bits_redirect),
    .to_mem_req_ready       (_icache_io_in_req_ready),
    .to_mem_resp_valid      (_icache_io_in_resp_valid),
    .to_mem_resp_bits_rdata (_icache_io_in_resp_bits_rdata),
    .to_IDU_PC              (_icache_io_stage2Addr),
    .to_IDU_valid           (_IFU_i_to_IDU_valid),
    .to_IDU_bits_inst       (_IFU_i_to_IDU_bits_inst),
    .to_IDU_bits_pc         (_IFU_i_to_IDU_bits_pc),
    .from_EXU_ready         (_IFU_i_from_EXU_ready),
    .to_mem_req_valid       (_IFU_i_to_mem_req_valid),
    .to_mem_req_bits_addr   (_IFU_i_to_mem_req_bits_addr),
    .to_mem_resp_ready      (_IFU_i_to_mem_resp_ready),
    .fetch_PC               (_IFU_i_fetch_PC)
  );
  AXI4RAM ram_i (
    .clock             (clock),
    .reset             (reset),
    .axi_ar_valid      (_bridge_io_out_ar_valid),
    .axi_ar_bits_addr  (_bridge_io_out_ar_bits_addr),
    .axi_ar_bits_len   (8'h3),
    .axi_r_ready       (_bridge_io_out_r_ready),
    .axi_aw_valid      (1'h0),
    .axi_aw_bits_addr  (_bridge_io_out_aw_bits_addr),
    .axi_aw_bits_len   (8'h3),
    .axi_aw_bits_burst (2'h1),
    .axi_w_valid       (1'h0),
    .axi_w_bits_data   (32'h0),
    .axi_w_bits_strb   (4'hF),
    .axi_ar_ready      (_ram_i_axi_ar_ready),
    .axi_r_valid       (_ram_i_axi_r_valid),
    .axi_r_bits_data   (_ram_i_axi_r_bits_data),
    .axi_aw_ready      (/* unused */),
    .axi_b_valid       (/* unused */)
  );
  Cache icache (
    .clock                    (clock),
    .reset                    (reset),
    .io_in_req_valid          (_IFU_i_to_mem_req_valid),
    .io_in_req_bits_addr      (_IFU_i_to_mem_req_bits_addr),
    .io_in_resp_ready         (_IFU_i_to_mem_resp_ready),
    .io_mem_req_ready         (_bridge_io_in_req_ready),
    .io_mem_resp_valid        (_bridge_io_in_resp_valid),
    .io_mem_resp_bits_rdata   (_bridge_io_in_resp_bits_rdata),
    .io_flush                 (_EXU_i_to_IFU_bits_redirect),
    .io_in_req_ready          (_icache_io_in_req_ready),
    .io_in_resp_valid         (_icache_io_in_resp_valid),
    .io_in_resp_bits_rdata    (_icache_io_in_resp_bits_rdata),
    .io_mem_req_valid         (_icache_io_mem_req_valid),
    .io_mem_req_bits_addr     (_icache_io_mem_req_bits_addr),
    .io_mem_resp_ready        (_icache_io_mem_resp_ready),
    .io_stage2Addr            (_icache_io_stage2Addr),
    .s2_io_in_valid__bore     (_icache_s2_io_in_valid__bore),
    .s2_io_in_bits_addr__bore (_icache_s2_io_in_bits_addr__bore)
  );
  SimpleBus2AXI4Converter bridge (
    .io_in_req_valid       (_icache_io_mem_req_valid),
    .io_in_req_bits_addr   (_icache_io_mem_req_bits_addr),
    .io_in_resp_ready      (_icache_io_mem_resp_ready),
    .io_out_ar_ready       (_ram_i_axi_ar_ready),
    .io_out_r_valid        (_ram_i_axi_r_valid),
    .io_out_r_bits_data    (_ram_i_axi_r_bits_data),
    .io_in_req_ready       (_bridge_io_in_req_ready),
    .io_in_resp_valid      (_bridge_io_in_resp_valid),
    .io_in_resp_bits_rdata (_bridge_io_in_resp_bits_rdata),
    .io_out_ar_valid       (_bridge_io_out_ar_valid),
    .io_out_ar_bits_addr   (_bridge_io_out_ar_bits_addr),
    .io_out_r_ready        (_bridge_io_out_r_ready),
    .io_out_aw_bits_addr   (_bridge_io_out_aw_bits_addr)
  );
  AXI4RAM ram_i2 (
    .clock             (clock),
    .reset             (reset),
    .axi_ar_valid      (_EXU_i_lsu_to_mem_ar_valid),
    .axi_ar_bits_addr  (_EXU_i_lsu_to_mem_ar_bits_addr),
    .axi_ar_bits_len   (8'h0),
    .axi_r_ready       (_EXU_i_lsu_to_mem_r_ready),
    .axi_aw_valid      (_EXU_i_lsu_to_mem_aw_valid),
    .axi_aw_bits_addr  (_EXU_i_lsu_to_mem_aw_bits_addr),
    .axi_aw_bits_len   (8'h0),
    .axi_aw_bits_burst (2'h0),
    .axi_w_valid       (_EXU_i_lsu_to_mem_w_valid),
    .axi_w_bits_data   (_EXU_i_lsu_to_mem_w_bits_data),
    .axi_w_bits_strb   (_EXU_i_lsu_to_mem_w_bits_strb),
    .axi_ar_ready      (_ram_i2_axi_ar_ready),
    .axi_r_valid       (_ram_i2_axi_r_valid),
    .axi_r_bits_data   (_ram_i2_axi_r_bits_data),
    .axi_aw_ready      (_ram_i2_axi_aw_ready),
    .axi_b_valid       (_ram_i2_axi_b_valid)
  );
  assign io_out_ifu_fetchPc = _IFU_i_fetch_PC;
  assign io_out_nextExecPC =
    valid_1
      ? _EXU_i_to_WBU_bits_pc
      : _IDU_i_to_ISU_valid
          ? _ISU_i_to_EXU_bits_pc
          : _icache_s2_io_in_valid__bore
              ? _icache_s2_io_in_bits_addr__bore
              : _IFU_i_fetch_PC;
  assign io_out_ifu_inst = _IFU_i_to_IDU_bits_inst;
  assign io_out_ifu_pc = _IFU_i_to_IDU_bits_pc;
  assign io_out_idu_inst = _IDU_i_to_ISU_bits_inst;
  assign io_out_idu_pc = _IDU_i_to_ISU_bits_pc;
  assign io_out_exu_inst = _EXU_i_to_WBU_bits_inst;
  assign io_out_exu_pc = _EXU_i_to_WBU_bits_pc;
  assign io_out_wbu_inst = _EXU_i_to_WBU_bits_inst;
  assign io_out_wbu_pc = _EXU_i_to_WBU_bits_pc;
  assign io_out_wb = _EXU_i_to_WBU_valid;
endmodule




