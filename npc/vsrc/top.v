/* verilator lint_off DECLFILENAME */
/* verilator lint_off UNUSEDSIGNAL */
/* verilator lint_off UNDRIVEN */
/* verilator lint_off UNOPTFLAT */
/* verilator lint_off WIDTHEXPAND */
/* verilator lint_off PINCONNECTEMPTY */
// Generated by CIRCT firtool-1.52.0
// Standard header to adapt well known macros to our needs.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module IDU(
  input         from_IFU_valid,
  input  [31:0] from_IFU_bits_inst,
                from_IFU_bits_pc,
  input         to_ISU_ready,
  output        from_IFU_ready,
                to_ISU_valid,
  output [31:0] to_ISU_bits_imm,
                to_ISU_bits_pc,
  output [4:0]  to_ISU_bits_rs1,
                to_ISU_bits_rs2,
                to_ISU_bits_rd,
  output        to_ISU_bits_ctrl_sig_reg_wen,
  output [2:0]  to_ISU_bits_ctrl_sig_fu_op,
  output        to_ISU_bits_ctrl_sig_mem_wen,
                to_ISU_bits_ctrl_sig_is_ebreak,
                to_ISU_bits_ctrl_sig_not_impl,
  output [1:0]  to_ISU_bits_ctrl_sig_src1_op,
                to_ISU_bits_ctrl_sig_src2_op,
  output [3:0]  to_ISU_bits_ctrl_sig_alu_op,
                to_ISU_bits_ctrl_sig_lsu_op,
                to_ISU_bits_ctrl_sig_bru_op,
  output [2:0]  to_ISU_bits_ctrl_sig_csr_op,
  output [3:0]  to_ISU_bits_ctrl_sig_mdu_op,
  output [31:0] to_ISU_bits_inst
);

  wire [29:0]      decode_info_invInputs = ~(from_IFU_bits_inst[31:2]);
  wire [7:0]       _decode_info_T =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[11]};
  wire [7:0]       _decode_info_T_2 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[12]};
  wire [8:0]       _decode_info_T_6 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[12]};
  wire [7:0]       _decode_info_T_8 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10]};
  wire [8:0]       _decode_info_T_10 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11]};
  wire [14:0]      _decode_info_T_12 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[29]};
  wire [11:0]      _decode_info_T_14 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_16 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [5:0]       _decode_info_T_18 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     from_IFU_bits_inst[2],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4]};
  wire [7:0]       _decode_info_T_22 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [8:0]       _decode_info_T_24 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [9:0]       _decode_info_T_28 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [9:0]       _decode_info_T_30 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     from_IFU_bits_inst[2],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [6:0]       _decode_info_T_32 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     from_IFU_bits_inst[2],
     from_IFU_bits_inst[3],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6]};
  wire [30:0]      _decode_info_T_34 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     decode_info_invInputs[18],
     decode_info_invInputs[19],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [9:0]       _decode_info_T_36 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [14:0]      _decode_info_T_38 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_40 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [8:0]       _decode_info_T_44 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11]};
  wire [9:0]       _decode_info_T_46 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     decode_info_invInputs[12]};
  wire [7:0]       _decode_info_T_50 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[13]};
  wire [8:0]       _decode_info_T_52 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12]};
  wire [14:0]      _decode_info_T_54 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [9:0]       _decode_info_T_56 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12]};
  wire [9:0]       _decode_info_T_58 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12]};
  wire [8:0]       _decode_info_T_60 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13]};
  wire [14:0]      _decode_info_T_62 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [8:0]       _decode_info_T_64 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14]};
  wire [8:0]       _decode_info_T_66 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[14]};
  wire [12:0]      _decode_info_T_68 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[14],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_72 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[14],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [7:0]       _decode_info_T_74 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[14]};
  wire [8:0]       _decode_info_T_76 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[10],
     from_IFU_bits_inst[14]};
  wire [14:0]      _decode_info_T_80 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[29]};
  wire [9:0]       _decode_info_T_88 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     decode_info_invInputs[2],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     from_IFU_bits_inst[14]};
  wire [31:0]      _decode_info_T_90 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     from_IFU_bits_inst[20],
     decode_info_invInputs[19],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [14:0]      _decode_info_T_92 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [15:0]      _decode_info_T_94 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [16:0]      _decode_info_T_98 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     decode_info_invInputs[12],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [16:0]      _decode_info_T_104 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     from_IFU_bits_inst[13],
     from_IFU_bits_inst[14],
     from_IFU_bits_inst[25],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [30:0]      _decode_info_T_106 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[10],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     decode_info_invInputs[18],
     from_IFU_bits_inst[21],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     from_IFU_bits_inst[28],
     from_IFU_bits_inst[29],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [30:0]      _decode_info_T_108 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     from_IFU_bits_inst[6],
     decode_info_invInputs[5],
     decode_info_invInputs[6],
     decode_info_invInputs[7],
     decode_info_invInputs[8],
     decode_info_invInputs[9],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[13],
     decode_info_invInputs[14],
     decode_info_invInputs[15],
     decode_info_invInputs[16],
     decode_info_invInputs[17],
     decode_info_invInputs[18],
     from_IFU_bits_inst[21],
     decode_info_invInputs[20],
     decode_info_invInputs[21],
     decode_info_invInputs[22],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     from_IFU_bits_inst[28],
     from_IFU_bits_inst[29],
     decode_info_invInputs[28],
     decode_info_invInputs[29]};
  wire [16:0]      _decode_info_T_110 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     from_IFU_bits_inst[5],
     decode_info_invInputs[4],
     decode_info_invInputs[10],
     decode_info_invInputs[11],
     decode_info_invInputs[12],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     from_IFU_bits_inst[30],
     decode_info_invInputs[29]};
  wire [15:0]      _decode_info_T_112 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[3],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     from_IFU_bits_inst[30],
     decode_info_invInputs[29]};
  wire [15:0]      _decode_info_T_114 =
    {from_IFU_bits_inst[0],
     from_IFU_bits_inst[1],
     decode_info_invInputs[0],
     decode_info_invInputs[1],
     from_IFU_bits_inst[4],
     decode_info_invInputs[4],
     from_IFU_bits_inst[12],
     decode_info_invInputs[11],
     from_IFU_bits_inst[14],
     decode_info_invInputs[23],
     decode_info_invInputs[24],
     decode_info_invInputs[25],
     decode_info_invInputs[26],
     decode_info_invInputs[27],
     from_IFU_bits_inst[30],
     decode_info_invInputs[29]};
  wire [7:0][31:0] _GEN =
    {{32'h0},
     {32'h0},
     {{{12{from_IFU_bits_inst[31]}},
       from_IFU_bits_inst[19:12],
       from_IFU_bits_inst[20],
       from_IFU_bits_inst[30:21],
       1'h0}},
     {{from_IFU_bits_inst[31:12], 12'h0}},
     {{{20{from_IFU_bits_inst[31]}},
       from_IFU_bits_inst[7],
       from_IFU_bits_inst[30:25],
       from_IFU_bits_inst[11:8],
       1'h0}},
     {{{20{from_IFU_bits_inst[31]}},
       from_IFU_bits_inst[31:25],
       from_IFU_bits_inst[11:7]}},
     {{{20{from_IFU_bits_inst[31]}}, from_IFU_bits_inst[31:20]}},
     {32'h0}};
  assign from_IFU_ready = to_ISU_ready;
  assign to_ISU_valid = from_IFU_valid;
  assign to_ISU_bits_imm =
    _GEN[{{&_decode_info_T,
           &_decode_info_T_2,
           &_decode_info_T_8,
           &_decode_info_T_12,
           &_decode_info_T_14,
           &_decode_info_T_22,
           &_decode_info_T_30,
           &_decode_info_T_46,
           &_decode_info_T_50,
           &_decode_info_T_58,
           &_decode_info_T_68,
           &_decode_info_T_74,
           &_decode_info_T_80,
           &_decode_info_T_106} == 14'h0,
          {&_decode_info_T,
           &{from_IFU_bits_inst[0],
             from_IFU_bits_inst[1],
             decode_info_invInputs[0],
             decode_info_invInputs[1],
             decode_info_invInputs[3],
             decode_info_invInputs[4],
             decode_info_invInputs[10],
             decode_info_invInputs[12]},
           &_decode_info_T_8,
           &_decode_info_T_12,
           &_decode_info_T_14,
           &_decode_info_T_18,
           &_decode_info_T_30,
           &_decode_info_T_32,
           &_decode_info_T_46,
           &_decode_info_T_50,
           &_decode_info_T_58,
           &_decode_info_T_68,
           &_decode_info_T_80,
           &_decode_info_T_106} == 14'h0,
          |{&_decode_info_T_6,
            &_decode_info_T_10,
            &_decode_info_T_28,
            &_decode_info_T_30,
            &_decode_info_T_32,
            &_decode_info_T_36,
            &_decode_info_T_38,
            &_decode_info_T_44,
            &_decode_info_T_46,
            &_decode_info_T_52,
            &_decode_info_T_58,
            &_decode_info_T_60,
            &_decode_info_T_64,
            &_decode_info_T_66,
            &_decode_info_T_76,
            &_decode_info_T_88,
            &_decode_info_T_108,
            &_decode_info_T_112}}];
  assign to_ISU_bits_pc = from_IFU_bits_pc;
  assign to_ISU_bits_rs1 = from_IFU_bits_inst[19:15];
  assign to_ISU_bits_rs2 = from_IFU_bits_inst[24:20];
  assign to_ISU_bits_rd = from_IFU_bits_inst[11:7];
  assign to_ISU_bits_ctrl_sig_reg_wen =
    |{&_decode_info_T_6,
      &_decode_info_T_10,
      &_decode_info_T_16,
      &_decode_info_T_18,
      &_decode_info_T_30,
      &_decode_info_T_32,
      &_decode_info_T_36,
      &_decode_info_T_38,
      &_decode_info_T_40,
      &_decode_info_T_46,
      &_decode_info_T_52,
      &_decode_info_T_54,
      &_decode_info_T_58,
      &_decode_info_T_60,
      &_decode_info_T_62,
      &_decode_info_T_64,
      &_decode_info_T_66,
      &_decode_info_T_72,
      &_decode_info_T_92,
      &_decode_info_T_94,
      &_decode_info_T_98,
      &_decode_info_T_104,
      &_decode_info_T_110,
      &_decode_info_T_112,
      &_decode_info_T_114};
  assign to_ISU_bits_ctrl_sig_fu_op =
    {|{&_decode_info_T_6,
       &_decode_info_T_24,
       &_decode_info_T_34,
       &_decode_info_T_36,
       &_decode_info_T_46,
       &_decode_info_T_56,
       &_decode_info_T_58,
       &_decode_info_T_64,
       &_decode_info_T_90,
       &_decode_info_T_108},
     |{&_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_44,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_92,
       &_decode_info_T_94,
       &_decode_info_T_98,
       &_decode_info_T_104},
     |{&_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_18,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_34,
       &_decode_info_T_38,
       &_decode_info_T_40,
       &_decode_info_T_44,
       &_decode_info_T_46,
       &_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_58,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_66,
       &_decode_info_T_72,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_90,
       &_decode_info_T_108,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114}};
  assign to_ISU_bits_ctrl_sig_mem_wen = |{&_decode_info_T_24, &_decode_info_T_56};
  assign to_ISU_bits_ctrl_sig_is_ebreak = &_decode_info_T_90;
  assign to_ISU_bits_ctrl_sig_not_impl =
    {&_decode_info_T,
     &_decode_info_T_2,
     &_decode_info_T_8,
     &_decode_info_T_12,
     &_decode_info_T_14,
     &_decode_info_T_18,
     &_decode_info_T_22,
     &{from_IFU_bits_inst[0],
       from_IFU_bits_inst[1],
       decode_info_invInputs[0],
       decode_info_invInputs[1],
       from_IFU_bits_inst[5],
       decode_info_invInputs[5],
       decode_info_invInputs[6],
       decode_info_invInputs[7],
       decode_info_invInputs[8],
       decode_info_invInputs[9],
       decode_info_invInputs[11],
       decode_info_invInputs[12],
       decode_info_invInputs[13],
       decode_info_invInputs[14],
       decode_info_invInputs[15],
       decode_info_invInputs[16],
       decode_info_invInputs[17],
       decode_info_invInputs[19],
       decode_info_invInputs[20],
       decode_info_invInputs[21],
       decode_info_invInputs[22],
       decode_info_invInputs[23],
       decode_info_invInputs[24],
       decode_info_invInputs[25],
       decode_info_invInputs[26],
       decode_info_invInputs[27],
       decode_info_invInputs[28],
       decode_info_invInputs[29]},
     &_decode_info_T_30,
     &_decode_info_T_32,
     &_decode_info_T_46,
     &_decode_info_T_50,
     &_decode_info_T_58,
     &_decode_info_T_68,
     &_decode_info_T_74,
     &_decode_info_T_80,
     &_decode_info_T_106} == 17'h0;
  assign to_ISU_bits_ctrl_sig_src1_op =
    {|{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_24,
       &_decode_info_T_30,
       &_decode_info_T_36,
       &_decode_info_T_38,
       &_decode_info_T_40,
       &_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_64,
       &_decode_info_T_66,
       &_decode_info_T_72,
       &_decode_info_T_92,
       &_decode_info_T_94,
       &_decode_info_T_98,
       &_decode_info_T_104,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114},
     |{&{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         from_IFU_bits_inst[2],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         decode_info_invInputs[3],
         decode_info_invInputs[4]},
       &_decode_info_T_28,
       &_decode_info_T_32,
       &_decode_info_T_44,
       &_decode_info_T_76,
       &_decode_info_T_88}};
  assign to_ISU_bits_ctrl_sig_src2_op =
    {|{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_18,
       &_decode_info_T_24,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_36,
       &_decode_info_T_38,
       &_decode_info_T_40,
       &_decode_info_T_44,
       &_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_64,
       &_decode_info_T_66,
       &_decode_info_T_72,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_92,
       &_decode_info_T_94,
       &_decode_info_T_98,
       &_decode_info_T_104,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114},
     |{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_18,
       &_decode_info_T_24,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_36,
       &_decode_info_T_38,
       &_decode_info_T_44,
       &_decode_info_T_52,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_64,
       &_decode_info_T_66,
       &_decode_info_T_76,
       &_decode_info_T_88,
       &_decode_info_T_112}};
  assign to_ISU_bits_ctrl_sig_alu_op =
    {|{&_decode_info_T_38, &_decode_info_T_40, &_decode_info_T_112, &_decode_info_T_114},
     |{&_decode_info_T_52, &_decode_info_T_54, &_decode_info_T_66, &_decode_info_T_72},
     |{&_decode_info_T_52,
       &_decode_info_T_54,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_110,
       &_decode_info_T_112,
       &_decode_info_T_114},
     |{&_decode_info_T_6,
       &_decode_info_T_10,
       &_decode_info_T_16,
       &_decode_info_T_18,
       &_decode_info_T_24,
       &_decode_info_T_28,
       &_decode_info_T_30,
       &_decode_info_T_32,
       &_decode_info_T_36,
       &_decode_info_T_44,
       &_decode_info_T_56,
       &_decode_info_T_60,
       &_decode_info_T_62,
       &_decode_info_T_64,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         decode_info_invInputs[3],
         decode_info_invInputs[4],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]},
       &_decode_info_T_76,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         decode_info_invInputs[4],
         from_IFU_bits_inst[12],
         from_IFU_bits_inst[14],
         decode_info_invInputs[23],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]},
       &_decode_info_T_88}};
  assign to_ISU_bits_ctrl_sig_lsu_op =
    {&_decode_info_T_56,
     |{&_decode_info_T_24, &_decode_info_T_64},
     |{&_decode_info_T_24,
       &_decode_info_T_36,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         decode_info_invInputs[3],
         decode_info_invInputs[4],
         decode_info_invInputs[10],
         from_IFU_bits_inst[13],
         decode_info_invInputs[12]}},
     |{&_decode_info_T_6,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         from_IFU_bits_inst[12],
         decode_info_invInputs[11],
         decode_info_invInputs[12]},
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         decode_info_invInputs[3],
         decode_info_invInputs[4],
         from_IFU_bits_inst[12],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14]}}};
  assign to_ISU_bits_ctrl_sig_bru_op =
    {&_decode_info_T_88,
     |{&_decode_info_T_44, &_decode_info_T_76},
     |{&_decode_info_T_28,
       &_decode_info_T_30,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         from_IFU_bits_inst[5],
         from_IFU_bits_inst[6],
         from_IFU_bits_inst[12],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14]},
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         decode_info_invInputs[2],
         from_IFU_bits_inst[5],
         from_IFU_bits_inst[6],
         decode_info_invInputs[10],
         from_IFU_bits_inst[13],
         from_IFU_bits_inst[14]}},
     |{&_decode_info_T_28, &_decode_info_T_32, &_decode_info_T_76}};
  assign to_ISU_bits_ctrl_sig_csr_op =
    {&_decode_info_T_58,
     |{&_decode_info_T_46, &_decode_info_T_108},
     |{&_decode_info_T_34, &_decode_info_T_46}};
  assign to_ISU_bits_ctrl_sig_mdu_op =
    {&_decode_info_T_104,
     |{&_decode_info_T_98,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         decode_info_invInputs[10],
         from_IFU_bits_inst[14],
         from_IFU_bits_inst[25],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]},
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         decode_info_invInputs[11],
         from_IFU_bits_inst[14],
         from_IFU_bits_inst[25],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]}},
     |{&_decode_info_T_94,
       &{from_IFU_bits_inst[0],
         from_IFU_bits_inst[1],
         decode_info_invInputs[0],
         decode_info_invInputs[1],
         from_IFU_bits_inst[4],
         from_IFU_bits_inst[5],
         decode_info_invInputs[4],
         decode_info_invInputs[10],
         from_IFU_bits_inst[13],
         from_IFU_bits_inst[25],
         decode_info_invInputs[24],
         decode_info_invInputs[25],
         decode_info_invInputs[26],
         decode_info_invInputs[27],
         decode_info_invInputs[28],
         decode_info_invInputs[29]}},
     &_decode_info_T_92};
  assign to_ISU_bits_inst = from_IFU_bits_inst;
endmodule

// external module RegisterFileBB

module RegFile(
  input         clock,
                reset,
  input  [4:0]  io_in_rs1,
                io_in_rs2,
                io_in_rd,
  input  [31:0] io_in_wdata,
  input         io_in_reg_wen,
  output [31:0] io_out_rdata1,
                io_out_rdata2
);

  RegisterFileBB regfile (
    .clock   (clock),
    .reset   (reset),
    .rs1     (io_in_rs1),
    .rs2     (io_in_rs2),
    .rd      (io_in_rd),
    .wdata   (io_in_wdata),
    .reg_wen (io_in_reg_wen),
    .rdata1  (io_out_rdata1),
    .rdata2  (io_out_rdata2)
  );
endmodule

module ISU(
  input         clock,
                reset,
                from_IDU_valid,
  input  [31:0] from_IDU_bits_imm,
                from_IDU_bits_pc,
  input  [4:0]  from_IDU_bits_rs1,
                from_IDU_bits_rs2,
                from_IDU_bits_rd,
  input         from_IDU_bits_ctrl_sig_reg_wen,
  input  [2:0]  from_IDU_bits_ctrl_sig_fu_op,
  input         from_IDU_bits_ctrl_sig_mem_wen,
                from_IDU_bits_ctrl_sig_is_ebreak,
                from_IDU_bits_ctrl_sig_not_impl,
  input  [1:0]  from_IDU_bits_ctrl_sig_src1_op,
                from_IDU_bits_ctrl_sig_src2_op,
  input  [3:0]  from_IDU_bits_ctrl_sig_alu_op,
                from_IDU_bits_ctrl_sig_lsu_op,
                from_IDU_bits_ctrl_sig_bru_op,
  input  [2:0]  from_IDU_bits_ctrl_sig_csr_op,
  input  [3:0]  from_IDU_bits_ctrl_sig_mdu_op,
  input  [31:0] from_IDU_bits_inst,
  input         from_WBU_valid,
                from_WBU_bits_reg_wen,
  input  [31:0] from_WBU_bits_wdata,
  input  [4:0]  from_WBU_bits_rd,
                from_WBU_bits_hazard_rd,
  input         from_WBU_bits_hazard_have_wb,
                from_WBU_bits_hazard_isBR,
                to_EXU_ready,
  input  [4:0]  from_EXU_hazard_rd,
  input         from_EXU_hazard_have_wb,
                from_EXU_hazard_isBR,
  output        from_IDU_ready,
                to_EXU_valid,
  output [31:0] to_EXU_bits_imm,
                to_EXU_bits_pc,
                to_EXU_bits_rdata1,
                to_EXU_bits_rdata2,
  output [4:0]  to_EXU_bits_rd,
  output        to_EXU_bits_ctrl_sig_reg_wen,
  output [2:0]  to_EXU_bits_ctrl_sig_fu_op,
  output        to_EXU_bits_ctrl_sig_mem_wen,
                to_EXU_bits_ctrl_sig_is_ebreak,
                to_EXU_bits_ctrl_sig_not_impl,
  output [1:0]  to_EXU_bits_ctrl_sig_src1_op,
                to_EXU_bits_ctrl_sig_src2_op,
  output [3:0]  to_EXU_bits_ctrl_sig_alu_op,
                to_EXU_bits_ctrl_sig_lsu_op,
                to_EXU_bits_ctrl_sig_bru_op,
  output [2:0]  to_EXU_bits_ctrl_sig_csr_op,
  output [3:0]  to_EXU_bits_ctrl_sig_mdu_op,
  output [31:0] to_EXU_bits_inst
);

  wire has_hazard =
    (from_EXU_hazard_rd == from_IDU_bits_rs1 | from_EXU_hazard_rd == from_IDU_bits_rs2)
    & ~from_EXU_hazard_have_wb & from_IDU_valid & ~from_EXU_hazard_isBR
    | (from_WBU_bits_hazard_rd == from_IDU_bits_rs1
       | from_WBU_bits_hazard_rd == from_IDU_bits_rs2) & ~from_WBU_bits_hazard_have_wb
    & from_IDU_valid & ~from_WBU_bits_hazard_isBR;
  RegFile RegFile_i (
    .clock         (clock),
    .reset         (reset),
    .io_in_rs1     (from_IDU_bits_rs1),
    .io_in_rs2     (from_IDU_bits_rs2),
    .io_in_rd      (from_WBU_bits_rd),
    .io_in_wdata   (from_WBU_bits_wdata),
    .io_in_reg_wen (from_WBU_bits_reg_wen & from_WBU_valid),
    .io_out_rdata1 (to_EXU_bits_rdata1),
    .io_out_rdata2 (to_EXU_bits_rdata2)
  );
  assign from_IDU_ready = ~has_hazard & to_EXU_ready;
  assign to_EXU_valid = ~has_hazard & from_IDU_valid;
  assign to_EXU_bits_imm = from_IDU_bits_imm;
  assign to_EXU_bits_pc = from_IDU_bits_pc;
  assign to_EXU_bits_rd = from_IDU_bits_rd;
  assign to_EXU_bits_ctrl_sig_reg_wen = from_IDU_bits_ctrl_sig_reg_wen;
  assign to_EXU_bits_ctrl_sig_fu_op = from_IDU_bits_ctrl_sig_fu_op;
  assign to_EXU_bits_ctrl_sig_mem_wen = from_IDU_bits_ctrl_sig_mem_wen;
  assign to_EXU_bits_ctrl_sig_is_ebreak = from_IDU_bits_ctrl_sig_is_ebreak;
  assign to_EXU_bits_ctrl_sig_not_impl = from_IDU_bits_ctrl_sig_not_impl;
  assign to_EXU_bits_ctrl_sig_src1_op = from_IDU_bits_ctrl_sig_src1_op;
  assign to_EXU_bits_ctrl_sig_src2_op = from_IDU_bits_ctrl_sig_src2_op;
  assign to_EXU_bits_ctrl_sig_alu_op = from_IDU_bits_ctrl_sig_alu_op;
  assign to_EXU_bits_ctrl_sig_lsu_op = from_IDU_bits_ctrl_sig_lsu_op;
  assign to_EXU_bits_ctrl_sig_bru_op = from_IDU_bits_ctrl_sig_bru_op;
  assign to_EXU_bits_ctrl_sig_csr_op = from_IDU_bits_ctrl_sig_csr_op;
  assign to_EXU_bits_ctrl_sig_mdu_op = from_IDU_bits_ctrl_sig_mdu_op;
  assign to_EXU_bits_inst = from_IDU_bits_inst;
endmodule

module Alu(
  input  [31:0] io_in_src1,
                io_in_src2,
  input  [3:0]  io_in_op,
  output [31:0] io_out_result
);

  wire [62:0]       _io_out_result_T_11 = {31'h0, io_in_src1} << io_in_src2[4:0];
  wire [31:0]       _GEN = {27'h0, io_in_src2[4:0]};
  wire [15:0][31:0] _GEN_0 =
    {{32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {$signed($signed(io_in_src1) >>> _GEN)},
     {io_in_src1 >> _GEN},
     {_io_out_result_T_11[31:0]},
     {{31'h0, io_in_src1 < io_in_src2}},
     {{31'h0, $signed(io_in_src1) < $signed(io_in_src2)}},
     {io_in_src1 ^ io_in_src2},
     {io_in_src1 | io_in_src2},
     {io_in_src1 & io_in_src2},
     {io_in_src1 - io_in_src2},
     {io_in_src1 + io_in_src2},
     {32'h0}};
  assign io_out_result = _GEN_0[io_in_op];
endmodule

module Mdu(
  input  [31:0] io_in_src1,
                io_in_src2,
  input  [3:0]  io_in_op,
  output [31:0] io_out_result
);

  wire [63:0] _GEN = {32'h0, io_in_src2};
  wire [63:0] _io_out_result_T_13 = {32'h0, io_in_src1} * _GEN;
  wire [63:0] _GEN_0 = {{32{io_in_src1[31]}}, io_in_src1};
  wire [63:0] _io_out_result_T_3 = _GEN_0 * {{32{io_in_src2[31]}}, io_in_src2};
  wire [63:0] _io_out_result_T_8 = _GEN_0 * _GEN;
  wire [32:0] _io_out_result_T_17 =
    $signed({io_in_src1[31], io_in_src1}) / $signed({io_in_src2[31], io_in_src2});
  assign io_out_result =
    io_in_op == 4'h8
      ? io_in_src1 % io_in_src2
      : io_in_op == 4'h7
          ? $signed(io_in_src1) % $signed(io_in_src2)
          : io_in_op == 4'h6
              ? io_in_src1 / io_in_src2
              : io_in_op == 4'h5
                  ? _io_out_result_T_17[31:0]
                  : io_in_op == 4'h4
                      ? _io_out_result_T_13[63:32]
                      : io_in_op == 4'h3
                          ? _io_out_result_T_8[63:32]
                          : io_in_op == 4'h2
                              ? _io_out_result_T_3[63:32]
                              : io_in_op == 4'h1 ? _io_out_result_T_13[31:0] : 32'h0;
endmodule

module Bru(
  input  [31:0] io_in_src1,
                io_in_src2,
  input  [3:0]  io_in_op,
  output        io_out_ctrl_br
);

  assign io_out_ctrl_br =
    io_in_op == 4'h8
      ? io_in_src1 >= io_in_src2
      : io_in_op == 4'h7
          ? io_in_src1 < io_in_src2
          : io_in_op == 4'h6
              ? $signed(io_in_src1) >= $signed(io_in_src2)
              : io_in_op == 4'h5
                  ? $signed(io_in_src1) < $signed(io_in_src2)
                  : io_in_op == 4'h4
                      ? io_in_src1 != io_in_src2
                      : io_in_op == 4'h3
                          ? io_in_src1 == io_in_src2
                          : io_in_op == 4'h2 | io_in_op == 4'h1;
endmodule

module Lsu_simpleBus(
  input         clock,
                reset,
                io_in_valid,
                io_in_mem_wen,
  input  [31:0] io_in_addr,
                io_in_wdata,
  input  [3:0]  io_in_op,
  input         to_mem_req_ready,
                to_mem_resp_valid,
  input  [31:0] to_mem_resp_bits_rdata,
  input         to_mem_resp_bits_wresp,
  output [31:0] io_out_rdata,
  output        io_out_end,
                to_mem_req_valid,
  output [31:0] to_mem_req_bits_addr,
                to_mem_req_bits_wdata,
                to_mem_req_bits_wmask,
  output [3:0]  to_mem_req_bits_cmd,
  output        to_mem_resp_ready
);

  reg  [2:0]       state_lsu;
  wire             _sh_wmask_T_2 = io_in_addr[1:0] == 2'h2;
  wire [3:0][31:0] _GEN =
    {{{{24{to_mem_resp_bits_rdata[31]}}, to_mem_resp_bits_rdata[31:24]}},
     {{{24{to_mem_resp_bits_rdata[23]}}, to_mem_resp_bits_rdata[23:16]}},
     {{{24{to_mem_resp_bits_rdata[15]}}, to_mem_resp_bits_rdata[15:8]}},
     {{{24{to_mem_resp_bits_rdata[7]}}, to_mem_resp_bits_rdata[7:0]}}};
  wire [3:0][7:0]  _GEN_0 =
    {{to_mem_resp_bits_rdata[31:24]},
     {to_mem_resp_bits_rdata[23:16]},
     {to_mem_resp_bits_rdata[15:8]},
     {to_mem_resp_bits_rdata[7:0]}};
  wire             _sh_wmask_T = io_in_addr[1:0] == 2'h0;
  wire             _to_mem_req_bits_cmd_T_6 = state_lsu == 3'h4;
  wire             _to_mem_resp_ready_output =
    _to_mem_req_bits_cmd_T_6 | state_lsu == 3'h2;
  wire             _to_mem_req_bits_cmd_T_5 = state_lsu == 3'h3;
  wire             _to_mem_req_valid_output =
    _to_mem_req_bits_cmd_T_5 | state_lsu == 3'h1;
  wire [7:0][2:0]  _GEN_1 =
    {{state_lsu},
     {state_lsu},
     {3'h0},
     {{2'h2, _to_mem_resp_ready_output & to_mem_resp_valid & to_mem_resp_bits_wresp}},
     {to_mem_req_ready & _to_mem_req_valid_output ? 3'h4 : 3'h3},
     {_to_mem_resp_ready_output & to_mem_resp_valid ? 3'h5 : 3'h2},
     {to_mem_req_ready & _to_mem_req_valid_output ? 3'h2 : 3'h1},
     {io_in_valid ? {1'h0, io_in_mem_wen, 1'h1} : 3'h0}};
  always @(posedge clock) begin
    if (reset)
      state_lsu <= 3'h0;
    else
      state_lsu <= _GEN_1[state_lsu];
  end // always @(posedge)
  assign io_out_rdata =
    io_in_op == 4'h3
      ? to_mem_resp_bits_rdata
      : io_in_op == 4'h5
          ? (_sh_wmask_T_2
               ? {16'h0, to_mem_resp_bits_rdata[31:16]}
               : _sh_wmask_T ? {16'h0, to_mem_resp_bits_rdata[15:0]} : 32'h0)
          : io_in_op == 4'h2
              ? (_sh_wmask_T_2
                   ? {{16{to_mem_resp_bits_rdata[31]}}, to_mem_resp_bits_rdata[31:16]}
                   : _sh_wmask_T
                       ? {{16{to_mem_resp_bits_rdata[15]}}, to_mem_resp_bits_rdata[15:0]}
                       : 32'h0)
              : io_in_op == 4'h4
                  ? {24'h0, _GEN_0[io_in_addr[1:0]]}
                  : io_in_op == 4'h1 ? _GEN[io_in_addr[1:0]] : 32'h0;
  assign io_out_end = state_lsu == 3'h5;
  assign to_mem_req_valid = _to_mem_req_valid_output;
  assign to_mem_req_bits_addr = io_in_addr;
  assign to_mem_req_bits_wdata = io_in_wdata;
  assign to_mem_req_bits_wmask =
    io_in_op == 4'h8
      ? 32'hFFFFFFFF
      : io_in_op == 4'h7
          ? (_sh_wmask_T_2 ? 32'hFFFF0000 : {16'h0, {16{_sh_wmask_T}}})
          : io_in_op == 4'h6
              ? ((&(io_in_addr[1:0]))
                   ? 32'hFF000000
                   : {8'h0,
                      _sh_wmask_T_2
                        ? 24'hFF0000
                        : {8'h0, io_in_addr[1:0] == 2'h1 ? 16'hFF00 : 16'hFF}})
              : 32'h0;
  assign to_mem_req_bits_cmd =
    {3'h0, _to_mem_req_bits_cmd_T_6 | _to_mem_req_bits_cmd_T_5};
  assign to_mem_resp_ready = _to_mem_resp_ready_output;
endmodule

module Csr(
  input         clock,
                reset,
  input  [2:0]  io_in_op,
  input  [31:0] io_in_cur_pc,
                io_in_csr_id,
                io_in_wdata,
  output        io_out_csr_br,
  output [31:0] io_out_csr_addr,
                io_out_r_csr,
                io_out_difftest_mcause,
                io_out_difftest_mepc,
                io_out_difftest_mstatus,
                io_out_difftest_mtvec
);

  reg  [31:0] reg_mepc;
  reg  [31:0] reg_mcause;
  reg  [31:0] reg_mstatus;
  reg  [31:0] reg_mtvec;
  wire        _io_out_r_csr_T_4 = io_in_csr_id == 32'h342;
  wire        _io_out_csr_addr_T = io_in_op == 3'h1;
  wire        _io_out_r_csr_T_2 = io_in_csr_id == 32'h341;
  wire        _io_out_r_csr_T_6 = io_in_csr_id == 32'h300;
  wire        _io_out_csr_addr_T_2 = io_in_op == 3'h2;
  wire        _io_out_r_csr_T = io_in_csr_id == 32'h305;
  wire        _reg_mtvec_T = io_in_op == 3'h3;
  always @(posedge clock) begin
    if (reset) begin
      reg_mepc <= 32'h0;
      reg_mcause <= 32'h0;
      reg_mstatus <= 32'h0;
      reg_mtvec <= 32'h0;
    end
    else if (io_in_op == 3'h4) begin
      reg_mepc <= {32{_io_out_r_csr_T_2}} & io_in_wdata | reg_mepc;
      reg_mcause <= {32{_io_out_r_csr_T_4}} & io_in_wdata | reg_mcause;
      reg_mstatus <= {32{_io_out_r_csr_T_6}} & io_in_wdata | reg_mstatus;
      reg_mtvec <= {32{_io_out_r_csr_T}} & io_in_wdata | reg_mtvec;
    end
    else begin
      if (_reg_mtvec_T) begin
        if (_io_out_r_csr_T_2)
          reg_mepc <= io_in_wdata;
        if (_io_out_r_csr_T_4)
          reg_mcause <= io_in_wdata;
        if (_io_out_r_csr_T_6)
          reg_mstatus <= io_in_wdata;
      end
      else begin
        if (_io_out_csr_addr_T) begin
          reg_mepc <= io_in_cur_pc;
          reg_mcause <= 32'hB;
        end
        if (_io_out_csr_addr_T_2)
          reg_mstatus <=
            {1'h0,
             reg_mstatus[31:13],
             1'h0,
             reg_mstatus[10:8],
             1'h1,
             reg_mstatus[6:4],
             reg_mstatus[7],
             reg_mstatus[2:0]};
        else if (_io_out_csr_addr_T)
          reg_mstatus <=
            {reg_mstatus[31:13],
             2'h3,
             reg_mstatus[10:8],
             reg_mstatus[3],
             reg_mstatus[6:4],
             1'h0,
             reg_mstatus[2:0]};
      end
      if (_reg_mtvec_T & _io_out_r_csr_T)
        reg_mtvec <= io_in_wdata;
    end
  end // always @(posedge)
  assign io_out_csr_br = _io_out_csr_addr_T_2 | _io_out_csr_addr_T;
  assign io_out_csr_addr =
    _io_out_csr_addr_T_2 ? reg_mepc : _io_out_csr_addr_T ? reg_mtvec : 32'h0;
  assign io_out_r_csr =
    _io_out_r_csr_T_6
      ? reg_mstatus
      : _io_out_r_csr_T_4
          ? reg_mcause
          : _io_out_r_csr_T_2 ? reg_mepc : _io_out_r_csr_T ? reg_mtvec : 32'h0;
  assign io_out_difftest_mcause = reg_mcause;
  assign io_out_difftest_mepc = reg_mepc;
  assign io_out_difftest_mstatus = reg_mstatus;
  assign io_out_difftest_mtvec = reg_mtvec;
endmodule

// external module EbreakBB

module ebreak_moudle(
  input is_ebreak
);

  EbreakBB EbreakBB_i1 (
    .is_ebreak (is_ebreak)
  );
endmodule

// external module NotImplBB

module not_impl_moudle(
  input not_impl
);

  NotImplBB NotImplBB_i1 (
    .not_impl (not_impl)
  );
endmodule

module EXU_pipeline(
  input         clock,
                reset,
                from_ISU_valid,
  input  [31:0] from_ISU_bits_imm,
                from_ISU_bits_pc,
                from_ISU_bits_rdata1,
                from_ISU_bits_rdata2,
  input  [4:0]  from_ISU_bits_rd,
  input         from_ISU_bits_ctrl_sig_reg_wen,
  input  [2:0]  from_ISU_bits_ctrl_sig_fu_op,
  input         from_ISU_bits_ctrl_sig_mem_wen,
                from_ISU_bits_ctrl_sig_is_ebreak,
                from_ISU_bits_ctrl_sig_not_impl,
  input  [1:0]  from_ISU_bits_ctrl_sig_src1_op,
                from_ISU_bits_ctrl_sig_src2_op,
  input  [3:0]  from_ISU_bits_ctrl_sig_alu_op,
                from_ISU_bits_ctrl_sig_lsu_op,
                from_ISU_bits_ctrl_sig_bru_op,
  input  [2:0]  from_ISU_bits_ctrl_sig_csr_op,
  input  [3:0]  from_ISU_bits_ctrl_sig_mdu_op,
  input  [31:0] from_ISU_bits_inst,
  input         to_WBU_ready,
                lsu_to_mem_req_ready,
                lsu_to_mem_resp_valid,
  input  [31:0] lsu_to_mem_resp_bits_rdata,
  input         lsu_to_mem_resp_bits_wresp,
  output        from_ISU_ready,
                to_WBU_valid,
  output [31:0] to_WBU_bits_alu_result,
                to_WBU_bits_mdu_result,
                to_WBU_bits_lsu_rdata,
                to_WBU_bits_csr_rdata,
                to_WBU_bits_pc,
  output        to_WBU_bits_reg_wen,
  output [4:0]  to_WBU_bits_rd,
  output [2:0]  to_WBU_bits_fu_op,
  output        to_WBU_bits_redirect_valid,
  output [31:0] to_WBU_bits_redirect_target,
                to_WBU_bits_inst,
                difftest_mcause,
                difftest_mepc,
                difftest_mstatus,
                difftest_mtvec,
  output        lsu_to_mem_req_valid,
  output [31:0] lsu_to_mem_req_bits_addr,
                lsu_to_mem_req_bits_wdata,
                lsu_to_mem_req_bits_wmask,
  output [3:0]  lsu_to_mem_req_bits_cmd,
  output        lsu_to_mem_resp_ready,
  output [4:0]  to_ISU_hazard_rd,
  output        to_ISU_hazard_have_wb,
                to_ISU_hazard_isBR
);

  wire        _Csr_i_io_out_csr_br;
  wire [31:0] _Csr_i_io_out_csr_addr;
  wire        _Lsu_i_io_out_end;
  wire        _Bru_i_io_out_ctrl_br;
  wire [31:0] _Alu_i_io_out_result;
  wire        _GEN = from_ISU_bits_ctrl_sig_fu_op != 3'h4;
  Alu Alu_i (
    .io_in_src1
      (from_ISU_bits_ctrl_sig_src1_op == 2'h1
         ? from_ISU_bits_pc
         : from_ISU_bits_ctrl_sig_src1_op == 2'h2 ? from_ISU_bits_rdata1 : 32'h0),
    .io_in_src2
      ((&from_ISU_bits_ctrl_sig_src2_op)
         ? from_ISU_bits_imm
         : from_ISU_bits_ctrl_sig_src2_op == 2'h2 ? from_ISU_bits_rdata2 : 32'h0),
    .io_in_op      (from_ISU_bits_ctrl_sig_alu_op),
    .io_out_result (_Alu_i_io_out_result)
  );
  Mdu Mdu_i (
    .io_in_src1    (from_ISU_bits_rdata1),
    .io_in_src2    (from_ISU_bits_rdata2),
    .io_in_op      (from_ISU_bits_ctrl_sig_mdu_op),
    .io_out_result (to_WBU_bits_mdu_result)
  );
  Bru Bru_i (
    .io_in_src1     (from_ISU_bits_rdata1),
    .io_in_src2     (from_ISU_bits_rdata2),
    .io_in_op       (from_ISU_bits_ctrl_sig_bru_op),
    .io_out_ctrl_br (_Bru_i_io_out_ctrl_br)
  );
  Lsu_simpleBus Lsu_i (
    .clock                  (clock),
    .reset                  (reset),
    .io_in_valid            (from_ISU_bits_ctrl_sig_fu_op == 3'h4 & from_ISU_valid),
    .io_in_mem_wen          (from_ISU_bits_ctrl_sig_mem_wen),
    .io_in_addr             (_Alu_i_io_out_result),
    .io_in_wdata            (from_ISU_bits_rdata2),
    .io_in_op               (from_ISU_bits_ctrl_sig_lsu_op),
    .to_mem_req_ready       (lsu_to_mem_req_ready),
    .to_mem_resp_valid      (lsu_to_mem_resp_valid),
    .to_mem_resp_bits_rdata (lsu_to_mem_resp_bits_rdata),
    .to_mem_resp_bits_wresp (lsu_to_mem_resp_bits_wresp),
    .io_out_rdata           (to_WBU_bits_lsu_rdata),
    .io_out_end             (_Lsu_i_io_out_end),
    .to_mem_req_valid       (lsu_to_mem_req_valid),
    .to_mem_req_bits_addr   (lsu_to_mem_req_bits_addr),
    .to_mem_req_bits_wdata  (lsu_to_mem_req_bits_wdata),
    .to_mem_req_bits_wmask  (lsu_to_mem_req_bits_wmask),
    .to_mem_req_bits_cmd    (lsu_to_mem_req_bits_cmd),
    .to_mem_resp_ready      (lsu_to_mem_resp_ready)
  );
  Csr Csr_i (
    .clock                   (clock),
    .reset                   (reset),
    .io_in_op                (from_ISU_bits_ctrl_sig_csr_op),
    .io_in_cur_pc            (from_ISU_bits_pc),
    .io_in_csr_id            (from_ISU_bits_imm),
    .io_in_wdata             (from_ISU_bits_rdata1),
    .io_out_csr_br           (_Csr_i_io_out_csr_br),
    .io_out_csr_addr         (_Csr_i_io_out_csr_addr),
    .io_out_r_csr            (to_WBU_bits_csr_rdata),
    .io_out_difftest_mcause  (difftest_mcause),
    .io_out_difftest_mepc    (difftest_mepc),
    .io_out_difftest_mstatus (difftest_mstatus),
    .io_out_difftest_mtvec   (difftest_mtvec)
  );
  ebreak_moudle ebreak_moudle_i (
    .is_ebreak (from_ISU_bits_ctrl_sig_is_ebreak & from_ISU_valid)
  );
  not_impl_moudle not_impl_moudle_i (
    .not_impl (from_ISU_bits_ctrl_sig_not_impl & from_ISU_valid)
  );
  assign from_ISU_ready = to_WBU_ready & (_GEN | ~from_ISU_valid | _Lsu_i_io_out_end);
  assign to_WBU_valid = from_ISU_valid & (_GEN | _Lsu_i_io_out_end);
  assign to_WBU_bits_alu_result = _Alu_i_io_out_result;
  assign to_WBU_bits_pc = from_ISU_bits_pc;
  assign to_WBU_bits_reg_wen = from_ISU_bits_ctrl_sig_reg_wen;
  assign to_WBU_bits_rd = from_ISU_bits_rd;
  assign to_WBU_bits_fu_op = from_ISU_bits_ctrl_sig_fu_op;
  assign to_WBU_bits_redirect_valid =
    (_Bru_i_io_out_ctrl_br | _Csr_i_io_out_csr_br) & from_ISU_valid;
  assign to_WBU_bits_redirect_target =
    from_ISU_bits_ctrl_sig_fu_op == 3'h5
      ? _Csr_i_io_out_csr_addr
      : from_ISU_bits_ctrl_sig_fu_op == 3'h3 ? _Alu_i_io_out_result : 32'h0;
  assign to_WBU_bits_inst = from_ISU_bits_inst;
  assign to_ISU_hazard_rd = from_ISU_bits_rd;
  assign to_ISU_hazard_have_wb = ~from_ISU_valid;
  assign to_ISU_hazard_isBR =
    from_ISU_bits_ctrl_sig_fu_op == 3'h3 | from_ISU_bits_ctrl_sig_fu_op == 3'h5;
endmodule

module WBU(
  input         clock,
                reset,
                from_EXU_valid,
  input  [31:0] from_EXU_bits_alu_result,
                from_EXU_bits_mdu_result,
                from_EXU_bits_lsu_rdata,
                from_EXU_bits_csr_rdata,
                from_EXU_bits_pc,
  input         from_EXU_bits_reg_wen,
  input  [4:0]  from_EXU_bits_rd,
  input  [2:0]  from_EXU_bits_fu_op,
  input         from_EXU_bits_redirect_valid,
  input  [31:0] from_EXU_bits_redirect_target,
                from_EXU_bits_inst,
  input         to_IFU_ready,
  output        from_EXU_ready,
                to_ISU_valid,
                to_ISU_bits_reg_wen,
  output [31:0] to_ISU_bits_wdata,
  output [4:0]  to_ISU_bits_rd,
                to_ISU_bits_hazard_rd,
  output        to_ISU_bits_hazard_have_wb,
                to_ISU_bits_hazard_isBR,
                to_IFU_valid,
                to_IFU_bits_redirect_valid,
  output [31:0] to_IFU_bits_redirect_target,
  output        wb
);

  wire             _to_IFU_valid_output;
  wire             _to_ISU_bits_wdata_T_6 = from_EXU_bits_fu_op == 3'h3;
  wire             _to_ISU_bits_wdata_T_8 = from_EXU_bits_fu_op == 3'h5;
  wire             _GEN = _to_ISU_bits_wdata_T_8 | _to_ISU_bits_wdata_T_6;
  wire             _from_EXU_ready_output = ~_GEN | to_IFU_ready;
  assign _to_IFU_valid_output =
    from_EXU_valid & (_to_ISU_bits_wdata_T_8 | _to_ISU_bits_wdata_T_6);
  wire [7:0][31:0] _GEN_0 =
    {{32'h0},
     {32'h0},
     {from_EXU_bits_csr_rdata},
     {from_EXU_bits_lsu_rdata},
     {from_EXU_bits_pc + 32'h4},
     {from_EXU_bits_mdu_result},
     {from_EXU_bits_alu_result},
     {32'h0}};
  reg  [63:0]      c;
  always @(posedge clock) begin
    if (reset)
      c <= 64'h0;
    else
      c <= c + 64'h1;
  end // always @(posedge)
  assign from_EXU_ready = _from_EXU_ready_output;
  assign to_ISU_valid = from_EXU_valid;
  assign to_ISU_bits_reg_wen =
    _from_EXU_ready_output & from_EXU_valid & from_EXU_bits_reg_wen;
  assign to_ISU_bits_wdata = _GEN_0[from_EXU_bits_fu_op];
  assign to_ISU_bits_rd = from_EXU_bits_rd;
  assign to_ISU_bits_hazard_rd = from_EXU_bits_rd;
  assign to_ISU_bits_hazard_have_wb = ~from_EXU_valid;
  assign to_ISU_bits_hazard_isBR =
    from_EXU_bits_fu_op == 3'h3 | from_EXU_bits_fu_op == 3'h5;
  assign to_IFU_valid = _to_IFU_valid_output;
  assign to_IFU_bits_redirect_valid = from_EXU_bits_redirect_valid & from_EXU_valid;
  assign to_IFU_bits_redirect_target = from_EXU_bits_redirect_target;
  assign wb = _GEN ? to_IFU_ready & _to_IFU_valid_output : from_EXU_valid;
endmodule

module IFU_pipeline(
  input         clock,
                reset,
                to_IDU_ready,
                from_WBU_valid,
                from_WBU_bits_redirect_valid,
  input  [31:0] from_WBU_bits_redirect_target,
  input         to_mem_req_ready,
                to_mem_resp_valid,
  input  [31:0] to_mem_resp_bits_rdata,
                to_IDU_PC,
  output        to_IDU_valid,
  output [31:0] to_IDU_bits_inst,
                to_IDU_bits_pc,
  output        from_WBU_ready,
                to_mem_req_valid,
  output [31:0] to_mem_req_bits_addr,
  output        to_mem_resp_ready,
  output [31:0] fetch_PC
);

  reg [31:0] reg_PC;
  always @(posedge clock) begin
    if (reset)
      reg_PC <= 32'h80000000;
    else if (to_mem_req_ready & to_IDU_ready) begin
      if (to_mem_req_ready & from_WBU_valid & from_WBU_bits_redirect_valid)
        reg_PC <= from_WBU_bits_redirect_target;
      else
        reg_PC <= reg_PC + 32'h4;
    end
  end // always @(posedge)
  assign to_IDU_valid = to_mem_resp_valid;
  assign to_IDU_bits_inst = to_mem_resp_bits_rdata;
  assign to_IDU_bits_pc = to_IDU_PC;
  assign from_WBU_ready = to_mem_req_ready;
  assign to_mem_req_valid = to_IDU_ready;
  assign to_mem_req_bits_addr = reg_PC;
  assign to_mem_resp_ready = to_IDU_ready;
  assign fetch_PC = reg_PC;
endmodule

// external module RamBB

module AXI4RAM(
  input         clock,
                reset,
                axi_ar_valid,
  input  [31:0] axi_ar_bits_addr,
  input  [7:0]  axi_ar_bits_len,
  input         axi_r_ready,
                axi_aw_valid,
  input  [31:0] axi_aw_bits_addr,
  input  [7:0]  axi_aw_bits_len,
  input         axi_w_valid,
  input  [31:0] axi_w_bits_data,
  output        axi_ar_ready,
                axi_r_valid,
  output [31:0] axi_r_bits_data,
  output        axi_r_bits_last,
                axi_aw_ready,
                axi_w_ready
);

  reg              delay;
  reg  [7:0]       reg_AxLen;
  reg  [31:0]      reg_addr;
  reg  [1:0]       reg_burst;
  reg  [2:0]       state_sram;
  wire             _axi_aw_ready_output = state_sram == 3'h0;
  wire             _axi_w_ready_T_2 = state_sram == 3'h6;
  wire             _axi_r_valid_T_1 = state_sram == 3'h2;
  wire             _axi_r_valid_T_2 = state_sram == 3'h3;
  wire             _axi_r_valid_output = _axi_r_valid_T_2 | _axi_r_valid_T_1;
  wire             _axi_w_ready_output =
    (&state_sram) | _axi_w_ready_T_2 | state_sram == 3'h5;
  wire             _GEN = _axi_aw_ready_output & axi_ar_valid;
  wire             _GEN_0 = _axi_aw_ready_output & axi_aw_valid;
  wire             _reg_addr_T = axi_r_ready & _axi_r_valid_output;
  wire             _GEN_1 = state_sram == 3'h3;
  wire             _GEN_2 = state_sram == 3'h4;
  wire             _GEN_3 = state_sram == 3'h6;
  wire             _reg_addr_T_6 = _axi_w_ready_output & axi_w_valid;
  wire             _GEN_4 = _GEN_1 | _GEN_2 | state_sram == 3'h5;
  wire [7:0]       _GEN_5 =
    _GEN_4 | ~(_GEN_3 & _reg_addr_T_6) ? reg_AxLen : reg_AxLen - 8'h1;
  wire [31:0]      _GEN_6 =
    _GEN_4 | ~(_GEN_3 & reg_burst == 2'h1 & _reg_addr_T_6) ? reg_addr : reg_addr + 32'h4;
  wire [7:0][7:0]  _GEN_7 =
    {{_GEN_5},
     {_GEN_5},
     {reg_AxLen},
     {reg_AxLen},
     {reg_AxLen},
     {_reg_addr_T ? reg_AxLen - 8'h1 : reg_AxLen},
     {reg_AxLen},
     {_GEN ? axi_ar_bits_len : _GEN_0 ? axi_aw_bits_len : reg_AxLen}};
  wire [7:0][31:0] _GEN_8 =
    {{_GEN_6},
     {_GEN_6},
     {reg_addr},
     {reg_addr},
     {reg_addr},
     {reg_burst == 2'h1 & _reg_addr_T ? reg_addr + 32'h4 : reg_addr},
     {reg_addr},
     {_GEN ? axi_ar_bits_addr : _GEN_0 ? axi_aw_bits_addr : reg_addr}};
  wire [7:0][2:0]  _GEN_9 =
    {{3'h0},
     {{2'h3, reg_AxLen == 8'h1}},
     {{2'h3, ~(|reg_AxLen)}},
     {{2'h2, ~delay}},
     {3'h0},
     {{2'h1, reg_AxLen == 8'h1}},
     {delay ? 3'h1 : {2'h1, ~(|reg_AxLen)}},
     {_GEN ? 3'h1 : {_GEN_0, 2'h0}}};
  always @(posedge clock) begin
    if (reset) begin
      delay <= 1'h0;
      reg_AxLen <= 8'h0;
      reg_addr <= 32'h0;
      reg_burst <= 2'h3;
      state_sram <= 3'h0;
    end
    else begin
      delay <=
        ~_axi_aw_ready_output
        & (state_sram == 3'h1
             ? delay - 1'h1
             : state_sram == 3'h2 | _GEN_1 | ~_GEN_2 ? delay : delay - 1'h1);
      reg_AxLen <= _GEN_7[state_sram];
      reg_addr <= _GEN_8[state_sram];
      if (_axi_aw_ready_output & (_GEN | _GEN_0))
        reg_burst <= 2'h1;
      state_sram <= _GEN_9[state_sram];
    end
  end // always @(posedge)
  RamBB RamBB_i1 (
    .clock   (clock),
    .addr    (reg_addr),
    .mem_wen ((&state_sram) | _axi_w_ready_T_2),
    .valid   ((&state_sram) | _axi_w_ready_T_2 | _axi_r_valid_T_2 | _axi_r_valid_T_1),
    .wdata   (axi_w_bits_data),
    .wmask   (4'hF),
    .rdata   (axi_r_bits_data)
  );
  assign axi_ar_ready = _axi_aw_ready_output;
  assign axi_r_valid = _axi_r_valid_output;
  assign axi_r_bits_last = state_sram == 3'h3;
  assign axi_aw_ready = _axi_aw_ready_output;
  assign axi_w_ready = _axi_w_ready_output;
endmodule

// VCS coverage exclude_file
module array_2048x32(
  input  [10:0] R0_addr,
  input         R0_en,
                R0_clk,
  input  [10:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data
);

  reg [31:0] Memory[0:2047];
  reg        _R0_en_d0;
  reg [10:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;
endmodule

module SRAMTemplate(
  input         clock,
                reset,
                io_r_req_valid,
  input  [10:0] io_r_req_bits_raddr,
  input         io_w_req_valid,
  input  [10:0] io_w_req_bits_waddr,
  input  [31:0] io_w_req_bits_wdata,
  output [31:0] io_r_resp_rdata
);

  wire [31:0] _array_ext_R0_data;
  reg         io_r_resp_rdata_REG;
  reg  [31:0] io_r_resp_rdata_r;
  always @(posedge clock) begin
    io_r_resp_rdata_REG <= io_r_req_valid;
    if (reset)
      io_r_resp_rdata_r <= 32'h0;
    else if (io_r_resp_rdata_REG)
      io_r_resp_rdata_r <= _array_ext_R0_data;
  end // always @(posedge)
  array_2048x32 array_ext (
    .R0_addr (io_r_req_bits_raddr),
    .R0_en   (io_r_req_valid),
    .R0_clk  (clock),
    .W0_addr (io_w_req_bits_waddr),
    .W0_en   (io_w_req_valid),
    .W0_clk  (clock),
    .W0_data (io_w_req_bits_wdata),
    .R0_data (_array_ext_R0_data)
  );
  assign io_r_resp_rdata = io_r_resp_rdata_REG ? _array_ext_R0_data : io_r_resp_rdata_r;
endmodule

module CacheStage1(
  input         clock,
                reset,
                io_in_valid,
  input  [31:0] io_in_bits_addr,
  input         io_mem_req_ready,
                io_mem_resp_valid,
  input  [31:0] io_mem_resp_bits_rdata,
  output        io_in_ready,
                io_mem_req_valid,
  output [31:0] io_mem_req_bits_addr,
  output        io_mem_resp_ready,
                io_out_valid,
  output [31:0] io_out_bits_addr,
  output        io_dataReadBus_valid,
  output [10:0] io_dataReadBus_bits_raddr,
  output        io_dataWriteBus_req_valid,
  output [10:0] io_dataWriteBus_req_bits_waddr,
  output [31:0] io_dataWriteBus_req_bits_wdata
);

  reg  [1:0]        replaceWayReg;
  reg  [1:0]        randomNum;
  reg  [20:0]       tagArray_0_0;
  reg  [20:0]       tagArray_0_1;
  reg  [20:0]       tagArray_0_2;
  reg  [20:0]       tagArray_0_3;
  reg  [20:0]       tagArray_0_4;
  reg  [20:0]       tagArray_0_5;
  reg  [20:0]       tagArray_0_6;
  reg  [20:0]       tagArray_0_7;
  reg  [20:0]       tagArray_0_8;
  reg  [20:0]       tagArray_0_9;
  reg  [20:0]       tagArray_0_10;
  reg  [20:0]       tagArray_0_11;
  reg  [20:0]       tagArray_0_12;
  reg  [20:0]       tagArray_0_13;
  reg  [20:0]       tagArray_0_14;
  reg  [20:0]       tagArray_0_15;
  reg  [20:0]       tagArray_0_16;
  reg  [20:0]       tagArray_0_17;
  reg  [20:0]       tagArray_0_18;
  reg  [20:0]       tagArray_0_19;
  reg  [20:0]       tagArray_0_20;
  reg  [20:0]       tagArray_0_21;
  reg  [20:0]       tagArray_0_22;
  reg  [20:0]       tagArray_0_23;
  reg  [20:0]       tagArray_0_24;
  reg  [20:0]       tagArray_0_25;
  reg  [20:0]       tagArray_0_26;
  reg  [20:0]       tagArray_0_27;
  reg  [20:0]       tagArray_0_28;
  reg  [20:0]       tagArray_0_29;
  reg  [20:0]       tagArray_0_30;
  reg  [20:0]       tagArray_0_31;
  reg  [20:0]       tagArray_0_32;
  reg  [20:0]       tagArray_0_33;
  reg  [20:0]       tagArray_0_34;
  reg  [20:0]       tagArray_0_35;
  reg  [20:0]       tagArray_0_36;
  reg  [20:0]       tagArray_0_37;
  reg  [20:0]       tagArray_0_38;
  reg  [20:0]       tagArray_0_39;
  reg  [20:0]       tagArray_0_40;
  reg  [20:0]       tagArray_0_41;
  reg  [20:0]       tagArray_0_42;
  reg  [20:0]       tagArray_0_43;
  reg  [20:0]       tagArray_0_44;
  reg  [20:0]       tagArray_0_45;
  reg  [20:0]       tagArray_0_46;
  reg  [20:0]       tagArray_0_47;
  reg  [20:0]       tagArray_0_48;
  reg  [20:0]       tagArray_0_49;
  reg  [20:0]       tagArray_0_50;
  reg  [20:0]       tagArray_0_51;
  reg  [20:0]       tagArray_0_52;
  reg  [20:0]       tagArray_0_53;
  reg  [20:0]       tagArray_0_54;
  reg  [20:0]       tagArray_0_55;
  reg  [20:0]       tagArray_0_56;
  reg  [20:0]       tagArray_0_57;
  reg  [20:0]       tagArray_0_58;
  reg  [20:0]       tagArray_0_59;
  reg  [20:0]       tagArray_0_60;
  reg  [20:0]       tagArray_0_61;
  reg  [20:0]       tagArray_0_62;
  reg  [20:0]       tagArray_0_63;
  reg  [20:0]       tagArray_1_0;
  reg  [20:0]       tagArray_1_1;
  reg  [20:0]       tagArray_1_2;
  reg  [20:0]       tagArray_1_3;
  reg  [20:0]       tagArray_1_4;
  reg  [20:0]       tagArray_1_5;
  reg  [20:0]       tagArray_1_6;
  reg  [20:0]       tagArray_1_7;
  reg  [20:0]       tagArray_1_8;
  reg  [20:0]       tagArray_1_9;
  reg  [20:0]       tagArray_1_10;
  reg  [20:0]       tagArray_1_11;
  reg  [20:0]       tagArray_1_12;
  reg  [20:0]       tagArray_1_13;
  reg  [20:0]       tagArray_1_14;
  reg  [20:0]       tagArray_1_15;
  reg  [20:0]       tagArray_1_16;
  reg  [20:0]       tagArray_1_17;
  reg  [20:0]       tagArray_1_18;
  reg  [20:0]       tagArray_1_19;
  reg  [20:0]       tagArray_1_20;
  reg  [20:0]       tagArray_1_21;
  reg  [20:0]       tagArray_1_22;
  reg  [20:0]       tagArray_1_23;
  reg  [20:0]       tagArray_1_24;
  reg  [20:0]       tagArray_1_25;
  reg  [20:0]       tagArray_1_26;
  reg  [20:0]       tagArray_1_27;
  reg  [20:0]       tagArray_1_28;
  reg  [20:0]       tagArray_1_29;
  reg  [20:0]       tagArray_1_30;
  reg  [20:0]       tagArray_1_31;
  reg  [20:0]       tagArray_1_32;
  reg  [20:0]       tagArray_1_33;
  reg  [20:0]       tagArray_1_34;
  reg  [20:0]       tagArray_1_35;
  reg  [20:0]       tagArray_1_36;
  reg  [20:0]       tagArray_1_37;
  reg  [20:0]       tagArray_1_38;
  reg  [20:0]       tagArray_1_39;
  reg  [20:0]       tagArray_1_40;
  reg  [20:0]       tagArray_1_41;
  reg  [20:0]       tagArray_1_42;
  reg  [20:0]       tagArray_1_43;
  reg  [20:0]       tagArray_1_44;
  reg  [20:0]       tagArray_1_45;
  reg  [20:0]       tagArray_1_46;
  reg  [20:0]       tagArray_1_47;
  reg  [20:0]       tagArray_1_48;
  reg  [20:0]       tagArray_1_49;
  reg  [20:0]       tagArray_1_50;
  reg  [20:0]       tagArray_1_51;
  reg  [20:0]       tagArray_1_52;
  reg  [20:0]       tagArray_1_53;
  reg  [20:0]       tagArray_1_54;
  reg  [20:0]       tagArray_1_55;
  reg  [20:0]       tagArray_1_56;
  reg  [20:0]       tagArray_1_57;
  reg  [20:0]       tagArray_1_58;
  reg  [20:0]       tagArray_1_59;
  reg  [20:0]       tagArray_1_60;
  reg  [20:0]       tagArray_1_61;
  reg  [20:0]       tagArray_1_62;
  reg  [20:0]       tagArray_1_63;
  reg  [20:0]       tagArray_2_0;
  reg  [20:0]       tagArray_2_1;
  reg  [20:0]       tagArray_2_2;
  reg  [20:0]       tagArray_2_3;
  reg  [20:0]       tagArray_2_4;
  reg  [20:0]       tagArray_2_5;
  reg  [20:0]       tagArray_2_6;
  reg  [20:0]       tagArray_2_7;
  reg  [20:0]       tagArray_2_8;
  reg  [20:0]       tagArray_2_9;
  reg  [20:0]       tagArray_2_10;
  reg  [20:0]       tagArray_2_11;
  reg  [20:0]       tagArray_2_12;
  reg  [20:0]       tagArray_2_13;
  reg  [20:0]       tagArray_2_14;
  reg  [20:0]       tagArray_2_15;
  reg  [20:0]       tagArray_2_16;
  reg  [20:0]       tagArray_2_17;
  reg  [20:0]       tagArray_2_18;
  reg  [20:0]       tagArray_2_19;
  reg  [20:0]       tagArray_2_20;
  reg  [20:0]       tagArray_2_21;
  reg  [20:0]       tagArray_2_22;
  reg  [20:0]       tagArray_2_23;
  reg  [20:0]       tagArray_2_24;
  reg  [20:0]       tagArray_2_25;
  reg  [20:0]       tagArray_2_26;
  reg  [20:0]       tagArray_2_27;
  reg  [20:0]       tagArray_2_28;
  reg  [20:0]       tagArray_2_29;
  reg  [20:0]       tagArray_2_30;
  reg  [20:0]       tagArray_2_31;
  reg  [20:0]       tagArray_2_32;
  reg  [20:0]       tagArray_2_33;
  reg  [20:0]       tagArray_2_34;
  reg  [20:0]       tagArray_2_35;
  reg  [20:0]       tagArray_2_36;
  reg  [20:0]       tagArray_2_37;
  reg  [20:0]       tagArray_2_38;
  reg  [20:0]       tagArray_2_39;
  reg  [20:0]       tagArray_2_40;
  reg  [20:0]       tagArray_2_41;
  reg  [20:0]       tagArray_2_42;
  reg  [20:0]       tagArray_2_43;
  reg  [20:0]       tagArray_2_44;
  reg  [20:0]       tagArray_2_45;
  reg  [20:0]       tagArray_2_46;
  reg  [20:0]       tagArray_2_47;
  reg  [20:0]       tagArray_2_48;
  reg  [20:0]       tagArray_2_49;
  reg  [20:0]       tagArray_2_50;
  reg  [20:0]       tagArray_2_51;
  reg  [20:0]       tagArray_2_52;
  reg  [20:0]       tagArray_2_53;
  reg  [20:0]       tagArray_2_54;
  reg  [20:0]       tagArray_2_55;
  reg  [20:0]       tagArray_2_56;
  reg  [20:0]       tagArray_2_57;
  reg  [20:0]       tagArray_2_58;
  reg  [20:0]       tagArray_2_59;
  reg  [20:0]       tagArray_2_60;
  reg  [20:0]       tagArray_2_61;
  reg  [20:0]       tagArray_2_62;
  reg  [20:0]       tagArray_2_63;
  reg  [20:0]       tagArray_3_0;
  reg  [20:0]       tagArray_3_1;
  reg  [20:0]       tagArray_3_2;
  reg  [20:0]       tagArray_3_3;
  reg  [20:0]       tagArray_3_4;
  reg  [20:0]       tagArray_3_5;
  reg  [20:0]       tagArray_3_6;
  reg  [20:0]       tagArray_3_7;
  reg  [20:0]       tagArray_3_8;
  reg  [20:0]       tagArray_3_9;
  reg  [20:0]       tagArray_3_10;
  reg  [20:0]       tagArray_3_11;
  reg  [20:0]       tagArray_3_12;
  reg  [20:0]       tagArray_3_13;
  reg  [20:0]       tagArray_3_14;
  reg  [20:0]       tagArray_3_15;
  reg  [20:0]       tagArray_3_16;
  reg  [20:0]       tagArray_3_17;
  reg  [20:0]       tagArray_3_18;
  reg  [20:0]       tagArray_3_19;
  reg  [20:0]       tagArray_3_20;
  reg  [20:0]       tagArray_3_21;
  reg  [20:0]       tagArray_3_22;
  reg  [20:0]       tagArray_3_23;
  reg  [20:0]       tagArray_3_24;
  reg  [20:0]       tagArray_3_25;
  reg  [20:0]       tagArray_3_26;
  reg  [20:0]       tagArray_3_27;
  reg  [20:0]       tagArray_3_28;
  reg  [20:0]       tagArray_3_29;
  reg  [20:0]       tagArray_3_30;
  reg  [20:0]       tagArray_3_31;
  reg  [20:0]       tagArray_3_32;
  reg  [20:0]       tagArray_3_33;
  reg  [20:0]       tagArray_3_34;
  reg  [20:0]       tagArray_3_35;
  reg  [20:0]       tagArray_3_36;
  reg  [20:0]       tagArray_3_37;
  reg  [20:0]       tagArray_3_38;
  reg  [20:0]       tagArray_3_39;
  reg  [20:0]       tagArray_3_40;
  reg  [20:0]       tagArray_3_41;
  reg  [20:0]       tagArray_3_42;
  reg  [20:0]       tagArray_3_43;
  reg  [20:0]       tagArray_3_44;
  reg  [20:0]       tagArray_3_45;
  reg  [20:0]       tagArray_3_46;
  reg  [20:0]       tagArray_3_47;
  reg  [20:0]       tagArray_3_48;
  reg  [20:0]       tagArray_3_49;
  reg  [20:0]       tagArray_3_50;
  reg  [20:0]       tagArray_3_51;
  reg  [20:0]       tagArray_3_52;
  reg  [20:0]       tagArray_3_53;
  reg  [20:0]       tagArray_3_54;
  reg  [20:0]       tagArray_3_55;
  reg  [20:0]       tagArray_3_56;
  reg  [20:0]       tagArray_3_57;
  reg  [20:0]       tagArray_3_58;
  reg  [20:0]       tagArray_3_59;
  reg  [20:0]       tagArray_3_60;
  reg  [20:0]       tagArray_3_61;
  reg  [20:0]       tagArray_3_62;
  reg  [20:0]       tagArray_3_63;
  reg               validArray_0_0;
  reg               validArray_0_1;
  reg               validArray_0_2;
  reg               validArray_0_3;
  reg               validArray_0_4;
  reg               validArray_0_5;
  reg               validArray_0_6;
  reg               validArray_0_7;
  reg               validArray_0_8;
  reg               validArray_0_9;
  reg               validArray_0_10;
  reg               validArray_0_11;
  reg               validArray_0_12;
  reg               validArray_0_13;
  reg               validArray_0_14;
  reg               validArray_0_15;
  reg               validArray_0_16;
  reg               validArray_0_17;
  reg               validArray_0_18;
  reg               validArray_0_19;
  reg               validArray_0_20;
  reg               validArray_0_21;
  reg               validArray_0_22;
  reg               validArray_0_23;
  reg               validArray_0_24;
  reg               validArray_0_25;
  reg               validArray_0_26;
  reg               validArray_0_27;
  reg               validArray_0_28;
  reg               validArray_0_29;
  reg               validArray_0_30;
  reg               validArray_0_31;
  reg               validArray_0_32;
  reg               validArray_0_33;
  reg               validArray_0_34;
  reg               validArray_0_35;
  reg               validArray_0_36;
  reg               validArray_0_37;
  reg               validArray_0_38;
  reg               validArray_0_39;
  reg               validArray_0_40;
  reg               validArray_0_41;
  reg               validArray_0_42;
  reg               validArray_0_43;
  reg               validArray_0_44;
  reg               validArray_0_45;
  reg               validArray_0_46;
  reg               validArray_0_47;
  reg               validArray_0_48;
  reg               validArray_0_49;
  reg               validArray_0_50;
  reg               validArray_0_51;
  reg               validArray_0_52;
  reg               validArray_0_53;
  reg               validArray_0_54;
  reg               validArray_0_55;
  reg               validArray_0_56;
  reg               validArray_0_57;
  reg               validArray_0_58;
  reg               validArray_0_59;
  reg               validArray_0_60;
  reg               validArray_0_61;
  reg               validArray_0_62;
  reg               validArray_0_63;
  reg               validArray_1_0;
  reg               validArray_1_1;
  reg               validArray_1_2;
  reg               validArray_1_3;
  reg               validArray_1_4;
  reg               validArray_1_5;
  reg               validArray_1_6;
  reg               validArray_1_7;
  reg               validArray_1_8;
  reg               validArray_1_9;
  reg               validArray_1_10;
  reg               validArray_1_11;
  reg               validArray_1_12;
  reg               validArray_1_13;
  reg               validArray_1_14;
  reg               validArray_1_15;
  reg               validArray_1_16;
  reg               validArray_1_17;
  reg               validArray_1_18;
  reg               validArray_1_19;
  reg               validArray_1_20;
  reg               validArray_1_21;
  reg               validArray_1_22;
  reg               validArray_1_23;
  reg               validArray_1_24;
  reg               validArray_1_25;
  reg               validArray_1_26;
  reg               validArray_1_27;
  reg               validArray_1_28;
  reg               validArray_1_29;
  reg               validArray_1_30;
  reg               validArray_1_31;
  reg               validArray_1_32;
  reg               validArray_1_33;
  reg               validArray_1_34;
  reg               validArray_1_35;
  reg               validArray_1_36;
  reg               validArray_1_37;
  reg               validArray_1_38;
  reg               validArray_1_39;
  reg               validArray_1_40;
  reg               validArray_1_41;
  reg               validArray_1_42;
  reg               validArray_1_43;
  reg               validArray_1_44;
  reg               validArray_1_45;
  reg               validArray_1_46;
  reg               validArray_1_47;
  reg               validArray_1_48;
  reg               validArray_1_49;
  reg               validArray_1_50;
  reg               validArray_1_51;
  reg               validArray_1_52;
  reg               validArray_1_53;
  reg               validArray_1_54;
  reg               validArray_1_55;
  reg               validArray_1_56;
  reg               validArray_1_57;
  reg               validArray_1_58;
  reg               validArray_1_59;
  reg               validArray_1_60;
  reg               validArray_1_61;
  reg               validArray_1_62;
  reg               validArray_1_63;
  reg               validArray_2_0;
  reg               validArray_2_1;
  reg               validArray_2_2;
  reg               validArray_2_3;
  reg               validArray_2_4;
  reg               validArray_2_5;
  reg               validArray_2_6;
  reg               validArray_2_7;
  reg               validArray_2_8;
  reg               validArray_2_9;
  reg               validArray_2_10;
  reg               validArray_2_11;
  reg               validArray_2_12;
  reg               validArray_2_13;
  reg               validArray_2_14;
  reg               validArray_2_15;
  reg               validArray_2_16;
  reg               validArray_2_17;
  reg               validArray_2_18;
  reg               validArray_2_19;
  reg               validArray_2_20;
  reg               validArray_2_21;
  reg               validArray_2_22;
  reg               validArray_2_23;
  reg               validArray_2_24;
  reg               validArray_2_25;
  reg               validArray_2_26;
  reg               validArray_2_27;
  reg               validArray_2_28;
  reg               validArray_2_29;
  reg               validArray_2_30;
  reg               validArray_2_31;
  reg               validArray_2_32;
  reg               validArray_2_33;
  reg               validArray_2_34;
  reg               validArray_2_35;
  reg               validArray_2_36;
  reg               validArray_2_37;
  reg               validArray_2_38;
  reg               validArray_2_39;
  reg               validArray_2_40;
  reg               validArray_2_41;
  reg               validArray_2_42;
  reg               validArray_2_43;
  reg               validArray_2_44;
  reg               validArray_2_45;
  reg               validArray_2_46;
  reg               validArray_2_47;
  reg               validArray_2_48;
  reg               validArray_2_49;
  reg               validArray_2_50;
  reg               validArray_2_51;
  reg               validArray_2_52;
  reg               validArray_2_53;
  reg               validArray_2_54;
  reg               validArray_2_55;
  reg               validArray_2_56;
  reg               validArray_2_57;
  reg               validArray_2_58;
  reg               validArray_2_59;
  reg               validArray_2_60;
  reg               validArray_2_61;
  reg               validArray_2_62;
  reg               validArray_2_63;
  reg               validArray_3_0;
  reg               validArray_3_1;
  reg               validArray_3_2;
  reg               validArray_3_3;
  reg               validArray_3_4;
  reg               validArray_3_5;
  reg               validArray_3_6;
  reg               validArray_3_7;
  reg               validArray_3_8;
  reg               validArray_3_9;
  reg               validArray_3_10;
  reg               validArray_3_11;
  reg               validArray_3_12;
  reg               validArray_3_13;
  reg               validArray_3_14;
  reg               validArray_3_15;
  reg               validArray_3_16;
  reg               validArray_3_17;
  reg               validArray_3_18;
  reg               validArray_3_19;
  reg               validArray_3_20;
  reg               validArray_3_21;
  reg               validArray_3_22;
  reg               validArray_3_23;
  reg               validArray_3_24;
  reg               validArray_3_25;
  reg               validArray_3_26;
  reg               validArray_3_27;
  reg               validArray_3_28;
  reg               validArray_3_29;
  reg               validArray_3_30;
  reg               validArray_3_31;
  reg               validArray_3_32;
  reg               validArray_3_33;
  reg               validArray_3_34;
  reg               validArray_3_35;
  reg               validArray_3_36;
  reg               validArray_3_37;
  reg               validArray_3_38;
  reg               validArray_3_39;
  reg               validArray_3_40;
  reg               validArray_3_41;
  reg               validArray_3_42;
  reg               validArray_3_43;
  reg               validArray_3_44;
  reg               validArray_3_45;
  reg               validArray_3_46;
  reg               validArray_3_47;
  reg               validArray_3_48;
  reg               validArray_3_49;
  reg               validArray_3_50;
  reg               validArray_3_51;
  reg               validArray_3_52;
  reg               validArray_3_53;
  reg               validArray_3_54;
  reg               validArray_3_55;
  reg               validArray_3_56;
  reg               validArray_3_57;
  reg               validArray_3_58;
  reg               validArray_3_59;
  reg               validArray_3_60;
  reg               validArray_3_61;
  reg               validArray_3_62;
  reg               validArray_3_63;
  wire [63:0][20:0] _GEN =
    {{tagArray_0_63},
     {tagArray_0_62},
     {tagArray_0_61},
     {tagArray_0_60},
     {tagArray_0_59},
     {tagArray_0_58},
     {tagArray_0_57},
     {tagArray_0_56},
     {tagArray_0_55},
     {tagArray_0_54},
     {tagArray_0_53},
     {tagArray_0_52},
     {tagArray_0_51},
     {tagArray_0_50},
     {tagArray_0_49},
     {tagArray_0_48},
     {tagArray_0_47},
     {tagArray_0_46},
     {tagArray_0_45},
     {tagArray_0_44},
     {tagArray_0_43},
     {tagArray_0_42},
     {tagArray_0_41},
     {tagArray_0_40},
     {tagArray_0_39},
     {tagArray_0_38},
     {tagArray_0_37},
     {tagArray_0_36},
     {tagArray_0_35},
     {tagArray_0_34},
     {tagArray_0_33},
     {tagArray_0_32},
     {tagArray_0_31},
     {tagArray_0_30},
     {tagArray_0_29},
     {tagArray_0_28},
     {tagArray_0_27},
     {tagArray_0_26},
     {tagArray_0_25},
     {tagArray_0_24},
     {tagArray_0_23},
     {tagArray_0_22},
     {tagArray_0_21},
     {tagArray_0_20},
     {tagArray_0_19},
     {tagArray_0_18},
     {tagArray_0_17},
     {tagArray_0_16},
     {tagArray_0_15},
     {tagArray_0_14},
     {tagArray_0_13},
     {tagArray_0_12},
     {tagArray_0_11},
     {tagArray_0_10},
     {tagArray_0_9},
     {tagArray_0_8},
     {tagArray_0_7},
     {tagArray_0_6},
     {tagArray_0_5},
     {tagArray_0_4},
     {tagArray_0_3},
     {tagArray_0_2},
     {tagArray_0_1},
     {tagArray_0_0}};
  wire [63:0]       _GEN_0 =
    {{validArray_0_63},
     {validArray_0_62},
     {validArray_0_61},
     {validArray_0_60},
     {validArray_0_59},
     {validArray_0_58},
     {validArray_0_57},
     {validArray_0_56},
     {validArray_0_55},
     {validArray_0_54},
     {validArray_0_53},
     {validArray_0_52},
     {validArray_0_51},
     {validArray_0_50},
     {validArray_0_49},
     {validArray_0_48},
     {validArray_0_47},
     {validArray_0_46},
     {validArray_0_45},
     {validArray_0_44},
     {validArray_0_43},
     {validArray_0_42},
     {validArray_0_41},
     {validArray_0_40},
     {validArray_0_39},
     {validArray_0_38},
     {validArray_0_37},
     {validArray_0_36},
     {validArray_0_35},
     {validArray_0_34},
     {validArray_0_33},
     {validArray_0_32},
     {validArray_0_31},
     {validArray_0_30},
     {validArray_0_29},
     {validArray_0_28},
     {validArray_0_27},
     {validArray_0_26},
     {validArray_0_25},
     {validArray_0_24},
     {validArray_0_23},
     {validArray_0_22},
     {validArray_0_21},
     {validArray_0_20},
     {validArray_0_19},
     {validArray_0_18},
     {validArray_0_17},
     {validArray_0_16},
     {validArray_0_15},
     {validArray_0_14},
     {validArray_0_13},
     {validArray_0_12},
     {validArray_0_11},
     {validArray_0_10},
     {validArray_0_9},
     {validArray_0_8},
     {validArray_0_7},
     {validArray_0_6},
     {validArray_0_5},
     {validArray_0_4},
     {validArray_0_3},
     {validArray_0_2},
     {validArray_0_1},
     {validArray_0_0}};
  wire [63:0][20:0] _GEN_1 =
    {{tagArray_1_63},
     {tagArray_1_62},
     {tagArray_1_61},
     {tagArray_1_60},
     {tagArray_1_59},
     {tagArray_1_58},
     {tagArray_1_57},
     {tagArray_1_56},
     {tagArray_1_55},
     {tagArray_1_54},
     {tagArray_1_53},
     {tagArray_1_52},
     {tagArray_1_51},
     {tagArray_1_50},
     {tagArray_1_49},
     {tagArray_1_48},
     {tagArray_1_47},
     {tagArray_1_46},
     {tagArray_1_45},
     {tagArray_1_44},
     {tagArray_1_43},
     {tagArray_1_42},
     {tagArray_1_41},
     {tagArray_1_40},
     {tagArray_1_39},
     {tagArray_1_38},
     {tagArray_1_37},
     {tagArray_1_36},
     {tagArray_1_35},
     {tagArray_1_34},
     {tagArray_1_33},
     {tagArray_1_32},
     {tagArray_1_31},
     {tagArray_1_30},
     {tagArray_1_29},
     {tagArray_1_28},
     {tagArray_1_27},
     {tagArray_1_26},
     {tagArray_1_25},
     {tagArray_1_24},
     {tagArray_1_23},
     {tagArray_1_22},
     {tagArray_1_21},
     {tagArray_1_20},
     {tagArray_1_19},
     {tagArray_1_18},
     {tagArray_1_17},
     {tagArray_1_16},
     {tagArray_1_15},
     {tagArray_1_14},
     {tagArray_1_13},
     {tagArray_1_12},
     {tagArray_1_11},
     {tagArray_1_10},
     {tagArray_1_9},
     {tagArray_1_8},
     {tagArray_1_7},
     {tagArray_1_6},
     {tagArray_1_5},
     {tagArray_1_4},
     {tagArray_1_3},
     {tagArray_1_2},
     {tagArray_1_1},
     {tagArray_1_0}};
  wire [20:0]       _GEN_2 = _GEN_1[io_in_bits_addr[10:5]];
  wire [63:0]       _GEN_3 =
    {{validArray_1_63},
     {validArray_1_62},
     {validArray_1_61},
     {validArray_1_60},
     {validArray_1_59},
     {validArray_1_58},
     {validArray_1_57},
     {validArray_1_56},
     {validArray_1_55},
     {validArray_1_54},
     {validArray_1_53},
     {validArray_1_52},
     {validArray_1_51},
     {validArray_1_50},
     {validArray_1_49},
     {validArray_1_48},
     {validArray_1_47},
     {validArray_1_46},
     {validArray_1_45},
     {validArray_1_44},
     {validArray_1_43},
     {validArray_1_42},
     {validArray_1_41},
     {validArray_1_40},
     {validArray_1_39},
     {validArray_1_38},
     {validArray_1_37},
     {validArray_1_36},
     {validArray_1_35},
     {validArray_1_34},
     {validArray_1_33},
     {validArray_1_32},
     {validArray_1_31},
     {validArray_1_30},
     {validArray_1_29},
     {validArray_1_28},
     {validArray_1_27},
     {validArray_1_26},
     {validArray_1_25},
     {validArray_1_24},
     {validArray_1_23},
     {validArray_1_22},
     {validArray_1_21},
     {validArray_1_20},
     {validArray_1_19},
     {validArray_1_18},
     {validArray_1_17},
     {validArray_1_16},
     {validArray_1_15},
     {validArray_1_14},
     {validArray_1_13},
     {validArray_1_12},
     {validArray_1_11},
     {validArray_1_10},
     {validArray_1_9},
     {validArray_1_8},
     {validArray_1_7},
     {validArray_1_6},
     {validArray_1_5},
     {validArray_1_4},
     {validArray_1_3},
     {validArray_1_2},
     {validArray_1_1},
     {validArray_1_0}};
  wire [63:0][20:0] _GEN_4 =
    {{tagArray_2_63},
     {tagArray_2_62},
     {tagArray_2_61},
     {tagArray_2_60},
     {tagArray_2_59},
     {tagArray_2_58},
     {tagArray_2_57},
     {tagArray_2_56},
     {tagArray_2_55},
     {tagArray_2_54},
     {tagArray_2_53},
     {tagArray_2_52},
     {tagArray_2_51},
     {tagArray_2_50},
     {tagArray_2_49},
     {tagArray_2_48},
     {tagArray_2_47},
     {tagArray_2_46},
     {tagArray_2_45},
     {tagArray_2_44},
     {tagArray_2_43},
     {tagArray_2_42},
     {tagArray_2_41},
     {tagArray_2_40},
     {tagArray_2_39},
     {tagArray_2_38},
     {tagArray_2_37},
     {tagArray_2_36},
     {tagArray_2_35},
     {tagArray_2_34},
     {tagArray_2_33},
     {tagArray_2_32},
     {tagArray_2_31},
     {tagArray_2_30},
     {tagArray_2_29},
     {tagArray_2_28},
     {tagArray_2_27},
     {tagArray_2_26},
     {tagArray_2_25},
     {tagArray_2_24},
     {tagArray_2_23},
     {tagArray_2_22},
     {tagArray_2_21},
     {tagArray_2_20},
     {tagArray_2_19},
     {tagArray_2_18},
     {tagArray_2_17},
     {tagArray_2_16},
     {tagArray_2_15},
     {tagArray_2_14},
     {tagArray_2_13},
     {tagArray_2_12},
     {tagArray_2_11},
     {tagArray_2_10},
     {tagArray_2_9},
     {tagArray_2_8},
     {tagArray_2_7},
     {tagArray_2_6},
     {tagArray_2_5},
     {tagArray_2_4},
     {tagArray_2_3},
     {tagArray_2_2},
     {tagArray_2_1},
     {tagArray_2_0}};
  wire [20:0]       _GEN_5 = _GEN_4[io_in_bits_addr[10:5]];
  wire [63:0]       _GEN_6 =
    {{validArray_2_63},
     {validArray_2_62},
     {validArray_2_61},
     {validArray_2_60},
     {validArray_2_59},
     {validArray_2_58},
     {validArray_2_57},
     {validArray_2_56},
     {validArray_2_55},
     {validArray_2_54},
     {validArray_2_53},
     {validArray_2_52},
     {validArray_2_51},
     {validArray_2_50},
     {validArray_2_49},
     {validArray_2_48},
     {validArray_2_47},
     {validArray_2_46},
     {validArray_2_45},
     {validArray_2_44},
     {validArray_2_43},
     {validArray_2_42},
     {validArray_2_41},
     {validArray_2_40},
     {validArray_2_39},
     {validArray_2_38},
     {validArray_2_37},
     {validArray_2_36},
     {validArray_2_35},
     {validArray_2_34},
     {validArray_2_33},
     {validArray_2_32},
     {validArray_2_31},
     {validArray_2_30},
     {validArray_2_29},
     {validArray_2_28},
     {validArray_2_27},
     {validArray_2_26},
     {validArray_2_25},
     {validArray_2_24},
     {validArray_2_23},
     {validArray_2_22},
     {validArray_2_21},
     {validArray_2_20},
     {validArray_2_19},
     {validArray_2_18},
     {validArray_2_17},
     {validArray_2_16},
     {validArray_2_15},
     {validArray_2_14},
     {validArray_2_13},
     {validArray_2_12},
     {validArray_2_11},
     {validArray_2_10},
     {validArray_2_9},
     {validArray_2_8},
     {validArray_2_7},
     {validArray_2_6},
     {validArray_2_5},
     {validArray_2_4},
     {validArray_2_3},
     {validArray_2_2},
     {validArray_2_1},
     {validArray_2_0}};
  wire [63:0][20:0] _GEN_7 =
    {{tagArray_3_63},
     {tagArray_3_62},
     {tagArray_3_61},
     {tagArray_3_60},
     {tagArray_3_59},
     {tagArray_3_58},
     {tagArray_3_57},
     {tagArray_3_56},
     {tagArray_3_55},
     {tagArray_3_54},
     {tagArray_3_53},
     {tagArray_3_52},
     {tagArray_3_51},
     {tagArray_3_50},
     {tagArray_3_49},
     {tagArray_3_48},
     {tagArray_3_47},
     {tagArray_3_46},
     {tagArray_3_45},
     {tagArray_3_44},
     {tagArray_3_43},
     {tagArray_3_42},
     {tagArray_3_41},
     {tagArray_3_40},
     {tagArray_3_39},
     {tagArray_3_38},
     {tagArray_3_37},
     {tagArray_3_36},
     {tagArray_3_35},
     {tagArray_3_34},
     {tagArray_3_33},
     {tagArray_3_32},
     {tagArray_3_31},
     {tagArray_3_30},
     {tagArray_3_29},
     {tagArray_3_28},
     {tagArray_3_27},
     {tagArray_3_26},
     {tagArray_3_25},
     {tagArray_3_24},
     {tagArray_3_23},
     {tagArray_3_22},
     {tagArray_3_21},
     {tagArray_3_20},
     {tagArray_3_19},
     {tagArray_3_18},
     {tagArray_3_17},
     {tagArray_3_16},
     {tagArray_3_15},
     {tagArray_3_14},
     {tagArray_3_13},
     {tagArray_3_12},
     {tagArray_3_11},
     {tagArray_3_10},
     {tagArray_3_9},
     {tagArray_3_8},
     {tagArray_3_7},
     {tagArray_3_6},
     {tagArray_3_5},
     {tagArray_3_4},
     {tagArray_3_3},
     {tagArray_3_2},
     {tagArray_3_1},
     {tagArray_3_0}};
  wire [20:0]       _GEN_8 = _GEN_7[io_in_bits_addr[10:5]];
  wire [63:0]       _GEN_9 =
    {{validArray_3_63},
     {validArray_3_62},
     {validArray_3_61},
     {validArray_3_60},
     {validArray_3_59},
     {validArray_3_58},
     {validArray_3_57},
     {validArray_3_56},
     {validArray_3_55},
     {validArray_3_54},
     {validArray_3_53},
     {validArray_3_52},
     {validArray_3_51},
     {validArray_3_50},
     {validArray_3_49},
     {validArray_3_48},
     {validArray_3_47},
     {validArray_3_46},
     {validArray_3_45},
     {validArray_3_44},
     {validArray_3_43},
     {validArray_3_42},
     {validArray_3_41},
     {validArray_3_40},
     {validArray_3_39},
     {validArray_3_38},
     {validArray_3_37},
     {validArray_3_36},
     {validArray_3_35},
     {validArray_3_34},
     {validArray_3_33},
     {validArray_3_32},
     {validArray_3_31},
     {validArray_3_30},
     {validArray_3_29},
     {validArray_3_28},
     {validArray_3_27},
     {validArray_3_26},
     {validArray_3_25},
     {validArray_3_24},
     {validArray_3_23},
     {validArray_3_22},
     {validArray_3_21},
     {validArray_3_20},
     {validArray_3_19},
     {validArray_3_18},
     {validArray_3_17},
     {validArray_3_16},
     {validArray_3_15},
     {validArray_3_14},
     {validArray_3_13},
     {validArray_3_12},
     {validArray_3_11},
     {validArray_3_10},
     {validArray_3_9},
     {validArray_3_8},
     {validArray_3_7},
     {validArray_3_6},
     {validArray_3_5},
     {validArray_3_4},
     {validArray_3_3},
     {validArray_3_2},
     {validArray_3_1},
     {validArray_3_0}};
  wire              hit =
    io_in_bits_addr[31:11] == _GEN[io_in_bits_addr[10:5]] & _GEN_0[io_in_bits_addr[10:5]]
    | io_in_bits_addr[31:11] == _GEN_2 & _GEN_3[io_in_bits_addr[10:5]]
    | io_in_bits_addr[31:11] == _GEN_5 & _GEN_6[io_in_bits_addr[10:5]]
    | io_in_bits_addr[31:11] == _GEN_8 & _GEN_9[io_in_bits_addr[10:5]];
  reg  [2:0]        entryOff;
  reg  [2:0]        stateCache;
  wire              _io_mem_req_valid_output = stateCache == 3'h2;
  wire              _io_mem_resp_ready_output = stateCache == 3'h3;
  wire              _GEN_10 = stateCache == 3'h3;
  wire              _GEN_11 = stateCache == 3'h2;
  wire              _GEN_12 = replaceWayReg == 2'h0;
  wire              _GEN_13 = io_in_bits_addr[10:5] == 6'h0;
  wire              _GEN_14 = (&entryOff) & _GEN_12 & _GEN_13;
  wire              _GEN_15 = io_in_bits_addr[10:5] == 6'h1;
  wire              _GEN_16 = (&entryOff) & _GEN_12 & _GEN_15;
  wire              _GEN_17 = io_in_bits_addr[10:5] == 6'h2;
  wire              _GEN_18 = (&entryOff) & _GEN_12 & _GEN_17;
  wire              _GEN_19 = io_in_bits_addr[10:5] == 6'h3;
  wire              _GEN_20 = (&entryOff) & _GEN_12 & _GEN_19;
  wire              _GEN_21 = io_in_bits_addr[10:5] == 6'h4;
  wire              _GEN_22 = (&entryOff) & _GEN_12 & _GEN_21;
  wire              _GEN_23 = io_in_bits_addr[10:5] == 6'h5;
  wire              _GEN_24 = (&entryOff) & _GEN_12 & _GEN_23;
  wire              _GEN_25 = io_in_bits_addr[10:5] == 6'h6;
  wire              _GEN_26 = (&entryOff) & _GEN_12 & _GEN_25;
  wire              _GEN_27 = io_in_bits_addr[10:5] == 6'h7;
  wire              _GEN_28 = (&entryOff) & _GEN_12 & _GEN_27;
  wire              _GEN_29 = io_in_bits_addr[10:5] == 6'h8;
  wire              _GEN_30 = (&entryOff) & _GEN_12 & _GEN_29;
  wire              _GEN_31 = io_in_bits_addr[10:5] == 6'h9;
  wire              _GEN_32 = (&entryOff) & _GEN_12 & _GEN_31;
  wire              _GEN_33 = io_in_bits_addr[10:5] == 6'hA;
  wire              _GEN_34 = (&entryOff) & _GEN_12 & _GEN_33;
  wire              _GEN_35 = io_in_bits_addr[10:5] == 6'hB;
  wire              _GEN_36 = (&entryOff) & _GEN_12 & _GEN_35;
  wire              _GEN_37 = io_in_bits_addr[10:5] == 6'hC;
  wire              _GEN_38 = (&entryOff) & _GEN_12 & _GEN_37;
  wire              _GEN_39 = io_in_bits_addr[10:5] == 6'hD;
  wire              _GEN_40 = (&entryOff) & _GEN_12 & _GEN_39;
  wire              _GEN_41 = io_in_bits_addr[10:5] == 6'hE;
  wire              _GEN_42 = (&entryOff) & _GEN_12 & _GEN_41;
  wire              _GEN_43 = io_in_bits_addr[10:5] == 6'hF;
  wire              _GEN_44 = (&entryOff) & _GEN_12 & _GEN_43;
  wire              _GEN_45 = io_in_bits_addr[10:5] == 6'h10;
  wire              _GEN_46 = (&entryOff) & _GEN_12 & _GEN_45;
  wire              _GEN_47 = io_in_bits_addr[10:5] == 6'h11;
  wire              _GEN_48 = (&entryOff) & _GEN_12 & _GEN_47;
  wire              _GEN_49 = io_in_bits_addr[10:5] == 6'h12;
  wire              _GEN_50 = (&entryOff) & _GEN_12 & _GEN_49;
  wire              _GEN_51 = io_in_bits_addr[10:5] == 6'h13;
  wire              _GEN_52 = (&entryOff) & _GEN_12 & _GEN_51;
  wire              _GEN_53 = io_in_bits_addr[10:5] == 6'h14;
  wire              _GEN_54 = (&entryOff) & _GEN_12 & _GEN_53;
  wire              _GEN_55 = io_in_bits_addr[10:5] == 6'h15;
  wire              _GEN_56 = (&entryOff) & _GEN_12 & _GEN_55;
  wire              _GEN_57 = io_in_bits_addr[10:5] == 6'h16;
  wire              _GEN_58 = (&entryOff) & _GEN_12 & _GEN_57;
  wire              _GEN_59 = io_in_bits_addr[10:5] == 6'h17;
  wire              _GEN_60 = (&entryOff) & _GEN_12 & _GEN_59;
  wire              _GEN_61 = io_in_bits_addr[10:5] == 6'h18;
  wire              _GEN_62 = (&entryOff) & _GEN_12 & _GEN_61;
  wire              _GEN_63 = io_in_bits_addr[10:5] == 6'h19;
  wire              _GEN_64 = (&entryOff) & _GEN_12 & _GEN_63;
  wire              _GEN_65 = io_in_bits_addr[10:5] == 6'h1A;
  wire              _GEN_66 = (&entryOff) & _GEN_12 & _GEN_65;
  wire              _GEN_67 = io_in_bits_addr[10:5] == 6'h1B;
  wire              _GEN_68 = (&entryOff) & _GEN_12 & _GEN_67;
  wire              _GEN_69 = io_in_bits_addr[10:5] == 6'h1C;
  wire              _GEN_70 = (&entryOff) & _GEN_12 & _GEN_69;
  wire              _GEN_71 = io_in_bits_addr[10:5] == 6'h1D;
  wire              _GEN_72 = (&entryOff) & _GEN_12 & _GEN_71;
  wire              _GEN_73 = io_in_bits_addr[10:5] == 6'h1E;
  wire              _GEN_74 = (&entryOff) & _GEN_12 & _GEN_73;
  wire              _GEN_75 = io_in_bits_addr[10:5] == 6'h1F;
  wire              _GEN_76 = (&entryOff) & _GEN_12 & _GEN_75;
  wire              _GEN_77 = io_in_bits_addr[10:5] == 6'h20;
  wire              _GEN_78 = (&entryOff) & _GEN_12 & _GEN_77;
  wire              _GEN_79 = io_in_bits_addr[10:5] == 6'h21;
  wire              _GEN_80 = (&entryOff) & _GEN_12 & _GEN_79;
  wire              _GEN_81 = io_in_bits_addr[10:5] == 6'h22;
  wire              _GEN_82 = (&entryOff) & _GEN_12 & _GEN_81;
  wire              _GEN_83 = io_in_bits_addr[10:5] == 6'h23;
  wire              _GEN_84 = (&entryOff) & _GEN_12 & _GEN_83;
  wire              _GEN_85 = io_in_bits_addr[10:5] == 6'h24;
  wire              _GEN_86 = (&entryOff) & _GEN_12 & _GEN_85;
  wire              _GEN_87 = io_in_bits_addr[10:5] == 6'h25;
  wire              _GEN_88 = (&entryOff) & _GEN_12 & _GEN_87;
  wire              _GEN_89 = io_in_bits_addr[10:5] == 6'h26;
  wire              _GEN_90 = (&entryOff) & _GEN_12 & _GEN_89;
  wire              _GEN_91 = io_in_bits_addr[10:5] == 6'h27;
  wire              _GEN_92 = (&entryOff) & _GEN_12 & _GEN_91;
  wire              _GEN_93 = io_in_bits_addr[10:5] == 6'h28;
  wire              _GEN_94 = (&entryOff) & _GEN_12 & _GEN_93;
  wire              _GEN_95 = io_in_bits_addr[10:5] == 6'h29;
  wire              _GEN_96 = (&entryOff) & _GEN_12 & _GEN_95;
  wire              _GEN_97 = io_in_bits_addr[10:5] == 6'h2A;
  wire              _GEN_98 = (&entryOff) & _GEN_12 & _GEN_97;
  wire              _GEN_99 = io_in_bits_addr[10:5] == 6'h2B;
  wire              _GEN_100 = (&entryOff) & _GEN_12 & _GEN_99;
  wire              _GEN_101 = io_in_bits_addr[10:5] == 6'h2C;
  wire              _GEN_102 = (&entryOff) & _GEN_12 & _GEN_101;
  wire              _GEN_103 = io_in_bits_addr[10:5] == 6'h2D;
  wire              _GEN_104 = (&entryOff) & _GEN_12 & _GEN_103;
  wire              _GEN_105 = io_in_bits_addr[10:5] == 6'h2E;
  wire              _GEN_106 = (&entryOff) & _GEN_12 & _GEN_105;
  wire              _GEN_107 = io_in_bits_addr[10:5] == 6'h2F;
  wire              _GEN_108 = (&entryOff) & _GEN_12 & _GEN_107;
  wire              _GEN_109 = io_in_bits_addr[10:5] == 6'h30;
  wire              _GEN_110 = (&entryOff) & _GEN_12 & _GEN_109;
  wire              _GEN_111 = io_in_bits_addr[10:5] == 6'h31;
  wire              _GEN_112 = (&entryOff) & _GEN_12 & _GEN_111;
  wire              _GEN_113 = io_in_bits_addr[10:5] == 6'h32;
  wire              _GEN_114 = (&entryOff) & _GEN_12 & _GEN_113;
  wire              _GEN_115 = io_in_bits_addr[10:5] == 6'h33;
  wire              _GEN_116 = (&entryOff) & _GEN_12 & _GEN_115;
  wire              _GEN_117 = io_in_bits_addr[10:5] == 6'h34;
  wire              _GEN_118 = (&entryOff) & _GEN_12 & _GEN_117;
  wire              _GEN_119 = io_in_bits_addr[10:5] == 6'h35;
  wire              _GEN_120 = (&entryOff) & _GEN_12 & _GEN_119;
  wire              _GEN_121 = io_in_bits_addr[10:5] == 6'h36;
  wire              _GEN_122 = (&entryOff) & _GEN_12 & _GEN_121;
  wire              _GEN_123 = io_in_bits_addr[10:5] == 6'h37;
  wire              _GEN_124 = (&entryOff) & _GEN_12 & _GEN_123;
  wire              _GEN_125 = io_in_bits_addr[10:5] == 6'h38;
  wire              _GEN_126 = (&entryOff) & _GEN_12 & _GEN_125;
  wire              _GEN_127 = io_in_bits_addr[10:5] == 6'h39;
  wire              _GEN_128 = (&entryOff) & _GEN_12 & _GEN_127;
  wire              _GEN_129 = io_in_bits_addr[10:5] == 6'h3A;
  wire              _GEN_130 = (&entryOff) & _GEN_12 & _GEN_129;
  wire              _GEN_131 = io_in_bits_addr[10:5] == 6'h3B;
  wire              _GEN_132 = (&entryOff) & _GEN_12 & _GEN_131;
  wire              _GEN_133 = io_in_bits_addr[10:5] == 6'h3C;
  wire              _GEN_134 = (&entryOff) & _GEN_12 & _GEN_133;
  wire              _GEN_135 = io_in_bits_addr[10:5] == 6'h3D;
  wire              _GEN_136 = (&entryOff) & _GEN_12 & _GEN_135;
  wire              _GEN_137 = io_in_bits_addr[10:5] == 6'h3E;
  wire              _GEN_138 = (&entryOff) & _GEN_12 & _GEN_137;
  wire              _GEN_139 = (&entryOff) & _GEN_12 & (&(io_in_bits_addr[10:5]));
  wire              _GEN_140 = replaceWayReg == 2'h1;
  wire              _GEN_141 = (&entryOff) & _GEN_140 & _GEN_13;
  wire              _GEN_142 = (&entryOff) & _GEN_140 & _GEN_15;
  wire              _GEN_143 = (&entryOff) & _GEN_140 & _GEN_17;
  wire              _GEN_144 = (&entryOff) & _GEN_140 & _GEN_19;
  wire              _GEN_145 = (&entryOff) & _GEN_140 & _GEN_21;
  wire              _GEN_146 = (&entryOff) & _GEN_140 & _GEN_23;
  wire              _GEN_147 = (&entryOff) & _GEN_140 & _GEN_25;
  wire              _GEN_148 = (&entryOff) & _GEN_140 & _GEN_27;
  wire              _GEN_149 = (&entryOff) & _GEN_140 & _GEN_29;
  wire              _GEN_150 = (&entryOff) & _GEN_140 & _GEN_31;
  wire              _GEN_151 = (&entryOff) & _GEN_140 & _GEN_33;
  wire              _GEN_152 = (&entryOff) & _GEN_140 & _GEN_35;
  wire              _GEN_153 = (&entryOff) & _GEN_140 & _GEN_37;
  wire              _GEN_154 = (&entryOff) & _GEN_140 & _GEN_39;
  wire              _GEN_155 = (&entryOff) & _GEN_140 & _GEN_41;
  wire              _GEN_156 = (&entryOff) & _GEN_140 & _GEN_43;
  wire              _GEN_157 = (&entryOff) & _GEN_140 & _GEN_45;
  wire              _GEN_158 = (&entryOff) & _GEN_140 & _GEN_47;
  wire              _GEN_159 = (&entryOff) & _GEN_140 & _GEN_49;
  wire              _GEN_160 = (&entryOff) & _GEN_140 & _GEN_51;
  wire              _GEN_161 = (&entryOff) & _GEN_140 & _GEN_53;
  wire              _GEN_162 = (&entryOff) & _GEN_140 & _GEN_55;
  wire              _GEN_163 = (&entryOff) & _GEN_140 & _GEN_57;
  wire              _GEN_164 = (&entryOff) & _GEN_140 & _GEN_59;
  wire              _GEN_165 = (&entryOff) & _GEN_140 & _GEN_61;
  wire              _GEN_166 = (&entryOff) & _GEN_140 & _GEN_63;
  wire              _GEN_167 = (&entryOff) & _GEN_140 & _GEN_65;
  wire              _GEN_168 = (&entryOff) & _GEN_140 & _GEN_67;
  wire              _GEN_169 = (&entryOff) & _GEN_140 & _GEN_69;
  wire              _GEN_170 = (&entryOff) & _GEN_140 & _GEN_71;
  wire              _GEN_171 = (&entryOff) & _GEN_140 & _GEN_73;
  wire              _GEN_172 = (&entryOff) & _GEN_140 & _GEN_75;
  wire              _GEN_173 = (&entryOff) & _GEN_140 & _GEN_77;
  wire              _GEN_174 = (&entryOff) & _GEN_140 & _GEN_79;
  wire              _GEN_175 = (&entryOff) & _GEN_140 & _GEN_81;
  wire              _GEN_176 = (&entryOff) & _GEN_140 & _GEN_83;
  wire              _GEN_177 = (&entryOff) & _GEN_140 & _GEN_85;
  wire              _GEN_178 = (&entryOff) & _GEN_140 & _GEN_87;
  wire              _GEN_179 = (&entryOff) & _GEN_140 & _GEN_89;
  wire              _GEN_180 = (&entryOff) & _GEN_140 & _GEN_91;
  wire              _GEN_181 = (&entryOff) & _GEN_140 & _GEN_93;
  wire              _GEN_182 = (&entryOff) & _GEN_140 & _GEN_95;
  wire              _GEN_183 = (&entryOff) & _GEN_140 & _GEN_97;
  wire              _GEN_184 = (&entryOff) & _GEN_140 & _GEN_99;
  wire              _GEN_185 = (&entryOff) & _GEN_140 & _GEN_101;
  wire              _GEN_186 = (&entryOff) & _GEN_140 & _GEN_103;
  wire              _GEN_187 = (&entryOff) & _GEN_140 & _GEN_105;
  wire              _GEN_188 = (&entryOff) & _GEN_140 & _GEN_107;
  wire              _GEN_189 = (&entryOff) & _GEN_140 & _GEN_109;
  wire              _GEN_190 = (&entryOff) & _GEN_140 & _GEN_111;
  wire              _GEN_191 = (&entryOff) & _GEN_140 & _GEN_113;
  wire              _GEN_192 = (&entryOff) & _GEN_140 & _GEN_115;
  wire              _GEN_193 = (&entryOff) & _GEN_140 & _GEN_117;
  wire              _GEN_194 = (&entryOff) & _GEN_140 & _GEN_119;
  wire              _GEN_195 = (&entryOff) & _GEN_140 & _GEN_121;
  wire              _GEN_196 = (&entryOff) & _GEN_140 & _GEN_123;
  wire              _GEN_197 = (&entryOff) & _GEN_140 & _GEN_125;
  wire              _GEN_198 = (&entryOff) & _GEN_140 & _GEN_127;
  wire              _GEN_199 = (&entryOff) & _GEN_140 & _GEN_129;
  wire              _GEN_200 = (&entryOff) & _GEN_140 & _GEN_131;
  wire              _GEN_201 = (&entryOff) & _GEN_140 & _GEN_133;
  wire              _GEN_202 = (&entryOff) & _GEN_140 & _GEN_135;
  wire              _GEN_203 = (&entryOff) & _GEN_140 & _GEN_137;
  wire              _GEN_204 = (&entryOff) & _GEN_140 & (&(io_in_bits_addr[10:5]));
  wire              _GEN_205 = replaceWayReg == 2'h2;
  wire              _GEN_206 = (&entryOff) & _GEN_205 & _GEN_13;
  wire              _GEN_207 = (&entryOff) & _GEN_205 & _GEN_15;
  wire              _GEN_208 = (&entryOff) & _GEN_205 & _GEN_17;
  wire              _GEN_209 = (&entryOff) & _GEN_205 & _GEN_19;
  wire              _GEN_210 = (&entryOff) & _GEN_205 & _GEN_21;
  wire              _GEN_211 = (&entryOff) & _GEN_205 & _GEN_23;
  wire              _GEN_212 = (&entryOff) & _GEN_205 & _GEN_25;
  wire              _GEN_213 = (&entryOff) & _GEN_205 & _GEN_27;
  wire              _GEN_214 = (&entryOff) & _GEN_205 & _GEN_29;
  wire              _GEN_215 = (&entryOff) & _GEN_205 & _GEN_31;
  wire              _GEN_216 = (&entryOff) & _GEN_205 & _GEN_33;
  wire              _GEN_217 = (&entryOff) & _GEN_205 & _GEN_35;
  wire              _GEN_218 = (&entryOff) & _GEN_205 & _GEN_37;
  wire              _GEN_219 = (&entryOff) & _GEN_205 & _GEN_39;
  wire              _GEN_220 = (&entryOff) & _GEN_205 & _GEN_41;
  wire              _GEN_221 = (&entryOff) & _GEN_205 & _GEN_43;
  wire              _GEN_222 = (&entryOff) & _GEN_205 & _GEN_45;
  wire              _GEN_223 = (&entryOff) & _GEN_205 & _GEN_47;
  wire              _GEN_224 = (&entryOff) & _GEN_205 & _GEN_49;
  wire              _GEN_225 = (&entryOff) & _GEN_205 & _GEN_51;
  wire              _GEN_226 = (&entryOff) & _GEN_205 & _GEN_53;
  wire              _GEN_227 = (&entryOff) & _GEN_205 & _GEN_55;
  wire              _GEN_228 = (&entryOff) & _GEN_205 & _GEN_57;
  wire              _GEN_229 = (&entryOff) & _GEN_205 & _GEN_59;
  wire              _GEN_230 = (&entryOff) & _GEN_205 & _GEN_61;
  wire              _GEN_231 = (&entryOff) & _GEN_205 & _GEN_63;
  wire              _GEN_232 = (&entryOff) & _GEN_205 & _GEN_65;
  wire              _GEN_233 = (&entryOff) & _GEN_205 & _GEN_67;
  wire              _GEN_234 = (&entryOff) & _GEN_205 & _GEN_69;
  wire              _GEN_235 = (&entryOff) & _GEN_205 & _GEN_71;
  wire              _GEN_236 = (&entryOff) & _GEN_205 & _GEN_73;
  wire              _GEN_237 = (&entryOff) & _GEN_205 & _GEN_75;
  wire              _GEN_238 = (&entryOff) & _GEN_205 & _GEN_77;
  wire              _GEN_239 = (&entryOff) & _GEN_205 & _GEN_79;
  wire              _GEN_240 = (&entryOff) & _GEN_205 & _GEN_81;
  wire              _GEN_241 = (&entryOff) & _GEN_205 & _GEN_83;
  wire              _GEN_242 = (&entryOff) & _GEN_205 & _GEN_85;
  wire              _GEN_243 = (&entryOff) & _GEN_205 & _GEN_87;
  wire              _GEN_244 = (&entryOff) & _GEN_205 & _GEN_89;
  wire              _GEN_245 = (&entryOff) & _GEN_205 & _GEN_91;
  wire              _GEN_246 = (&entryOff) & _GEN_205 & _GEN_93;
  wire              _GEN_247 = (&entryOff) & _GEN_205 & _GEN_95;
  wire              _GEN_248 = (&entryOff) & _GEN_205 & _GEN_97;
  wire              _GEN_249 = (&entryOff) & _GEN_205 & _GEN_99;
  wire              _GEN_250 = (&entryOff) & _GEN_205 & _GEN_101;
  wire              _GEN_251 = (&entryOff) & _GEN_205 & _GEN_103;
  wire              _GEN_252 = (&entryOff) & _GEN_205 & _GEN_105;
  wire              _GEN_253 = (&entryOff) & _GEN_205 & _GEN_107;
  wire              _GEN_254 = (&entryOff) & _GEN_205 & _GEN_109;
  wire              _GEN_255 = (&entryOff) & _GEN_205 & _GEN_111;
  wire              _GEN_256 = (&entryOff) & _GEN_205 & _GEN_113;
  wire              _GEN_257 = (&entryOff) & _GEN_205 & _GEN_115;
  wire              _GEN_258 = (&entryOff) & _GEN_205 & _GEN_117;
  wire              _GEN_259 = (&entryOff) & _GEN_205 & _GEN_119;
  wire              _GEN_260 = (&entryOff) & _GEN_205 & _GEN_121;
  wire              _GEN_261 = (&entryOff) & _GEN_205 & _GEN_123;
  wire              _GEN_262 = (&entryOff) & _GEN_205 & _GEN_125;
  wire              _GEN_263 = (&entryOff) & _GEN_205 & _GEN_127;
  wire              _GEN_264 = (&entryOff) & _GEN_205 & _GEN_129;
  wire              _GEN_265 = (&entryOff) & _GEN_205 & _GEN_131;
  wire              _GEN_266 = (&entryOff) & _GEN_205 & _GEN_133;
  wire              _GEN_267 = (&entryOff) & _GEN_205 & _GEN_135;
  wire              _GEN_268 = (&entryOff) & _GEN_205 & _GEN_137;
  wire              _GEN_269 = (&entryOff) & _GEN_205 & (&(io_in_bits_addr[10:5]));
  wire              _GEN_270 = (&entryOff) & (&replaceWayReg) & _GEN_13;
  wire              _GEN_271 = (&entryOff) & (&replaceWayReg) & _GEN_15;
  wire              _GEN_272 = (&entryOff) & (&replaceWayReg) & _GEN_17;
  wire              _GEN_273 = (&entryOff) & (&replaceWayReg) & _GEN_19;
  wire              _GEN_274 = (&entryOff) & (&replaceWayReg) & _GEN_21;
  wire              _GEN_275 = (&entryOff) & (&replaceWayReg) & _GEN_23;
  wire              _GEN_276 = (&entryOff) & (&replaceWayReg) & _GEN_25;
  wire              _GEN_277 = (&entryOff) & (&replaceWayReg) & _GEN_27;
  wire              _GEN_278 = (&entryOff) & (&replaceWayReg) & _GEN_29;
  wire              _GEN_279 = (&entryOff) & (&replaceWayReg) & _GEN_31;
  wire              _GEN_280 = (&entryOff) & (&replaceWayReg) & _GEN_33;
  wire              _GEN_281 = (&entryOff) & (&replaceWayReg) & _GEN_35;
  wire              _GEN_282 = (&entryOff) & (&replaceWayReg) & _GEN_37;
  wire              _GEN_283 = (&entryOff) & (&replaceWayReg) & _GEN_39;
  wire              _GEN_284 = (&entryOff) & (&replaceWayReg) & _GEN_41;
  wire              _GEN_285 = (&entryOff) & (&replaceWayReg) & _GEN_43;
  wire              _GEN_286 = (&entryOff) & (&replaceWayReg) & _GEN_45;
  wire              _GEN_287 = (&entryOff) & (&replaceWayReg) & _GEN_47;
  wire              _GEN_288 = (&entryOff) & (&replaceWayReg) & _GEN_49;
  wire              _GEN_289 = (&entryOff) & (&replaceWayReg) & _GEN_51;
  wire              _GEN_290 = (&entryOff) & (&replaceWayReg) & _GEN_53;
  wire              _GEN_291 = (&entryOff) & (&replaceWayReg) & _GEN_55;
  wire              _GEN_292 = (&entryOff) & (&replaceWayReg) & _GEN_57;
  wire              _GEN_293 = (&entryOff) & (&replaceWayReg) & _GEN_59;
  wire              _GEN_294 = (&entryOff) & (&replaceWayReg) & _GEN_61;
  wire              _GEN_295 = (&entryOff) & (&replaceWayReg) & _GEN_63;
  wire              _GEN_296 = (&entryOff) & (&replaceWayReg) & _GEN_65;
  wire              _GEN_297 = (&entryOff) & (&replaceWayReg) & _GEN_67;
  wire              _GEN_298 = (&entryOff) & (&replaceWayReg) & _GEN_69;
  wire              _GEN_299 = (&entryOff) & (&replaceWayReg) & _GEN_71;
  wire              _GEN_300 = (&entryOff) & (&replaceWayReg) & _GEN_73;
  wire              _GEN_301 = (&entryOff) & (&replaceWayReg) & _GEN_75;
  wire              _GEN_302 = (&entryOff) & (&replaceWayReg) & _GEN_77;
  wire              _GEN_303 = (&entryOff) & (&replaceWayReg) & _GEN_79;
  wire              _GEN_304 = (&entryOff) & (&replaceWayReg) & _GEN_81;
  wire              _GEN_305 = (&entryOff) & (&replaceWayReg) & _GEN_83;
  wire              _GEN_306 = (&entryOff) & (&replaceWayReg) & _GEN_85;
  wire              _GEN_307 = (&entryOff) & (&replaceWayReg) & _GEN_87;
  wire              _GEN_308 = (&entryOff) & (&replaceWayReg) & _GEN_89;
  wire              _GEN_309 = (&entryOff) & (&replaceWayReg) & _GEN_91;
  wire              _GEN_310 = (&entryOff) & (&replaceWayReg) & _GEN_93;
  wire              _GEN_311 = (&entryOff) & (&replaceWayReg) & _GEN_95;
  wire              _GEN_312 = (&entryOff) & (&replaceWayReg) & _GEN_97;
  wire              _GEN_313 = (&entryOff) & (&replaceWayReg) & _GEN_99;
  wire              _GEN_314 = (&entryOff) & (&replaceWayReg) & _GEN_101;
  wire              _GEN_315 = (&entryOff) & (&replaceWayReg) & _GEN_103;
  wire              _GEN_316 = (&entryOff) & (&replaceWayReg) & _GEN_105;
  wire              _GEN_317 = (&entryOff) & (&replaceWayReg) & _GEN_107;
  wire              _GEN_318 = (&entryOff) & (&replaceWayReg) & _GEN_109;
  wire              _GEN_319 = (&entryOff) & (&replaceWayReg) & _GEN_111;
  wire              _GEN_320 = (&entryOff) & (&replaceWayReg) & _GEN_113;
  wire              _GEN_321 = (&entryOff) & (&replaceWayReg) & _GEN_115;
  wire              _GEN_322 = (&entryOff) & (&replaceWayReg) & _GEN_117;
  wire              _GEN_323 = (&entryOff) & (&replaceWayReg) & _GEN_119;
  wire              _GEN_324 = (&entryOff) & (&replaceWayReg) & _GEN_121;
  wire              _GEN_325 = (&entryOff) & (&replaceWayReg) & _GEN_123;
  wire              _GEN_326 = (&entryOff) & (&replaceWayReg) & _GEN_125;
  wire              _GEN_327 = (&entryOff) & (&replaceWayReg) & _GEN_127;
  wire              _GEN_328 = (&entryOff) & (&replaceWayReg) & _GEN_129;
  wire              _GEN_329 = (&entryOff) & (&replaceWayReg) & _GEN_131;
  wire              _GEN_330 = (&entryOff) & (&replaceWayReg) & _GEN_133;
  wire              _GEN_331 = (&entryOff) & (&replaceWayReg) & _GEN_135;
  wire              _GEN_332 = (&entryOff) & (&replaceWayReg) & _GEN_137;
  wire              _GEN_333 =
    (&entryOff) & (&replaceWayReg) & (&(io_in_bits_addr[10:5]));
  always @(posedge clock) begin
    if (reset) begin
      replaceWayReg <= 2'h0;
      randomNum <= 2'h0;
      tagArray_0_0 <= 21'h0;
      tagArray_0_1 <= 21'h0;
      tagArray_0_2 <= 21'h0;
      tagArray_0_3 <= 21'h0;
      tagArray_0_4 <= 21'h0;
      tagArray_0_5 <= 21'h0;
      tagArray_0_6 <= 21'h0;
      tagArray_0_7 <= 21'h0;
      tagArray_0_8 <= 21'h0;
      tagArray_0_9 <= 21'h0;
      tagArray_0_10 <= 21'h0;
      tagArray_0_11 <= 21'h0;
      tagArray_0_12 <= 21'h0;
      tagArray_0_13 <= 21'h0;
      tagArray_0_14 <= 21'h0;
      tagArray_0_15 <= 21'h0;
      tagArray_0_16 <= 21'h0;
      tagArray_0_17 <= 21'h0;
      tagArray_0_18 <= 21'h0;
      tagArray_0_19 <= 21'h0;
      tagArray_0_20 <= 21'h0;
      tagArray_0_21 <= 21'h0;
      tagArray_0_22 <= 21'h0;
      tagArray_0_23 <= 21'h0;
      tagArray_0_24 <= 21'h0;
      tagArray_0_25 <= 21'h0;
      tagArray_0_26 <= 21'h0;
      tagArray_0_27 <= 21'h0;
      tagArray_0_28 <= 21'h0;
      tagArray_0_29 <= 21'h0;
      tagArray_0_30 <= 21'h0;
      tagArray_0_31 <= 21'h0;
      tagArray_0_32 <= 21'h0;
      tagArray_0_33 <= 21'h0;
      tagArray_0_34 <= 21'h0;
      tagArray_0_35 <= 21'h0;
      tagArray_0_36 <= 21'h0;
      tagArray_0_37 <= 21'h0;
      tagArray_0_38 <= 21'h0;
      tagArray_0_39 <= 21'h0;
      tagArray_0_40 <= 21'h0;
      tagArray_0_41 <= 21'h0;
      tagArray_0_42 <= 21'h0;
      tagArray_0_43 <= 21'h0;
      tagArray_0_44 <= 21'h0;
      tagArray_0_45 <= 21'h0;
      tagArray_0_46 <= 21'h0;
      tagArray_0_47 <= 21'h0;
      tagArray_0_48 <= 21'h0;
      tagArray_0_49 <= 21'h0;
      tagArray_0_50 <= 21'h0;
      tagArray_0_51 <= 21'h0;
      tagArray_0_52 <= 21'h0;
      tagArray_0_53 <= 21'h0;
      tagArray_0_54 <= 21'h0;
      tagArray_0_55 <= 21'h0;
      tagArray_0_56 <= 21'h0;
      tagArray_0_57 <= 21'h0;
      tagArray_0_58 <= 21'h0;
      tagArray_0_59 <= 21'h0;
      tagArray_0_60 <= 21'h0;
      tagArray_0_61 <= 21'h0;
      tagArray_0_62 <= 21'h0;
      tagArray_0_63 <= 21'h0;
      tagArray_1_0 <= 21'h0;
      tagArray_1_1 <= 21'h0;
      tagArray_1_2 <= 21'h0;
      tagArray_1_3 <= 21'h0;
      tagArray_1_4 <= 21'h0;
      tagArray_1_5 <= 21'h0;
      tagArray_1_6 <= 21'h0;
      tagArray_1_7 <= 21'h0;
      tagArray_1_8 <= 21'h0;
      tagArray_1_9 <= 21'h0;
      tagArray_1_10 <= 21'h0;
      tagArray_1_11 <= 21'h0;
      tagArray_1_12 <= 21'h0;
      tagArray_1_13 <= 21'h0;
      tagArray_1_14 <= 21'h0;
      tagArray_1_15 <= 21'h0;
      tagArray_1_16 <= 21'h0;
      tagArray_1_17 <= 21'h0;
      tagArray_1_18 <= 21'h0;
      tagArray_1_19 <= 21'h0;
      tagArray_1_20 <= 21'h0;
      tagArray_1_21 <= 21'h0;
      tagArray_1_22 <= 21'h0;
      tagArray_1_23 <= 21'h0;
      tagArray_1_24 <= 21'h0;
      tagArray_1_25 <= 21'h0;
      tagArray_1_26 <= 21'h0;
      tagArray_1_27 <= 21'h0;
      tagArray_1_28 <= 21'h0;
      tagArray_1_29 <= 21'h0;
      tagArray_1_30 <= 21'h0;
      tagArray_1_31 <= 21'h0;
      tagArray_1_32 <= 21'h0;
      tagArray_1_33 <= 21'h0;
      tagArray_1_34 <= 21'h0;
      tagArray_1_35 <= 21'h0;
      tagArray_1_36 <= 21'h0;
      tagArray_1_37 <= 21'h0;
      tagArray_1_38 <= 21'h0;
      tagArray_1_39 <= 21'h0;
      tagArray_1_40 <= 21'h0;
      tagArray_1_41 <= 21'h0;
      tagArray_1_42 <= 21'h0;
      tagArray_1_43 <= 21'h0;
      tagArray_1_44 <= 21'h0;
      tagArray_1_45 <= 21'h0;
      tagArray_1_46 <= 21'h0;
      tagArray_1_47 <= 21'h0;
      tagArray_1_48 <= 21'h0;
      tagArray_1_49 <= 21'h0;
      tagArray_1_50 <= 21'h0;
      tagArray_1_51 <= 21'h0;
      tagArray_1_52 <= 21'h0;
      tagArray_1_53 <= 21'h0;
      tagArray_1_54 <= 21'h0;
      tagArray_1_55 <= 21'h0;
      tagArray_1_56 <= 21'h0;
      tagArray_1_57 <= 21'h0;
      tagArray_1_58 <= 21'h0;
      tagArray_1_59 <= 21'h0;
      tagArray_1_60 <= 21'h0;
      tagArray_1_61 <= 21'h0;
      tagArray_1_62 <= 21'h0;
      tagArray_1_63 <= 21'h0;
      tagArray_2_0 <= 21'h0;
      tagArray_2_1 <= 21'h0;
      tagArray_2_2 <= 21'h0;
      tagArray_2_3 <= 21'h0;
      tagArray_2_4 <= 21'h0;
      tagArray_2_5 <= 21'h0;
      tagArray_2_6 <= 21'h0;
      tagArray_2_7 <= 21'h0;
      tagArray_2_8 <= 21'h0;
      tagArray_2_9 <= 21'h0;
      tagArray_2_10 <= 21'h0;
      tagArray_2_11 <= 21'h0;
      tagArray_2_12 <= 21'h0;
      tagArray_2_13 <= 21'h0;
      tagArray_2_14 <= 21'h0;
      tagArray_2_15 <= 21'h0;
      tagArray_2_16 <= 21'h0;
      tagArray_2_17 <= 21'h0;
      tagArray_2_18 <= 21'h0;
      tagArray_2_19 <= 21'h0;
      tagArray_2_20 <= 21'h0;
      tagArray_2_21 <= 21'h0;
      tagArray_2_22 <= 21'h0;
      tagArray_2_23 <= 21'h0;
      tagArray_2_24 <= 21'h0;
      tagArray_2_25 <= 21'h0;
      tagArray_2_26 <= 21'h0;
      tagArray_2_27 <= 21'h0;
      tagArray_2_28 <= 21'h0;
      tagArray_2_29 <= 21'h0;
      tagArray_2_30 <= 21'h0;
      tagArray_2_31 <= 21'h0;
      tagArray_2_32 <= 21'h0;
      tagArray_2_33 <= 21'h0;
      tagArray_2_34 <= 21'h0;
      tagArray_2_35 <= 21'h0;
      tagArray_2_36 <= 21'h0;
      tagArray_2_37 <= 21'h0;
      tagArray_2_38 <= 21'h0;
      tagArray_2_39 <= 21'h0;
      tagArray_2_40 <= 21'h0;
      tagArray_2_41 <= 21'h0;
      tagArray_2_42 <= 21'h0;
      tagArray_2_43 <= 21'h0;
      tagArray_2_44 <= 21'h0;
      tagArray_2_45 <= 21'h0;
      tagArray_2_46 <= 21'h0;
      tagArray_2_47 <= 21'h0;
      tagArray_2_48 <= 21'h0;
      tagArray_2_49 <= 21'h0;
      tagArray_2_50 <= 21'h0;
      tagArray_2_51 <= 21'h0;
      tagArray_2_52 <= 21'h0;
      tagArray_2_53 <= 21'h0;
      tagArray_2_54 <= 21'h0;
      tagArray_2_55 <= 21'h0;
      tagArray_2_56 <= 21'h0;
      tagArray_2_57 <= 21'h0;
      tagArray_2_58 <= 21'h0;
      tagArray_2_59 <= 21'h0;
      tagArray_2_60 <= 21'h0;
      tagArray_2_61 <= 21'h0;
      tagArray_2_62 <= 21'h0;
      tagArray_2_63 <= 21'h0;
      tagArray_3_0 <= 21'h0;
      tagArray_3_1 <= 21'h0;
      tagArray_3_2 <= 21'h0;
      tagArray_3_3 <= 21'h0;
      tagArray_3_4 <= 21'h0;
      tagArray_3_5 <= 21'h0;
      tagArray_3_6 <= 21'h0;
      tagArray_3_7 <= 21'h0;
      tagArray_3_8 <= 21'h0;
      tagArray_3_9 <= 21'h0;
      tagArray_3_10 <= 21'h0;
      tagArray_3_11 <= 21'h0;
      tagArray_3_12 <= 21'h0;
      tagArray_3_13 <= 21'h0;
      tagArray_3_14 <= 21'h0;
      tagArray_3_15 <= 21'h0;
      tagArray_3_16 <= 21'h0;
      tagArray_3_17 <= 21'h0;
      tagArray_3_18 <= 21'h0;
      tagArray_3_19 <= 21'h0;
      tagArray_3_20 <= 21'h0;
      tagArray_3_21 <= 21'h0;
      tagArray_3_22 <= 21'h0;
      tagArray_3_23 <= 21'h0;
      tagArray_3_24 <= 21'h0;
      tagArray_3_25 <= 21'h0;
      tagArray_3_26 <= 21'h0;
      tagArray_3_27 <= 21'h0;
      tagArray_3_28 <= 21'h0;
      tagArray_3_29 <= 21'h0;
      tagArray_3_30 <= 21'h0;
      tagArray_3_31 <= 21'h0;
      tagArray_3_32 <= 21'h0;
      tagArray_3_33 <= 21'h0;
      tagArray_3_34 <= 21'h0;
      tagArray_3_35 <= 21'h0;
      tagArray_3_36 <= 21'h0;
      tagArray_3_37 <= 21'h0;
      tagArray_3_38 <= 21'h0;
      tagArray_3_39 <= 21'h0;
      tagArray_3_40 <= 21'h0;
      tagArray_3_41 <= 21'h0;
      tagArray_3_42 <= 21'h0;
      tagArray_3_43 <= 21'h0;
      tagArray_3_44 <= 21'h0;
      tagArray_3_45 <= 21'h0;
      tagArray_3_46 <= 21'h0;
      tagArray_3_47 <= 21'h0;
      tagArray_3_48 <= 21'h0;
      tagArray_3_49 <= 21'h0;
      tagArray_3_50 <= 21'h0;
      tagArray_3_51 <= 21'h0;
      tagArray_3_52 <= 21'h0;
      tagArray_3_53 <= 21'h0;
      tagArray_3_54 <= 21'h0;
      tagArray_3_55 <= 21'h0;
      tagArray_3_56 <= 21'h0;
      tagArray_3_57 <= 21'h0;
      tagArray_3_58 <= 21'h0;
      tagArray_3_59 <= 21'h0;
      tagArray_3_60 <= 21'h0;
      tagArray_3_61 <= 21'h0;
      tagArray_3_62 <= 21'h0;
      tagArray_3_63 <= 21'h0;
      validArray_0_0 <= 1'h0;
      validArray_0_1 <= 1'h0;
      validArray_0_2 <= 1'h0;
      validArray_0_3 <= 1'h0;
      validArray_0_4 <= 1'h0;
      validArray_0_5 <= 1'h0;
      validArray_0_6 <= 1'h0;
      validArray_0_7 <= 1'h0;
      validArray_0_8 <= 1'h0;
      validArray_0_9 <= 1'h0;
      validArray_0_10 <= 1'h0;
      validArray_0_11 <= 1'h0;
      validArray_0_12 <= 1'h0;
      validArray_0_13 <= 1'h0;
      validArray_0_14 <= 1'h0;
      validArray_0_15 <= 1'h0;
      validArray_0_16 <= 1'h0;
      validArray_0_17 <= 1'h0;
      validArray_0_18 <= 1'h0;
      validArray_0_19 <= 1'h0;
      validArray_0_20 <= 1'h0;
      validArray_0_21 <= 1'h0;
      validArray_0_22 <= 1'h0;
      validArray_0_23 <= 1'h0;
      validArray_0_24 <= 1'h0;
      validArray_0_25 <= 1'h0;
      validArray_0_26 <= 1'h0;
      validArray_0_27 <= 1'h0;
      validArray_0_28 <= 1'h0;
      validArray_0_29 <= 1'h0;
      validArray_0_30 <= 1'h0;
      validArray_0_31 <= 1'h0;
      validArray_0_32 <= 1'h0;
      validArray_0_33 <= 1'h0;
      validArray_0_34 <= 1'h0;
      validArray_0_35 <= 1'h0;
      validArray_0_36 <= 1'h0;
      validArray_0_37 <= 1'h0;
      validArray_0_38 <= 1'h0;
      validArray_0_39 <= 1'h0;
      validArray_0_40 <= 1'h0;
      validArray_0_41 <= 1'h0;
      validArray_0_42 <= 1'h0;
      validArray_0_43 <= 1'h0;
      validArray_0_44 <= 1'h0;
      validArray_0_45 <= 1'h0;
      validArray_0_46 <= 1'h0;
      validArray_0_47 <= 1'h0;
      validArray_0_48 <= 1'h0;
      validArray_0_49 <= 1'h0;
      validArray_0_50 <= 1'h0;
      validArray_0_51 <= 1'h0;
      validArray_0_52 <= 1'h0;
      validArray_0_53 <= 1'h0;
      validArray_0_54 <= 1'h0;
      validArray_0_55 <= 1'h0;
      validArray_0_56 <= 1'h0;
      validArray_0_57 <= 1'h0;
      validArray_0_58 <= 1'h0;
      validArray_0_59 <= 1'h0;
      validArray_0_60 <= 1'h0;
      validArray_0_61 <= 1'h0;
      validArray_0_62 <= 1'h0;
      validArray_0_63 <= 1'h0;
      validArray_1_0 <= 1'h0;
      validArray_1_1 <= 1'h0;
      validArray_1_2 <= 1'h0;
      validArray_1_3 <= 1'h0;
      validArray_1_4 <= 1'h0;
      validArray_1_5 <= 1'h0;
      validArray_1_6 <= 1'h0;
      validArray_1_7 <= 1'h0;
      validArray_1_8 <= 1'h0;
      validArray_1_9 <= 1'h0;
      validArray_1_10 <= 1'h0;
      validArray_1_11 <= 1'h0;
      validArray_1_12 <= 1'h0;
      validArray_1_13 <= 1'h0;
      validArray_1_14 <= 1'h0;
      validArray_1_15 <= 1'h0;
      validArray_1_16 <= 1'h0;
      validArray_1_17 <= 1'h0;
      validArray_1_18 <= 1'h0;
      validArray_1_19 <= 1'h0;
      validArray_1_20 <= 1'h0;
      validArray_1_21 <= 1'h0;
      validArray_1_22 <= 1'h0;
      validArray_1_23 <= 1'h0;
      validArray_1_24 <= 1'h0;
      validArray_1_25 <= 1'h0;
      validArray_1_26 <= 1'h0;
      validArray_1_27 <= 1'h0;
      validArray_1_28 <= 1'h0;
      validArray_1_29 <= 1'h0;
      validArray_1_30 <= 1'h0;
      validArray_1_31 <= 1'h0;
      validArray_1_32 <= 1'h0;
      validArray_1_33 <= 1'h0;
      validArray_1_34 <= 1'h0;
      validArray_1_35 <= 1'h0;
      validArray_1_36 <= 1'h0;
      validArray_1_37 <= 1'h0;
      validArray_1_38 <= 1'h0;
      validArray_1_39 <= 1'h0;
      validArray_1_40 <= 1'h0;
      validArray_1_41 <= 1'h0;
      validArray_1_42 <= 1'h0;
      validArray_1_43 <= 1'h0;
      validArray_1_44 <= 1'h0;
      validArray_1_45 <= 1'h0;
      validArray_1_46 <= 1'h0;
      validArray_1_47 <= 1'h0;
      validArray_1_48 <= 1'h0;
      validArray_1_49 <= 1'h0;
      validArray_1_50 <= 1'h0;
      validArray_1_51 <= 1'h0;
      validArray_1_52 <= 1'h0;
      validArray_1_53 <= 1'h0;
      validArray_1_54 <= 1'h0;
      validArray_1_55 <= 1'h0;
      validArray_1_56 <= 1'h0;
      validArray_1_57 <= 1'h0;
      validArray_1_58 <= 1'h0;
      validArray_1_59 <= 1'h0;
      validArray_1_60 <= 1'h0;
      validArray_1_61 <= 1'h0;
      validArray_1_62 <= 1'h0;
      validArray_1_63 <= 1'h0;
      validArray_2_0 <= 1'h0;
      validArray_2_1 <= 1'h0;
      validArray_2_2 <= 1'h0;
      validArray_2_3 <= 1'h0;
      validArray_2_4 <= 1'h0;
      validArray_2_5 <= 1'h0;
      validArray_2_6 <= 1'h0;
      validArray_2_7 <= 1'h0;
      validArray_2_8 <= 1'h0;
      validArray_2_9 <= 1'h0;
      validArray_2_10 <= 1'h0;
      validArray_2_11 <= 1'h0;
      validArray_2_12 <= 1'h0;
      validArray_2_13 <= 1'h0;
      validArray_2_14 <= 1'h0;
      validArray_2_15 <= 1'h0;
      validArray_2_16 <= 1'h0;
      validArray_2_17 <= 1'h0;
      validArray_2_18 <= 1'h0;
      validArray_2_19 <= 1'h0;
      validArray_2_20 <= 1'h0;
      validArray_2_21 <= 1'h0;
      validArray_2_22 <= 1'h0;
      validArray_2_23 <= 1'h0;
      validArray_2_24 <= 1'h0;
      validArray_2_25 <= 1'h0;
      validArray_2_26 <= 1'h0;
      validArray_2_27 <= 1'h0;
      validArray_2_28 <= 1'h0;
      validArray_2_29 <= 1'h0;
      validArray_2_30 <= 1'h0;
      validArray_2_31 <= 1'h0;
      validArray_2_32 <= 1'h0;
      validArray_2_33 <= 1'h0;
      validArray_2_34 <= 1'h0;
      validArray_2_35 <= 1'h0;
      validArray_2_36 <= 1'h0;
      validArray_2_37 <= 1'h0;
      validArray_2_38 <= 1'h0;
      validArray_2_39 <= 1'h0;
      validArray_2_40 <= 1'h0;
      validArray_2_41 <= 1'h0;
      validArray_2_42 <= 1'h0;
      validArray_2_43 <= 1'h0;
      validArray_2_44 <= 1'h0;
      validArray_2_45 <= 1'h0;
      validArray_2_46 <= 1'h0;
      validArray_2_47 <= 1'h0;
      validArray_2_48 <= 1'h0;
      validArray_2_49 <= 1'h0;
      validArray_2_50 <= 1'h0;
      validArray_2_51 <= 1'h0;
      validArray_2_52 <= 1'h0;
      validArray_2_53 <= 1'h0;
      validArray_2_54 <= 1'h0;
      validArray_2_55 <= 1'h0;
      validArray_2_56 <= 1'h0;
      validArray_2_57 <= 1'h0;
      validArray_2_58 <= 1'h0;
      validArray_2_59 <= 1'h0;
      validArray_2_60 <= 1'h0;
      validArray_2_61 <= 1'h0;
      validArray_2_62 <= 1'h0;
      validArray_2_63 <= 1'h0;
      validArray_3_0 <= 1'h0;
      validArray_3_1 <= 1'h0;
      validArray_3_2 <= 1'h0;
      validArray_3_3 <= 1'h0;
      validArray_3_4 <= 1'h0;
      validArray_3_5 <= 1'h0;
      validArray_3_6 <= 1'h0;
      validArray_3_7 <= 1'h0;
      validArray_3_8 <= 1'h0;
      validArray_3_9 <= 1'h0;
      validArray_3_10 <= 1'h0;
      validArray_3_11 <= 1'h0;
      validArray_3_12 <= 1'h0;
      validArray_3_13 <= 1'h0;
      validArray_3_14 <= 1'h0;
      validArray_3_15 <= 1'h0;
      validArray_3_16 <= 1'h0;
      validArray_3_17 <= 1'h0;
      validArray_3_18 <= 1'h0;
      validArray_3_19 <= 1'h0;
      validArray_3_20 <= 1'h0;
      validArray_3_21 <= 1'h0;
      validArray_3_22 <= 1'h0;
      validArray_3_23 <= 1'h0;
      validArray_3_24 <= 1'h0;
      validArray_3_25 <= 1'h0;
      validArray_3_26 <= 1'h0;
      validArray_3_27 <= 1'h0;
      validArray_3_28 <= 1'h0;
      validArray_3_29 <= 1'h0;
      validArray_3_30 <= 1'h0;
      validArray_3_31 <= 1'h0;
      validArray_3_32 <= 1'h0;
      validArray_3_33 <= 1'h0;
      validArray_3_34 <= 1'h0;
      validArray_3_35 <= 1'h0;
      validArray_3_36 <= 1'h0;
      validArray_3_37 <= 1'h0;
      validArray_3_38 <= 1'h0;
      validArray_3_39 <= 1'h0;
      validArray_3_40 <= 1'h0;
      validArray_3_41 <= 1'h0;
      validArray_3_42 <= 1'h0;
      validArray_3_43 <= 1'h0;
      validArray_3_44 <= 1'h0;
      validArray_3_45 <= 1'h0;
      validArray_3_46 <= 1'h0;
      validArray_3_47 <= 1'h0;
      validArray_3_48 <= 1'h0;
      validArray_3_49 <= 1'h0;
      validArray_3_50 <= 1'h0;
      validArray_3_51 <= 1'h0;
      validArray_3_52 <= 1'h0;
      validArray_3_53 <= 1'h0;
      validArray_3_54 <= 1'h0;
      validArray_3_55 <= 1'h0;
      validArray_3_56 <= 1'h0;
      validArray_3_57 <= 1'h0;
      validArray_3_58 <= 1'h0;
      validArray_3_59 <= 1'h0;
      validArray_3_60 <= 1'h0;
      validArray_3_61 <= 1'h0;
      validArray_3_62 <= 1'h0;
      validArray_3_63 <= 1'h0;
      entryOff <= 3'h0;
      stateCache <= 3'h0;
    end
    else begin
      if ((|stateCache) & _GEN_11)
        replaceWayReg <= randomNum;
      randomNum <= randomNum + 2'h1;
      if (_GEN_14)
        tagArray_0_0 <= io_in_bits_addr[31:11];
      if (_GEN_16)
        tagArray_0_1 <= io_in_bits_addr[31:11];
      if (_GEN_18)
        tagArray_0_2 <= io_in_bits_addr[31:11];
      if (_GEN_20)
        tagArray_0_3 <= io_in_bits_addr[31:11];
      if (_GEN_22)
        tagArray_0_4 <= io_in_bits_addr[31:11];
      if (_GEN_24)
        tagArray_0_5 <= io_in_bits_addr[31:11];
      if (_GEN_26)
        tagArray_0_6 <= io_in_bits_addr[31:11];
      if (_GEN_28)
        tagArray_0_7 <= io_in_bits_addr[31:11];
      if (_GEN_30)
        tagArray_0_8 <= io_in_bits_addr[31:11];
      if (_GEN_32)
        tagArray_0_9 <= io_in_bits_addr[31:11];
      if (_GEN_34)
        tagArray_0_10 <= io_in_bits_addr[31:11];
      if (_GEN_36)
        tagArray_0_11 <= io_in_bits_addr[31:11];
      if (_GEN_38)
        tagArray_0_12 <= io_in_bits_addr[31:11];
      if (_GEN_40)
        tagArray_0_13 <= io_in_bits_addr[31:11];
      if (_GEN_42)
        tagArray_0_14 <= io_in_bits_addr[31:11];
      if (_GEN_44)
        tagArray_0_15 <= io_in_bits_addr[31:11];
      if (_GEN_46)
        tagArray_0_16 <= io_in_bits_addr[31:11];
      if (_GEN_48)
        tagArray_0_17 <= io_in_bits_addr[31:11];
      if (_GEN_50)
        tagArray_0_18 <= io_in_bits_addr[31:11];
      if (_GEN_52)
        tagArray_0_19 <= io_in_bits_addr[31:11];
      if (_GEN_54)
        tagArray_0_20 <= io_in_bits_addr[31:11];
      if (_GEN_56)
        tagArray_0_21 <= io_in_bits_addr[31:11];
      if (_GEN_58)
        tagArray_0_22 <= io_in_bits_addr[31:11];
      if (_GEN_60)
        tagArray_0_23 <= io_in_bits_addr[31:11];
      if (_GEN_62)
        tagArray_0_24 <= io_in_bits_addr[31:11];
      if (_GEN_64)
        tagArray_0_25 <= io_in_bits_addr[31:11];
      if (_GEN_66)
        tagArray_0_26 <= io_in_bits_addr[31:11];
      if (_GEN_68)
        tagArray_0_27 <= io_in_bits_addr[31:11];
      if (_GEN_70)
        tagArray_0_28 <= io_in_bits_addr[31:11];
      if (_GEN_72)
        tagArray_0_29 <= io_in_bits_addr[31:11];
      if (_GEN_74)
        tagArray_0_30 <= io_in_bits_addr[31:11];
      if (_GEN_76)
        tagArray_0_31 <= io_in_bits_addr[31:11];
      if (_GEN_78)
        tagArray_0_32 <= io_in_bits_addr[31:11];
      if (_GEN_80)
        tagArray_0_33 <= io_in_bits_addr[31:11];
      if (_GEN_82)
        tagArray_0_34 <= io_in_bits_addr[31:11];
      if (_GEN_84)
        tagArray_0_35 <= io_in_bits_addr[31:11];
      if (_GEN_86)
        tagArray_0_36 <= io_in_bits_addr[31:11];
      if (_GEN_88)
        tagArray_0_37 <= io_in_bits_addr[31:11];
      if (_GEN_90)
        tagArray_0_38 <= io_in_bits_addr[31:11];
      if (_GEN_92)
        tagArray_0_39 <= io_in_bits_addr[31:11];
      if (_GEN_94)
        tagArray_0_40 <= io_in_bits_addr[31:11];
      if (_GEN_96)
        tagArray_0_41 <= io_in_bits_addr[31:11];
      if (_GEN_98)
        tagArray_0_42 <= io_in_bits_addr[31:11];
      if (_GEN_100)
        tagArray_0_43 <= io_in_bits_addr[31:11];
      if (_GEN_102)
        tagArray_0_44 <= io_in_bits_addr[31:11];
      if (_GEN_104)
        tagArray_0_45 <= io_in_bits_addr[31:11];
      if (_GEN_106)
        tagArray_0_46 <= io_in_bits_addr[31:11];
      if (_GEN_108)
        tagArray_0_47 <= io_in_bits_addr[31:11];
      if (_GEN_110)
        tagArray_0_48 <= io_in_bits_addr[31:11];
      if (_GEN_112)
        tagArray_0_49 <= io_in_bits_addr[31:11];
      if (_GEN_114)
        tagArray_0_50 <= io_in_bits_addr[31:11];
      if (_GEN_116)
        tagArray_0_51 <= io_in_bits_addr[31:11];
      if (_GEN_118)
        tagArray_0_52 <= io_in_bits_addr[31:11];
      if (_GEN_120)
        tagArray_0_53 <= io_in_bits_addr[31:11];
      if (_GEN_122)
        tagArray_0_54 <= io_in_bits_addr[31:11];
      if (_GEN_124)
        tagArray_0_55 <= io_in_bits_addr[31:11];
      if (_GEN_126)
        tagArray_0_56 <= io_in_bits_addr[31:11];
      if (_GEN_128)
        tagArray_0_57 <= io_in_bits_addr[31:11];
      if (_GEN_130)
        tagArray_0_58 <= io_in_bits_addr[31:11];
      if (_GEN_132)
        tagArray_0_59 <= io_in_bits_addr[31:11];
      if (_GEN_134)
        tagArray_0_60 <= io_in_bits_addr[31:11];
      if (_GEN_136)
        tagArray_0_61 <= io_in_bits_addr[31:11];
      if (_GEN_138)
        tagArray_0_62 <= io_in_bits_addr[31:11];
      if (_GEN_139)
        tagArray_0_63 <= io_in_bits_addr[31:11];
      if (_GEN_141)
        tagArray_1_0 <= io_in_bits_addr[31:11];
      if (_GEN_142)
        tagArray_1_1 <= io_in_bits_addr[31:11];
      if (_GEN_143)
        tagArray_1_2 <= io_in_bits_addr[31:11];
      if (_GEN_144)
        tagArray_1_3 <= io_in_bits_addr[31:11];
      if (_GEN_145)
        tagArray_1_4 <= io_in_bits_addr[31:11];
      if (_GEN_146)
        tagArray_1_5 <= io_in_bits_addr[31:11];
      if (_GEN_147)
        tagArray_1_6 <= io_in_bits_addr[31:11];
      if (_GEN_148)
        tagArray_1_7 <= io_in_bits_addr[31:11];
      if (_GEN_149)
        tagArray_1_8 <= io_in_bits_addr[31:11];
      if (_GEN_150)
        tagArray_1_9 <= io_in_bits_addr[31:11];
      if (_GEN_151)
        tagArray_1_10 <= io_in_bits_addr[31:11];
      if (_GEN_152)
        tagArray_1_11 <= io_in_bits_addr[31:11];
      if (_GEN_153)
        tagArray_1_12 <= io_in_bits_addr[31:11];
      if (_GEN_154)
        tagArray_1_13 <= io_in_bits_addr[31:11];
      if (_GEN_155)
        tagArray_1_14 <= io_in_bits_addr[31:11];
      if (_GEN_156)
        tagArray_1_15 <= io_in_bits_addr[31:11];
      if (_GEN_157)
        tagArray_1_16 <= io_in_bits_addr[31:11];
      if (_GEN_158)
        tagArray_1_17 <= io_in_bits_addr[31:11];
      if (_GEN_159)
        tagArray_1_18 <= io_in_bits_addr[31:11];
      if (_GEN_160)
        tagArray_1_19 <= io_in_bits_addr[31:11];
      if (_GEN_161)
        tagArray_1_20 <= io_in_bits_addr[31:11];
      if (_GEN_162)
        tagArray_1_21 <= io_in_bits_addr[31:11];
      if (_GEN_163)
        tagArray_1_22 <= io_in_bits_addr[31:11];
      if (_GEN_164)
        tagArray_1_23 <= io_in_bits_addr[31:11];
      if (_GEN_165)
        tagArray_1_24 <= io_in_bits_addr[31:11];
      if (_GEN_166)
        tagArray_1_25 <= io_in_bits_addr[31:11];
      if (_GEN_167)
        tagArray_1_26 <= io_in_bits_addr[31:11];
      if (_GEN_168)
        tagArray_1_27 <= io_in_bits_addr[31:11];
      if (_GEN_169)
        tagArray_1_28 <= io_in_bits_addr[31:11];
      if (_GEN_170)
        tagArray_1_29 <= io_in_bits_addr[31:11];
      if (_GEN_171)
        tagArray_1_30 <= io_in_bits_addr[31:11];
      if (_GEN_172)
        tagArray_1_31 <= io_in_bits_addr[31:11];
      if (_GEN_173)
        tagArray_1_32 <= io_in_bits_addr[31:11];
      if (_GEN_174)
        tagArray_1_33 <= io_in_bits_addr[31:11];
      if (_GEN_175)
        tagArray_1_34 <= io_in_bits_addr[31:11];
      if (_GEN_176)
        tagArray_1_35 <= io_in_bits_addr[31:11];
      if (_GEN_177)
        tagArray_1_36 <= io_in_bits_addr[31:11];
      if (_GEN_178)
        tagArray_1_37 <= io_in_bits_addr[31:11];
      if (_GEN_179)
        tagArray_1_38 <= io_in_bits_addr[31:11];
      if (_GEN_180)
        tagArray_1_39 <= io_in_bits_addr[31:11];
      if (_GEN_181)
        tagArray_1_40 <= io_in_bits_addr[31:11];
      if (_GEN_182)
        tagArray_1_41 <= io_in_bits_addr[31:11];
      if (_GEN_183)
        tagArray_1_42 <= io_in_bits_addr[31:11];
      if (_GEN_184)
        tagArray_1_43 <= io_in_bits_addr[31:11];
      if (_GEN_185)
        tagArray_1_44 <= io_in_bits_addr[31:11];
      if (_GEN_186)
        tagArray_1_45 <= io_in_bits_addr[31:11];
      if (_GEN_187)
        tagArray_1_46 <= io_in_bits_addr[31:11];
      if (_GEN_188)
        tagArray_1_47 <= io_in_bits_addr[31:11];
      if (_GEN_189)
        tagArray_1_48 <= io_in_bits_addr[31:11];
      if (_GEN_190)
        tagArray_1_49 <= io_in_bits_addr[31:11];
      if (_GEN_191)
        tagArray_1_50 <= io_in_bits_addr[31:11];
      if (_GEN_192)
        tagArray_1_51 <= io_in_bits_addr[31:11];
      if (_GEN_193)
        tagArray_1_52 <= io_in_bits_addr[31:11];
      if (_GEN_194)
        tagArray_1_53 <= io_in_bits_addr[31:11];
      if (_GEN_195)
        tagArray_1_54 <= io_in_bits_addr[31:11];
      if (_GEN_196)
        tagArray_1_55 <= io_in_bits_addr[31:11];
      if (_GEN_197)
        tagArray_1_56 <= io_in_bits_addr[31:11];
      if (_GEN_198)
        tagArray_1_57 <= io_in_bits_addr[31:11];
      if (_GEN_199)
        tagArray_1_58 <= io_in_bits_addr[31:11];
      if (_GEN_200)
        tagArray_1_59 <= io_in_bits_addr[31:11];
      if (_GEN_201)
        tagArray_1_60 <= io_in_bits_addr[31:11];
      if (_GEN_202)
        tagArray_1_61 <= io_in_bits_addr[31:11];
      if (_GEN_203)
        tagArray_1_62 <= io_in_bits_addr[31:11];
      if (_GEN_204)
        tagArray_1_63 <= io_in_bits_addr[31:11];
      if (_GEN_206)
        tagArray_2_0 <= io_in_bits_addr[31:11];
      if (_GEN_207)
        tagArray_2_1 <= io_in_bits_addr[31:11];
      if (_GEN_208)
        tagArray_2_2 <= io_in_bits_addr[31:11];
      if (_GEN_209)
        tagArray_2_3 <= io_in_bits_addr[31:11];
      if (_GEN_210)
        tagArray_2_4 <= io_in_bits_addr[31:11];
      if (_GEN_211)
        tagArray_2_5 <= io_in_bits_addr[31:11];
      if (_GEN_212)
        tagArray_2_6 <= io_in_bits_addr[31:11];
      if (_GEN_213)
        tagArray_2_7 <= io_in_bits_addr[31:11];
      if (_GEN_214)
        tagArray_2_8 <= io_in_bits_addr[31:11];
      if (_GEN_215)
        tagArray_2_9 <= io_in_bits_addr[31:11];
      if (_GEN_216)
        tagArray_2_10 <= io_in_bits_addr[31:11];
      if (_GEN_217)
        tagArray_2_11 <= io_in_bits_addr[31:11];
      if (_GEN_218)
        tagArray_2_12 <= io_in_bits_addr[31:11];
      if (_GEN_219)
        tagArray_2_13 <= io_in_bits_addr[31:11];
      if (_GEN_220)
        tagArray_2_14 <= io_in_bits_addr[31:11];
      if (_GEN_221)
        tagArray_2_15 <= io_in_bits_addr[31:11];
      if (_GEN_222)
        tagArray_2_16 <= io_in_bits_addr[31:11];
      if (_GEN_223)
        tagArray_2_17 <= io_in_bits_addr[31:11];
      if (_GEN_224)
        tagArray_2_18 <= io_in_bits_addr[31:11];
      if (_GEN_225)
        tagArray_2_19 <= io_in_bits_addr[31:11];
      if (_GEN_226)
        tagArray_2_20 <= io_in_bits_addr[31:11];
      if (_GEN_227)
        tagArray_2_21 <= io_in_bits_addr[31:11];
      if (_GEN_228)
        tagArray_2_22 <= io_in_bits_addr[31:11];
      if (_GEN_229)
        tagArray_2_23 <= io_in_bits_addr[31:11];
      if (_GEN_230)
        tagArray_2_24 <= io_in_bits_addr[31:11];
      if (_GEN_231)
        tagArray_2_25 <= io_in_bits_addr[31:11];
      if (_GEN_232)
        tagArray_2_26 <= io_in_bits_addr[31:11];
      if (_GEN_233)
        tagArray_2_27 <= io_in_bits_addr[31:11];
      if (_GEN_234)
        tagArray_2_28 <= io_in_bits_addr[31:11];
      if (_GEN_235)
        tagArray_2_29 <= io_in_bits_addr[31:11];
      if (_GEN_236)
        tagArray_2_30 <= io_in_bits_addr[31:11];
      if (_GEN_237)
        tagArray_2_31 <= io_in_bits_addr[31:11];
      if (_GEN_238)
        tagArray_2_32 <= io_in_bits_addr[31:11];
      if (_GEN_239)
        tagArray_2_33 <= io_in_bits_addr[31:11];
      if (_GEN_240)
        tagArray_2_34 <= io_in_bits_addr[31:11];
      if (_GEN_241)
        tagArray_2_35 <= io_in_bits_addr[31:11];
      if (_GEN_242)
        tagArray_2_36 <= io_in_bits_addr[31:11];
      if (_GEN_243)
        tagArray_2_37 <= io_in_bits_addr[31:11];
      if (_GEN_244)
        tagArray_2_38 <= io_in_bits_addr[31:11];
      if (_GEN_245)
        tagArray_2_39 <= io_in_bits_addr[31:11];
      if (_GEN_246)
        tagArray_2_40 <= io_in_bits_addr[31:11];
      if (_GEN_247)
        tagArray_2_41 <= io_in_bits_addr[31:11];
      if (_GEN_248)
        tagArray_2_42 <= io_in_bits_addr[31:11];
      if (_GEN_249)
        tagArray_2_43 <= io_in_bits_addr[31:11];
      if (_GEN_250)
        tagArray_2_44 <= io_in_bits_addr[31:11];
      if (_GEN_251)
        tagArray_2_45 <= io_in_bits_addr[31:11];
      if (_GEN_252)
        tagArray_2_46 <= io_in_bits_addr[31:11];
      if (_GEN_253)
        tagArray_2_47 <= io_in_bits_addr[31:11];
      if (_GEN_254)
        tagArray_2_48 <= io_in_bits_addr[31:11];
      if (_GEN_255)
        tagArray_2_49 <= io_in_bits_addr[31:11];
      if (_GEN_256)
        tagArray_2_50 <= io_in_bits_addr[31:11];
      if (_GEN_257)
        tagArray_2_51 <= io_in_bits_addr[31:11];
      if (_GEN_258)
        tagArray_2_52 <= io_in_bits_addr[31:11];
      if (_GEN_259)
        tagArray_2_53 <= io_in_bits_addr[31:11];
      if (_GEN_260)
        tagArray_2_54 <= io_in_bits_addr[31:11];
      if (_GEN_261)
        tagArray_2_55 <= io_in_bits_addr[31:11];
      if (_GEN_262)
        tagArray_2_56 <= io_in_bits_addr[31:11];
      if (_GEN_263)
        tagArray_2_57 <= io_in_bits_addr[31:11];
      if (_GEN_264)
        tagArray_2_58 <= io_in_bits_addr[31:11];
      if (_GEN_265)
        tagArray_2_59 <= io_in_bits_addr[31:11];
      if (_GEN_266)
        tagArray_2_60 <= io_in_bits_addr[31:11];
      if (_GEN_267)
        tagArray_2_61 <= io_in_bits_addr[31:11];
      if (_GEN_268)
        tagArray_2_62 <= io_in_bits_addr[31:11];
      if (_GEN_269)
        tagArray_2_63 <= io_in_bits_addr[31:11];
      if (_GEN_270)
        tagArray_3_0 <= io_in_bits_addr[31:11];
      if (_GEN_271)
        tagArray_3_1 <= io_in_bits_addr[31:11];
      if (_GEN_272)
        tagArray_3_2 <= io_in_bits_addr[31:11];
      if (_GEN_273)
        tagArray_3_3 <= io_in_bits_addr[31:11];
      if (_GEN_274)
        tagArray_3_4 <= io_in_bits_addr[31:11];
      if (_GEN_275)
        tagArray_3_5 <= io_in_bits_addr[31:11];
      if (_GEN_276)
        tagArray_3_6 <= io_in_bits_addr[31:11];
      if (_GEN_277)
        tagArray_3_7 <= io_in_bits_addr[31:11];
      if (_GEN_278)
        tagArray_3_8 <= io_in_bits_addr[31:11];
      if (_GEN_279)
        tagArray_3_9 <= io_in_bits_addr[31:11];
      if (_GEN_280)
        tagArray_3_10 <= io_in_bits_addr[31:11];
      if (_GEN_281)
        tagArray_3_11 <= io_in_bits_addr[31:11];
      if (_GEN_282)
        tagArray_3_12 <= io_in_bits_addr[31:11];
      if (_GEN_283)
        tagArray_3_13 <= io_in_bits_addr[31:11];
      if (_GEN_284)
        tagArray_3_14 <= io_in_bits_addr[31:11];
      if (_GEN_285)
        tagArray_3_15 <= io_in_bits_addr[31:11];
      if (_GEN_286)
        tagArray_3_16 <= io_in_bits_addr[31:11];
      if (_GEN_287)
        tagArray_3_17 <= io_in_bits_addr[31:11];
      if (_GEN_288)
        tagArray_3_18 <= io_in_bits_addr[31:11];
      if (_GEN_289)
        tagArray_3_19 <= io_in_bits_addr[31:11];
      if (_GEN_290)
        tagArray_3_20 <= io_in_bits_addr[31:11];
      if (_GEN_291)
        tagArray_3_21 <= io_in_bits_addr[31:11];
      if (_GEN_292)
        tagArray_3_22 <= io_in_bits_addr[31:11];
      if (_GEN_293)
        tagArray_3_23 <= io_in_bits_addr[31:11];
      if (_GEN_294)
        tagArray_3_24 <= io_in_bits_addr[31:11];
      if (_GEN_295)
        tagArray_3_25 <= io_in_bits_addr[31:11];
      if (_GEN_296)
        tagArray_3_26 <= io_in_bits_addr[31:11];
      if (_GEN_297)
        tagArray_3_27 <= io_in_bits_addr[31:11];
      if (_GEN_298)
        tagArray_3_28 <= io_in_bits_addr[31:11];
      if (_GEN_299)
        tagArray_3_29 <= io_in_bits_addr[31:11];
      if (_GEN_300)
        tagArray_3_30 <= io_in_bits_addr[31:11];
      if (_GEN_301)
        tagArray_3_31 <= io_in_bits_addr[31:11];
      if (_GEN_302)
        tagArray_3_32 <= io_in_bits_addr[31:11];
      if (_GEN_303)
        tagArray_3_33 <= io_in_bits_addr[31:11];
      if (_GEN_304)
        tagArray_3_34 <= io_in_bits_addr[31:11];
      if (_GEN_305)
        tagArray_3_35 <= io_in_bits_addr[31:11];
      if (_GEN_306)
        tagArray_3_36 <= io_in_bits_addr[31:11];
      if (_GEN_307)
        tagArray_3_37 <= io_in_bits_addr[31:11];
      if (_GEN_308)
        tagArray_3_38 <= io_in_bits_addr[31:11];
      if (_GEN_309)
        tagArray_3_39 <= io_in_bits_addr[31:11];
      if (_GEN_310)
        tagArray_3_40 <= io_in_bits_addr[31:11];
      if (_GEN_311)
        tagArray_3_41 <= io_in_bits_addr[31:11];
      if (_GEN_312)
        tagArray_3_42 <= io_in_bits_addr[31:11];
      if (_GEN_313)
        tagArray_3_43 <= io_in_bits_addr[31:11];
      if (_GEN_314)
        tagArray_3_44 <= io_in_bits_addr[31:11];
      if (_GEN_315)
        tagArray_3_45 <= io_in_bits_addr[31:11];
      if (_GEN_316)
        tagArray_3_46 <= io_in_bits_addr[31:11];
      if (_GEN_317)
        tagArray_3_47 <= io_in_bits_addr[31:11];
      if (_GEN_318)
        tagArray_3_48 <= io_in_bits_addr[31:11];
      if (_GEN_319)
        tagArray_3_49 <= io_in_bits_addr[31:11];
      if (_GEN_320)
        tagArray_3_50 <= io_in_bits_addr[31:11];
      if (_GEN_321)
        tagArray_3_51 <= io_in_bits_addr[31:11];
      if (_GEN_322)
        tagArray_3_52 <= io_in_bits_addr[31:11];
      if (_GEN_323)
        tagArray_3_53 <= io_in_bits_addr[31:11];
      if (_GEN_324)
        tagArray_3_54 <= io_in_bits_addr[31:11];
      if (_GEN_325)
        tagArray_3_55 <= io_in_bits_addr[31:11];
      if (_GEN_326)
        tagArray_3_56 <= io_in_bits_addr[31:11];
      if (_GEN_327)
        tagArray_3_57 <= io_in_bits_addr[31:11];
      if (_GEN_328)
        tagArray_3_58 <= io_in_bits_addr[31:11];
      if (_GEN_329)
        tagArray_3_59 <= io_in_bits_addr[31:11];
      if (_GEN_330)
        tagArray_3_60 <= io_in_bits_addr[31:11];
      if (_GEN_331)
        tagArray_3_61 <= io_in_bits_addr[31:11];
      if (_GEN_332)
        tagArray_3_62 <= io_in_bits_addr[31:11];
      if (_GEN_333)
        tagArray_3_63 <= io_in_bits_addr[31:11];
      validArray_0_0 <= _GEN_14 | validArray_0_0;
      validArray_0_1 <= _GEN_16 | validArray_0_1;
      validArray_0_2 <= _GEN_18 | validArray_0_2;
      validArray_0_3 <= _GEN_20 | validArray_0_3;
      validArray_0_4 <= _GEN_22 | validArray_0_4;
      validArray_0_5 <= _GEN_24 | validArray_0_5;
      validArray_0_6 <= _GEN_26 | validArray_0_6;
      validArray_0_7 <= _GEN_28 | validArray_0_7;
      validArray_0_8 <= _GEN_30 | validArray_0_8;
      validArray_0_9 <= _GEN_32 | validArray_0_9;
      validArray_0_10 <= _GEN_34 | validArray_0_10;
      validArray_0_11 <= _GEN_36 | validArray_0_11;
      validArray_0_12 <= _GEN_38 | validArray_0_12;
      validArray_0_13 <= _GEN_40 | validArray_0_13;
      validArray_0_14 <= _GEN_42 | validArray_0_14;
      validArray_0_15 <= _GEN_44 | validArray_0_15;
      validArray_0_16 <= _GEN_46 | validArray_0_16;
      validArray_0_17 <= _GEN_48 | validArray_0_17;
      validArray_0_18 <= _GEN_50 | validArray_0_18;
      validArray_0_19 <= _GEN_52 | validArray_0_19;
      validArray_0_20 <= _GEN_54 | validArray_0_20;
      validArray_0_21 <= _GEN_56 | validArray_0_21;
      validArray_0_22 <= _GEN_58 | validArray_0_22;
      validArray_0_23 <= _GEN_60 | validArray_0_23;
      validArray_0_24 <= _GEN_62 | validArray_0_24;
      validArray_0_25 <= _GEN_64 | validArray_0_25;
      validArray_0_26 <= _GEN_66 | validArray_0_26;
      validArray_0_27 <= _GEN_68 | validArray_0_27;
      validArray_0_28 <= _GEN_70 | validArray_0_28;
      validArray_0_29 <= _GEN_72 | validArray_0_29;
      validArray_0_30 <= _GEN_74 | validArray_0_30;
      validArray_0_31 <= _GEN_76 | validArray_0_31;
      validArray_0_32 <= _GEN_78 | validArray_0_32;
      validArray_0_33 <= _GEN_80 | validArray_0_33;
      validArray_0_34 <= _GEN_82 | validArray_0_34;
      validArray_0_35 <= _GEN_84 | validArray_0_35;
      validArray_0_36 <= _GEN_86 | validArray_0_36;
      validArray_0_37 <= _GEN_88 | validArray_0_37;
      validArray_0_38 <= _GEN_90 | validArray_0_38;
      validArray_0_39 <= _GEN_92 | validArray_0_39;
      validArray_0_40 <= _GEN_94 | validArray_0_40;
      validArray_0_41 <= _GEN_96 | validArray_0_41;
      validArray_0_42 <= _GEN_98 | validArray_0_42;
      validArray_0_43 <= _GEN_100 | validArray_0_43;
      validArray_0_44 <= _GEN_102 | validArray_0_44;
      validArray_0_45 <= _GEN_104 | validArray_0_45;
      validArray_0_46 <= _GEN_106 | validArray_0_46;
      validArray_0_47 <= _GEN_108 | validArray_0_47;
      validArray_0_48 <= _GEN_110 | validArray_0_48;
      validArray_0_49 <= _GEN_112 | validArray_0_49;
      validArray_0_50 <= _GEN_114 | validArray_0_50;
      validArray_0_51 <= _GEN_116 | validArray_0_51;
      validArray_0_52 <= _GEN_118 | validArray_0_52;
      validArray_0_53 <= _GEN_120 | validArray_0_53;
      validArray_0_54 <= _GEN_122 | validArray_0_54;
      validArray_0_55 <= _GEN_124 | validArray_0_55;
      validArray_0_56 <= _GEN_126 | validArray_0_56;
      validArray_0_57 <= _GEN_128 | validArray_0_57;
      validArray_0_58 <= _GEN_130 | validArray_0_58;
      validArray_0_59 <= _GEN_132 | validArray_0_59;
      validArray_0_60 <= _GEN_134 | validArray_0_60;
      validArray_0_61 <= _GEN_136 | validArray_0_61;
      validArray_0_62 <= _GEN_138 | validArray_0_62;
      validArray_0_63 <= _GEN_139 | validArray_0_63;
      validArray_1_0 <= _GEN_141 | validArray_1_0;
      validArray_1_1 <= _GEN_142 | validArray_1_1;
      validArray_1_2 <= _GEN_143 | validArray_1_2;
      validArray_1_3 <= _GEN_144 | validArray_1_3;
      validArray_1_4 <= _GEN_145 | validArray_1_4;
      validArray_1_5 <= _GEN_146 | validArray_1_5;
      validArray_1_6 <= _GEN_147 | validArray_1_6;
      validArray_1_7 <= _GEN_148 | validArray_1_7;
      validArray_1_8 <= _GEN_149 | validArray_1_8;
      validArray_1_9 <= _GEN_150 | validArray_1_9;
      validArray_1_10 <= _GEN_151 | validArray_1_10;
      validArray_1_11 <= _GEN_152 | validArray_1_11;
      validArray_1_12 <= _GEN_153 | validArray_1_12;
      validArray_1_13 <= _GEN_154 | validArray_1_13;
      validArray_1_14 <= _GEN_155 | validArray_1_14;
      validArray_1_15 <= _GEN_156 | validArray_1_15;
      validArray_1_16 <= _GEN_157 | validArray_1_16;
      validArray_1_17 <= _GEN_158 | validArray_1_17;
      validArray_1_18 <= _GEN_159 | validArray_1_18;
      validArray_1_19 <= _GEN_160 | validArray_1_19;
      validArray_1_20 <= _GEN_161 | validArray_1_20;
      validArray_1_21 <= _GEN_162 | validArray_1_21;
      validArray_1_22 <= _GEN_163 | validArray_1_22;
      validArray_1_23 <= _GEN_164 | validArray_1_23;
      validArray_1_24 <= _GEN_165 | validArray_1_24;
      validArray_1_25 <= _GEN_166 | validArray_1_25;
      validArray_1_26 <= _GEN_167 | validArray_1_26;
      validArray_1_27 <= _GEN_168 | validArray_1_27;
      validArray_1_28 <= _GEN_169 | validArray_1_28;
      validArray_1_29 <= _GEN_170 | validArray_1_29;
      validArray_1_30 <= _GEN_171 | validArray_1_30;
      validArray_1_31 <= _GEN_172 | validArray_1_31;
      validArray_1_32 <= _GEN_173 | validArray_1_32;
      validArray_1_33 <= _GEN_174 | validArray_1_33;
      validArray_1_34 <= _GEN_175 | validArray_1_34;
      validArray_1_35 <= _GEN_176 | validArray_1_35;
      validArray_1_36 <= _GEN_177 | validArray_1_36;
      validArray_1_37 <= _GEN_178 | validArray_1_37;
      validArray_1_38 <= _GEN_179 | validArray_1_38;
      validArray_1_39 <= _GEN_180 | validArray_1_39;
      validArray_1_40 <= _GEN_181 | validArray_1_40;
      validArray_1_41 <= _GEN_182 | validArray_1_41;
      validArray_1_42 <= _GEN_183 | validArray_1_42;
      validArray_1_43 <= _GEN_184 | validArray_1_43;
      validArray_1_44 <= _GEN_185 | validArray_1_44;
      validArray_1_45 <= _GEN_186 | validArray_1_45;
      validArray_1_46 <= _GEN_187 | validArray_1_46;
      validArray_1_47 <= _GEN_188 | validArray_1_47;
      validArray_1_48 <= _GEN_189 | validArray_1_48;
      validArray_1_49 <= _GEN_190 | validArray_1_49;
      validArray_1_50 <= _GEN_191 | validArray_1_50;
      validArray_1_51 <= _GEN_192 | validArray_1_51;
      validArray_1_52 <= _GEN_193 | validArray_1_52;
      validArray_1_53 <= _GEN_194 | validArray_1_53;
      validArray_1_54 <= _GEN_195 | validArray_1_54;
      validArray_1_55 <= _GEN_196 | validArray_1_55;
      validArray_1_56 <= _GEN_197 | validArray_1_56;
      validArray_1_57 <= _GEN_198 | validArray_1_57;
      validArray_1_58 <= _GEN_199 | validArray_1_58;
      validArray_1_59 <= _GEN_200 | validArray_1_59;
      validArray_1_60 <= _GEN_201 | validArray_1_60;
      validArray_1_61 <= _GEN_202 | validArray_1_61;
      validArray_1_62 <= _GEN_203 | validArray_1_62;
      validArray_1_63 <= _GEN_204 | validArray_1_63;
      validArray_2_0 <= _GEN_206 | validArray_2_0;
      validArray_2_1 <= _GEN_207 | validArray_2_1;
      validArray_2_2 <= _GEN_208 | validArray_2_2;
      validArray_2_3 <= _GEN_209 | validArray_2_3;
      validArray_2_4 <= _GEN_210 | validArray_2_4;
      validArray_2_5 <= _GEN_211 | validArray_2_5;
      validArray_2_6 <= _GEN_212 | validArray_2_6;
      validArray_2_7 <= _GEN_213 | validArray_2_7;
      validArray_2_8 <= _GEN_214 | validArray_2_8;
      validArray_2_9 <= _GEN_215 | validArray_2_9;
      validArray_2_10 <= _GEN_216 | validArray_2_10;
      validArray_2_11 <= _GEN_217 | validArray_2_11;
      validArray_2_12 <= _GEN_218 | validArray_2_12;
      validArray_2_13 <= _GEN_219 | validArray_2_13;
      validArray_2_14 <= _GEN_220 | validArray_2_14;
      validArray_2_15 <= _GEN_221 | validArray_2_15;
      validArray_2_16 <= _GEN_222 | validArray_2_16;
      validArray_2_17 <= _GEN_223 | validArray_2_17;
      validArray_2_18 <= _GEN_224 | validArray_2_18;
      validArray_2_19 <= _GEN_225 | validArray_2_19;
      validArray_2_20 <= _GEN_226 | validArray_2_20;
      validArray_2_21 <= _GEN_227 | validArray_2_21;
      validArray_2_22 <= _GEN_228 | validArray_2_22;
      validArray_2_23 <= _GEN_229 | validArray_2_23;
      validArray_2_24 <= _GEN_230 | validArray_2_24;
      validArray_2_25 <= _GEN_231 | validArray_2_25;
      validArray_2_26 <= _GEN_232 | validArray_2_26;
      validArray_2_27 <= _GEN_233 | validArray_2_27;
      validArray_2_28 <= _GEN_234 | validArray_2_28;
      validArray_2_29 <= _GEN_235 | validArray_2_29;
      validArray_2_30 <= _GEN_236 | validArray_2_30;
      validArray_2_31 <= _GEN_237 | validArray_2_31;
      validArray_2_32 <= _GEN_238 | validArray_2_32;
      validArray_2_33 <= _GEN_239 | validArray_2_33;
      validArray_2_34 <= _GEN_240 | validArray_2_34;
      validArray_2_35 <= _GEN_241 | validArray_2_35;
      validArray_2_36 <= _GEN_242 | validArray_2_36;
      validArray_2_37 <= _GEN_243 | validArray_2_37;
      validArray_2_38 <= _GEN_244 | validArray_2_38;
      validArray_2_39 <= _GEN_245 | validArray_2_39;
      validArray_2_40 <= _GEN_246 | validArray_2_40;
      validArray_2_41 <= _GEN_247 | validArray_2_41;
      validArray_2_42 <= _GEN_248 | validArray_2_42;
      validArray_2_43 <= _GEN_249 | validArray_2_43;
      validArray_2_44 <= _GEN_250 | validArray_2_44;
      validArray_2_45 <= _GEN_251 | validArray_2_45;
      validArray_2_46 <= _GEN_252 | validArray_2_46;
      validArray_2_47 <= _GEN_253 | validArray_2_47;
      validArray_2_48 <= _GEN_254 | validArray_2_48;
      validArray_2_49 <= _GEN_255 | validArray_2_49;
      validArray_2_50 <= _GEN_256 | validArray_2_50;
      validArray_2_51 <= _GEN_257 | validArray_2_51;
      validArray_2_52 <= _GEN_258 | validArray_2_52;
      validArray_2_53 <= _GEN_259 | validArray_2_53;
      validArray_2_54 <= _GEN_260 | validArray_2_54;
      validArray_2_55 <= _GEN_261 | validArray_2_55;
      validArray_2_56 <= _GEN_262 | validArray_2_56;
      validArray_2_57 <= _GEN_263 | validArray_2_57;
      validArray_2_58 <= _GEN_264 | validArray_2_58;
      validArray_2_59 <= _GEN_265 | validArray_2_59;
      validArray_2_60 <= _GEN_266 | validArray_2_60;
      validArray_2_61 <= _GEN_267 | validArray_2_61;
      validArray_2_62 <= _GEN_268 | validArray_2_62;
      validArray_2_63 <= _GEN_269 | validArray_2_63;
      validArray_3_0 <= _GEN_270 | validArray_3_0;
      validArray_3_1 <= _GEN_271 | validArray_3_1;
      validArray_3_2 <= _GEN_272 | validArray_3_2;
      validArray_3_3 <= _GEN_273 | validArray_3_3;
      validArray_3_4 <= _GEN_274 | validArray_3_4;
      validArray_3_5 <= _GEN_275 | validArray_3_5;
      validArray_3_6 <= _GEN_276 | validArray_3_6;
      validArray_3_7 <= _GEN_277 | validArray_3_7;
      validArray_3_8 <= _GEN_278 | validArray_3_8;
      validArray_3_9 <= _GEN_279 | validArray_3_9;
      validArray_3_10 <= _GEN_280 | validArray_3_10;
      validArray_3_11 <= _GEN_281 | validArray_3_11;
      validArray_3_12 <= _GEN_282 | validArray_3_12;
      validArray_3_13 <= _GEN_283 | validArray_3_13;
      validArray_3_14 <= _GEN_284 | validArray_3_14;
      validArray_3_15 <= _GEN_285 | validArray_3_15;
      validArray_3_16 <= _GEN_286 | validArray_3_16;
      validArray_3_17 <= _GEN_287 | validArray_3_17;
      validArray_3_18 <= _GEN_288 | validArray_3_18;
      validArray_3_19 <= _GEN_289 | validArray_3_19;
      validArray_3_20 <= _GEN_290 | validArray_3_20;
      validArray_3_21 <= _GEN_291 | validArray_3_21;
      validArray_3_22 <= _GEN_292 | validArray_3_22;
      validArray_3_23 <= _GEN_293 | validArray_3_23;
      validArray_3_24 <= _GEN_294 | validArray_3_24;
      validArray_3_25 <= _GEN_295 | validArray_3_25;
      validArray_3_26 <= _GEN_296 | validArray_3_26;
      validArray_3_27 <= _GEN_297 | validArray_3_27;
      validArray_3_28 <= _GEN_298 | validArray_3_28;
      validArray_3_29 <= _GEN_299 | validArray_3_29;
      validArray_3_30 <= _GEN_300 | validArray_3_30;
      validArray_3_31 <= _GEN_301 | validArray_3_31;
      validArray_3_32 <= _GEN_302 | validArray_3_32;
      validArray_3_33 <= _GEN_303 | validArray_3_33;
      validArray_3_34 <= _GEN_304 | validArray_3_34;
      validArray_3_35 <= _GEN_305 | validArray_3_35;
      validArray_3_36 <= _GEN_306 | validArray_3_36;
      validArray_3_37 <= _GEN_307 | validArray_3_37;
      validArray_3_38 <= _GEN_308 | validArray_3_38;
      validArray_3_39 <= _GEN_309 | validArray_3_39;
      validArray_3_40 <= _GEN_310 | validArray_3_40;
      validArray_3_41 <= _GEN_311 | validArray_3_41;
      validArray_3_42 <= _GEN_312 | validArray_3_42;
      validArray_3_43 <= _GEN_313 | validArray_3_43;
      validArray_3_44 <= _GEN_314 | validArray_3_44;
      validArray_3_45 <= _GEN_315 | validArray_3_45;
      validArray_3_46 <= _GEN_316 | validArray_3_46;
      validArray_3_47 <= _GEN_317 | validArray_3_47;
      validArray_3_48 <= _GEN_318 | validArray_3_48;
      validArray_3_49 <= _GEN_319 | validArray_3_49;
      validArray_3_50 <= _GEN_320 | validArray_3_50;
      validArray_3_51 <= _GEN_321 | validArray_3_51;
      validArray_3_52 <= _GEN_322 | validArray_3_52;
      validArray_3_53 <= _GEN_323 | validArray_3_53;
      validArray_3_54 <= _GEN_324 | validArray_3_54;
      validArray_3_55 <= _GEN_325 | validArray_3_55;
      validArray_3_56 <= _GEN_326 | validArray_3_56;
      validArray_3_57 <= _GEN_327 | validArray_3_57;
      validArray_3_58 <= _GEN_328 | validArray_3_58;
      validArray_3_59 <= _GEN_329 | validArray_3_59;
      validArray_3_60 <= _GEN_330 | validArray_3_60;
      validArray_3_61 <= _GEN_331 | validArray_3_61;
      validArray_3_62 <= _GEN_332 | validArray_3_62;
      validArray_3_63 <= _GEN_333 | validArray_3_63;
      if (|stateCache) begin
        if (_GEN_11) begin
          entryOff <= 3'h0;
          stateCache <= {2'h1, io_mem_req_ready & _io_mem_req_valid_output};
        end
        else begin
          if (_GEN_10 & _io_mem_resp_ready_output & io_mem_resp_valid)
            entryOff <= entryOff + 3'h1;
          if (_GEN_10) begin
            if (&entryOff)
              stateCache <= 3'h4;
            else
              stateCache <= 3'h3;
          end
          else if (stateCache == 3'h4)
            stateCache <= 3'h0;
        end
      end
      else
        stateCache <= {1'h0, ~hit, 1'h0};
    end
  end // always @(posedge)
  assign io_in_ready = hit & (~(|stateCache) | stateCache == 3'h4);
  assign io_mem_req_valid = _io_mem_req_valid_output;
  assign io_mem_req_bits_addr = {io_in_bits_addr[31:5], 5'h0};
  assign io_mem_resp_ready = _io_mem_resp_ready_output;
  assign io_out_valid = hit;
  assign io_out_bits_addr = io_in_bits_addr;
  assign io_dataReadBus_valid = io_in_valid;
  assign io_dataReadBus_bits_raddr =
    {_GEN_8 == io_in_bits_addr[31:11]
       ? 2'h3
       : _GEN_5 == io_in_bits_addr[31:11]
           ? 2'h2
           : {1'h0, _GEN_2 == io_in_bits_addr[31:11]},
     io_in_bits_addr[10:2]};
  assign io_dataWriteBus_req_valid =
    stateCache == 3'h3 & _io_mem_resp_ready_output & io_mem_resp_valid;
  assign io_dataWriteBus_req_bits_waddr =
    {replaceWayReg, io_in_bits_addr[10:5], entryOff};
  assign io_dataWriteBus_req_bits_wdata = io_mem_resp_bits_rdata;
endmodule

module CacheStage2(
  input         io_in_valid,
  input  [31:0] io_in_bits_addr,
                io_dataReadBus_rdata,
  input         io_out_resp_ready,
  output        io_in_ready,
  output [31:0] io_out_addr,
  output        io_out_resp_valid,
  output [31:0] io_out_resp_bits_rdata,
                io_in_bits_addr__bore,
  output        io_in_valid__bore
);

  assign io_in_ready = io_out_resp_ready;
  assign io_out_addr = io_in_bits_addr;
  assign io_out_resp_valid = io_in_valid;
  assign io_out_resp_bits_rdata = io_in_valid ? io_dataReadBus_rdata : 32'h0;
  assign io_in_bits_addr__bore = io_in_bits_addr;
  assign io_in_valid__bore = io_in_valid;
endmodule

module Cache(
  input         clock,
                reset,
                io_in_req_valid,
  input  [31:0] io_in_req_bits_addr,
  input         io_in_resp_ready,
                io_mem_req_ready,
                io_mem_resp_valid,
  input  [31:0] io_mem_resp_bits_rdata,
  input         io_flush,
  output        io_in_req_ready,
                io_in_resp_valid,
  output [31:0] io_in_resp_bits_rdata,
  output        io_mem_req_valid,
  output [31:0] io_mem_req_bits_addr,
  output        io_mem_resp_ready,
  output [31:0] io_stage2Addr,
                s2_io_in_bits_addr__bore,
  output        s2_io_in_valid__bore
);

  wire        _s2_io_in_ready;
  wire        _s2_io_out_resp_valid;
  wire        _s1_io_out_valid;
  wire [31:0] _s1_io_out_bits_addr;
  wire        _s1_io_dataReadBus_valid;
  wire [10:0] _s1_io_dataReadBus_bits_raddr;
  wire        _s1_io_dataWriteBus_req_valid;
  wire [10:0] _s1_io_dataWriteBus_req_bits_waddr;
  wire [31:0] _s1_io_dataWriteBus_req_bits_wdata;
  wire [31:0] _dataArray_io_r_resp_rdata;
  reg         valid;
  reg  [31:0] s2_io_in_bits_r_addr;
  wire        _s2_io_in_bits_T_1 = _s1_io_out_valid & _s2_io_in_ready;
  always @(posedge clock) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <=
        ~io_flush
        & (_s2_io_in_bits_T_1 | ~(io_in_resp_ready & _s2_io_out_resp_valid) & valid);
    if (_s2_io_in_bits_T_1) begin
      if (io_flush)
        s2_io_in_bits_r_addr <= 32'h0;
      else
        s2_io_in_bits_r_addr <= _s1_io_out_bits_addr;
    end
  end // always @(posedge)
  SRAMTemplate dataArray (
    .clock               (clock),
    .reset               (reset),
    .io_r_req_valid      (_s1_io_dataReadBus_valid),
    .io_r_req_bits_raddr (_s1_io_dataReadBus_bits_raddr),
    .io_w_req_valid      (_s1_io_dataWriteBus_req_valid),
    .io_w_req_bits_waddr (_s1_io_dataWriteBus_req_bits_waddr),
    .io_w_req_bits_wdata (_s1_io_dataWriteBus_req_bits_wdata),
    .io_r_resp_rdata     (_dataArray_io_r_resp_rdata)
  );
  CacheStage1 s1 (
    .clock                          (clock),
    .reset                          (reset),
    .io_in_valid                    (io_in_req_valid),
    .io_in_bits_addr                (io_in_req_bits_addr),
    .io_mem_req_ready               (io_mem_req_ready),
    .io_mem_resp_valid              (io_mem_resp_valid),
    .io_mem_resp_bits_rdata         (io_mem_resp_bits_rdata),
    .io_in_ready                    (io_in_req_ready),
    .io_mem_req_valid               (io_mem_req_valid),
    .io_mem_req_bits_addr           (io_mem_req_bits_addr),
    .io_mem_resp_ready              (io_mem_resp_ready),
    .io_out_valid                   (_s1_io_out_valid),
    .io_out_bits_addr               (_s1_io_out_bits_addr),
    .io_dataReadBus_valid           (_s1_io_dataReadBus_valid),
    .io_dataReadBus_bits_raddr      (_s1_io_dataReadBus_bits_raddr),
    .io_dataWriteBus_req_valid      (_s1_io_dataWriteBus_req_valid),
    .io_dataWriteBus_req_bits_waddr (_s1_io_dataWriteBus_req_bits_waddr),
    .io_dataWriteBus_req_bits_wdata (_s1_io_dataWriteBus_req_bits_wdata)
  );
  CacheStage2 s2 (
    .io_in_valid            (valid),
    .io_in_bits_addr        (s2_io_in_bits_r_addr),
    .io_dataReadBus_rdata   (_dataArray_io_r_resp_rdata),
    .io_out_resp_ready      (io_in_resp_ready),
    .io_in_ready            (_s2_io_in_ready),
    .io_out_addr            (io_stage2Addr),
    .io_out_resp_valid      (_s2_io_out_resp_valid),
    .io_out_resp_bits_rdata (io_in_resp_bits_rdata),
    .io_in_bits_addr__bore  (s2_io_in_bits_addr__bore),
    .io_in_valid__bore      (s2_io_in_valid__bore)
  );
  assign io_in_resp_valid = _s2_io_out_resp_valid;
endmodule

module SimpleBus2AXI4Converter(
  input         io_in_req_valid,
  input  [31:0] io_in_req_bits_addr,
  input         io_in_resp_ready,
                io_out_ar_ready,
                io_out_r_valid,
  input  [31:0] io_out_r_bits_data,
  output        io_in_req_ready,
                io_in_resp_valid,
  output [31:0] io_in_resp_bits_rdata,
  output        io_out_ar_valid,
  output [31:0] io_out_ar_bits_addr,
  output        io_out_r_ready,
  output [31:0] io_out_aw_bits_addr
);

  assign io_in_req_ready = io_out_ar_ready;
  assign io_in_resp_valid = io_out_r_valid;
  assign io_in_resp_bits_rdata = io_out_r_bits_data;
  assign io_out_ar_valid = io_in_req_valid;
  assign io_out_ar_bits_addr = io_in_req_bits_addr;
  assign io_out_r_ready = io_in_resp_ready;
  assign io_out_aw_bits_addr = io_in_req_bits_addr;
endmodule

module SimpleBusCrossBar1toN(
  input         clock,
                reset,
                io_in_req_valid,
  input  [31:0] io_in_req_bits_addr,
                io_in_req_bits_wdata,
                io_in_req_bits_wmask,
  input  [3:0]  io_in_req_bits_cmd,
  input         io_in_resp_ready,
                io_out_0_req_ready,
                io_out_0_resp_valid,
  input  [31:0] io_out_0_resp_bits_rdata,
  input         io_out_0_resp_bits_wresp,
  input  [31:0] io_out_1_resp_bits_rdata,
  input         io_out_1_resp_bits_wresp,
  output        io_in_req_ready,
                io_in_resp_valid,
  output [31:0] io_in_resp_bits_rdata,
  output        io_in_resp_bits_wresp,
                io_out_0_req_valid,
  output [31:0] io_out_0_req_bits_addr,
                io_out_0_req_bits_wdata,
                io_out_0_req_bits_wmask,
  output [3:0]  io_out_0_req_bits_cmd,
  output        io_out_1_req_valid,
  output [31:0] io_out_1_req_bits_addr,
                io_out_1_req_bits_wdata,
                io_out_1_req_bits_wmask,
  output [3:0]  io_out_1_req_bits_cmd
);

  reg  [1:0] state;
  wire [1:0] outSelVec_enc =
    io_in_req_bits_addr[31] & io_in_req_bits_addr < 32'h88000000
      ? 2'h1
      : {io_in_req_bits_addr > 32'h9FFFFFFF & io_in_req_bits_addr < 32'hA1200000, 1'h0};
  reg        outSelRespVec_0;
  reg        outSelRespVec_1;
  wire       reqInvalidAddr = io_in_req_valid & outSelVec_enc == 2'h0;
  wire       _io_in_req_ready_output =
    outSelVec_enc[0] & io_out_0_req_ready | outSelVec_enc[1] | reqInvalidAddr;
  wire       _io_in_resp_valid_output =
    outSelRespVec_0 & io_out_0_resp_valid | outSelRespVec_1 | state == 2'h2;
  wire       _outSelRespVec_T = _io_in_req_ready_output & io_in_req_valid;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
      outSelRespVec_0 <= 1'h0;
      outSelRespVec_1 <= 1'h0;
    end
    else begin
      if (|state) begin
        if ((state == 2'h1 | state == 2'h2) & io_in_resp_ready & _io_in_resp_valid_output)
          state <= 2'h0;
      end
      else if (reqInvalidAddr)
        state <= 2'h2;
      else if (_outSelRespVec_T)
        state <= 2'h1;
      if (_outSelRespVec_T & ~(|state)) begin
        outSelRespVec_0 <= outSelVec_enc[0];
        outSelRespVec_1 <= outSelVec_enc[1];
      end
    end
  end // always @(posedge)
  assign io_in_req_ready = _io_in_req_ready_output;
  assign io_in_resp_valid = _io_in_resp_valid_output;
  assign io_in_resp_bits_rdata =
    (outSelRespVec_0 ? io_out_0_resp_bits_rdata : 32'h0)
    | (outSelRespVec_1 ? io_out_1_resp_bits_rdata : 32'h0);
  assign io_in_resp_bits_wresp =
    outSelRespVec_0 & io_out_0_resp_bits_wresp | outSelRespVec_1
    & io_out_1_resp_bits_wresp;
  assign io_out_0_req_valid = outSelVec_enc[0] & io_in_req_valid & ~(|state);
  assign io_out_0_req_bits_addr = io_in_req_bits_addr;
  assign io_out_0_req_bits_wdata = io_in_req_bits_wdata;
  assign io_out_0_req_bits_wmask = io_in_req_bits_wmask;
  assign io_out_0_req_bits_cmd = io_in_req_bits_cmd;
  assign io_out_1_req_valid = outSelVec_enc[1] & io_in_req_valid & ~(|state);
  assign io_out_1_req_bits_addr = io_in_req_bits_addr;
  assign io_out_1_req_bits_wdata = io_in_req_bits_wdata;
  assign io_out_1_req_bits_wmask = io_in_req_bits_wmask;
  assign io_out_1_req_bits_cmd = io_in_req_bits_cmd;
endmodule

// VCS coverage exclude_file
module dataArray_256x32(
  input  [7:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [7:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [7:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  input  [7:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [31:0] W1_data,
  output [31:0] R0_data,
                R1_data
);

  reg [31:0] Memory[0:255];
  reg        _R0_en_d0;
  reg [7:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg        _R1_en_d0;
  reg [7:0]  _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
    if (W1_en)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 32'bx;
endmodule

module Dcache_SimpleBus(
  input         clock,
                reset,
                from_lsu_req_valid,
  input  [31:0] from_lsu_req_bits_addr,
                from_lsu_req_bits_wdata,
                from_lsu_req_bits_wmask,
  input  [3:0]  from_lsu_req_bits_cmd,
  input         to_sram_ar_ready,
                to_sram_r_valid,
  input  [31:0] to_sram_r_bits_data,
  input         to_sram_r_bits_last,
                to_sram_aw_ready,
                to_sram_w_ready,
  output        from_lsu_req_ready,
                from_lsu_resp_valid,
  output [31:0] from_lsu_resp_bits_rdata,
  output        from_lsu_resp_bits_wresp,
                to_sram_ar_valid,
  output [31:0] to_sram_ar_bits_addr,
  output [7:0]  to_sram_ar_bits_len,
  output        to_sram_r_ready,
                to_sram_aw_valid,
  output [31:0] to_sram_aw_bits_addr,
  output [7:0]  to_sram_aw_bits_len,
  output        to_sram_w_valid,
  output [31:0] to_sram_w_bits_data
);

  wire              _to_sram_r_ready_output;
  wire [31:0]       _dataArray_ext_R1_data;
  reg               replace_set;
  reg               random_num;
  reg  [22:0]       tagArray_0_0;
  reg  [22:0]       tagArray_0_1;
  reg  [22:0]       tagArray_0_2;
  reg  [22:0]       tagArray_0_3;
  reg  [22:0]       tagArray_0_4;
  reg  [22:0]       tagArray_0_5;
  reg  [22:0]       tagArray_0_6;
  reg  [22:0]       tagArray_0_7;
  reg  [22:0]       tagArray_0_8;
  reg  [22:0]       tagArray_0_9;
  reg  [22:0]       tagArray_0_10;
  reg  [22:0]       tagArray_0_11;
  reg  [22:0]       tagArray_0_12;
  reg  [22:0]       tagArray_0_13;
  reg  [22:0]       tagArray_0_14;
  reg  [22:0]       tagArray_0_15;
  reg  [22:0]       tagArray_1_0;
  reg  [22:0]       tagArray_1_1;
  reg  [22:0]       tagArray_1_2;
  reg  [22:0]       tagArray_1_3;
  reg  [22:0]       tagArray_1_4;
  reg  [22:0]       tagArray_1_5;
  reg  [22:0]       tagArray_1_6;
  reg  [22:0]       tagArray_1_7;
  reg  [22:0]       tagArray_1_8;
  reg  [22:0]       tagArray_1_9;
  reg  [22:0]       tagArray_1_10;
  reg  [22:0]       tagArray_1_11;
  reg  [22:0]       tagArray_1_12;
  reg  [22:0]       tagArray_1_13;
  reg  [22:0]       tagArray_1_14;
  reg  [22:0]       tagArray_1_15;
  reg               validArray_0_0;
  reg               validArray_0_1;
  reg               validArray_0_2;
  reg               validArray_0_3;
  reg               validArray_0_4;
  reg               validArray_0_5;
  reg               validArray_0_6;
  reg               validArray_0_7;
  reg               validArray_0_8;
  reg               validArray_0_9;
  reg               validArray_0_10;
  reg               validArray_0_11;
  reg               validArray_0_12;
  reg               validArray_0_13;
  reg               validArray_0_14;
  reg               validArray_0_15;
  reg               validArray_1_0;
  reg               validArray_1_1;
  reg               validArray_1_2;
  reg               validArray_1_3;
  reg               validArray_1_4;
  reg               validArray_1_5;
  reg               validArray_1_6;
  reg               validArray_1_7;
  reg               validArray_1_8;
  reg               validArray_1_9;
  reg               validArray_1_10;
  reg               validArray_1_11;
  reg               validArray_1_12;
  reg               validArray_1_13;
  reg               validArray_1_14;
  reg               validArray_1_15;
  reg               dirtyArray_0_0;
  reg               dirtyArray_0_1;
  reg               dirtyArray_0_2;
  reg               dirtyArray_0_3;
  reg               dirtyArray_0_4;
  reg               dirtyArray_0_5;
  reg               dirtyArray_0_6;
  reg               dirtyArray_0_7;
  reg               dirtyArray_0_8;
  reg               dirtyArray_0_9;
  reg               dirtyArray_0_10;
  reg               dirtyArray_0_11;
  reg               dirtyArray_0_12;
  reg               dirtyArray_0_13;
  reg               dirtyArray_0_14;
  reg               dirtyArray_0_15;
  reg               dirtyArray_1_0;
  reg               dirtyArray_1_1;
  reg               dirtyArray_1_2;
  reg               dirtyArray_1_3;
  reg               dirtyArray_1_4;
  reg               dirtyArray_1_5;
  reg               dirtyArray_1_6;
  reg               dirtyArray_1_7;
  reg               dirtyArray_1_8;
  reg               dirtyArray_1_9;
  reg               dirtyArray_1_10;
  reg               dirtyArray_1_11;
  reg               dirtyArray_1_12;
  reg               dirtyArray_1_13;
  reg               dirtyArray_1_14;
  reg               dirtyArray_1_15;
  wire [15:0][22:0] _GEN =
    {{tagArray_0_15},
     {tagArray_0_14},
     {tagArray_0_13},
     {tagArray_0_12},
     {tagArray_0_11},
     {tagArray_0_10},
     {tagArray_0_9},
     {tagArray_0_8},
     {tagArray_0_7},
     {tagArray_0_6},
     {tagArray_0_5},
     {tagArray_0_4},
     {tagArray_0_3},
     {tagArray_0_2},
     {tagArray_0_1},
     {tagArray_0_0}};
  wire [15:0]       _GEN_0 =
    {{validArray_0_15},
     {validArray_0_14},
     {validArray_0_13},
     {validArray_0_12},
     {validArray_0_11},
     {validArray_0_10},
     {validArray_0_9},
     {validArray_0_8},
     {validArray_0_7},
     {validArray_0_6},
     {validArray_0_5},
     {validArray_0_4},
     {validArray_0_3},
     {validArray_0_2},
     {validArray_0_1},
     {validArray_0_0}};
  wire [15:0][22:0] _GEN_1 =
    {{tagArray_1_15},
     {tagArray_1_14},
     {tagArray_1_13},
     {tagArray_1_12},
     {tagArray_1_11},
     {tagArray_1_10},
     {tagArray_1_9},
     {tagArray_1_8},
     {tagArray_1_7},
     {tagArray_1_6},
     {tagArray_1_5},
     {tagArray_1_4},
     {tagArray_1_3},
     {tagArray_1_2},
     {tagArray_1_1},
     {tagArray_1_0}};
  wire [22:0]       _GEN_2 = _GEN_1[from_lsu_req_bits_addr[8:5]];
  wire [15:0]       _GEN_3 =
    {{validArray_1_15},
     {validArray_1_14},
     {validArray_1_13},
     {validArray_1_12},
     {validArray_1_11},
     {validArray_1_10},
     {validArray_1_9},
     {validArray_1_8},
     {validArray_1_7},
     {validArray_1_6},
     {validArray_1_5},
     {validArray_1_4},
     {validArray_1_3},
     {validArray_1_2},
     {validArray_1_1},
     {validArray_1_0}};
  wire              hit =
    from_lsu_req_bits_addr[31:9] == _GEN[from_lsu_req_bits_addr[8:5]]
    & _GEN_0[from_lsu_req_bits_addr[8:5]] | from_lsu_req_bits_addr[31:9] == _GEN_2
    & _GEN_3[from_lsu_req_bits_addr[8:5]];
  wire              SetId = _GEN_2 == from_lsu_req_bits_addr[31:9];
  wire [7:0]        hitCacheAddr = {SetId, from_lsu_req_bits_addr[8:2]};
  reg  [2:0]        off;
  reg  [3:0]        state_dcache;
  wire              _from_lsu_req_ready_output = state_dcache == 4'h0;
  wire              _GEN_4 = state_dcache == 4'h2;
  wire              _GEN_5 =
    state_dcache == 4'h8 & _to_sram_r_ready_output & to_sram_r_valid;
  wire [7:0]        replaceCacheAddr = {replace_set, from_lsu_req_bits_addr[8:5], off};
  wire [94:0]       _indata_T_1 =
    {63'h0, from_lsu_req_bits_wdata} << {90'h0, from_lsu_req_bits_addr[1:0], 3'h0};
  wire              _from_lsu_resp_bits_wresp_T_1 = state_dcache == 4'h2;
  wire              _to_sram_ar_valid_output = state_dcache == 4'h7;
  assign _to_sram_r_ready_output = state_dcache == 4'h8;
  wire              _to_sram_aw_valid_output = state_dcache == 4'h4;
  wire [15:0][22:0] _GEN_6 = replace_set ? _GEN_1 : _GEN;
  wire              _to_sram_w_valid_output = state_dcache == 4'h5;
  wire              _GEN_7 = _from_lsu_req_ready_output & from_lsu_req_valid;
  wire              _GEN_8 = from_lsu_req_bits_addr[8:5] == 4'h0;
  wire              _GEN_9 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_8;
  wire              _GEN_10 = from_lsu_req_bits_addr[8:5] == 4'h1;
  wire              _GEN_11 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_10;
  wire              _GEN_12 = from_lsu_req_bits_addr[8:5] == 4'h2;
  wire              _GEN_13 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_12;
  wire              _GEN_14 = from_lsu_req_bits_addr[8:5] == 4'h3;
  wire              _GEN_15 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_14;
  wire              _GEN_16 = from_lsu_req_bits_addr[8:5] == 4'h4;
  wire              _GEN_17 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_16;
  wire              _GEN_18 = from_lsu_req_bits_addr[8:5] == 4'h5;
  wire              _GEN_19 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_18;
  wire              _GEN_20 = from_lsu_req_bits_addr[8:5] == 4'h6;
  wire              _GEN_21 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_20;
  wire              _GEN_22 = from_lsu_req_bits_addr[8:5] == 4'h7;
  wire              _GEN_23 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_22;
  wire              _GEN_24 = from_lsu_req_bits_addr[8:5] == 4'h8;
  wire              _GEN_25 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_24;
  wire              _GEN_26 = from_lsu_req_bits_addr[8:5] == 4'h9;
  wire              _GEN_27 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_26;
  wire              _GEN_28 = from_lsu_req_bits_addr[8:5] == 4'hA;
  wire              _GEN_29 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_28;
  wire              _GEN_30 = from_lsu_req_bits_addr[8:5] == 4'hB;
  wire              _GEN_31 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_30;
  wire              _GEN_32 = from_lsu_req_bits_addr[8:5] == 4'hC;
  wire              _GEN_33 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_32;
  wire              _GEN_34 = from_lsu_req_bits_addr[8:5] == 4'hD;
  wire              _GEN_35 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_34;
  wire              _GEN_36 = from_lsu_req_bits_addr[8:5] == 4'hE;
  wire              _GEN_37 = _GEN_5 & to_sram_r_bits_last & ~replace_set & _GEN_36;
  wire              _GEN_38 =
    _GEN_5 & to_sram_r_bits_last & ~replace_set & (&(from_lsu_req_bits_addr[8:5]));
  wire              _GEN_39 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_8;
  wire              _GEN_40 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_10;
  wire              _GEN_41 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_12;
  wire              _GEN_42 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_14;
  wire              _GEN_43 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_16;
  wire              _GEN_44 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_18;
  wire              _GEN_45 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_20;
  wire              _GEN_46 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_22;
  wire              _GEN_47 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_24;
  wire              _GEN_48 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_26;
  wire              _GEN_49 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_28;
  wire              _GEN_50 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_30;
  wire              _GEN_51 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_32;
  wire              _GEN_52 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_34;
  wire              _GEN_53 = _GEN_5 & to_sram_r_bits_last & replace_set & _GEN_36;
  wire              _GEN_54 =
    _GEN_5 & to_sram_r_bits_last & replace_set & (&(from_lsu_req_bits_addr[8:5]));
  wire [15:0]       _GEN_55 =
    replace_set
      ? {{dirtyArray_1_15},
         {dirtyArray_1_14},
         {dirtyArray_1_13},
         {dirtyArray_1_12},
         {dirtyArray_1_11},
         {dirtyArray_1_10},
         {dirtyArray_1_9},
         {dirtyArray_1_8},
         {dirtyArray_1_7},
         {dirtyArray_1_6},
         {dirtyArray_1_5},
         {dirtyArray_1_4},
         {dirtyArray_1_3},
         {dirtyArray_1_2},
         {dirtyArray_1_1},
         {dirtyArray_1_0}}
      : {{dirtyArray_0_15},
         {dirtyArray_0_14},
         {dirtyArray_0_13},
         {dirtyArray_0_12},
         {dirtyArray_0_11},
         {dirtyArray_0_10},
         {dirtyArray_0_9},
         {dirtyArray_0_8},
         {dirtyArray_0_7},
         {dirtyArray_0_6},
         {dirtyArray_0_5},
         {dirtyArray_0_4},
         {dirtyArray_0_3},
         {dirtyArray_0_2},
         {dirtyArray_0_1},
         {dirtyArray_0_0}};
  wire [15:0][3:0]  _GEN_56 =
    {{state_dcache},
     {state_dcache},
     {state_dcache},
     {state_dcache},
     {state_dcache},
     {state_dcache},
     {from_lsu_req_bits_cmd == 4'h1 ? 4'h2 : 4'h1},
     {{3'h4, to_sram_r_bits_last}},
     {to_sram_ar_ready & _to_sram_ar_valid_output ? 4'h8 : 4'h7},
     {4'h7},
     {(&off) ? 4'h6 : 4'h5},
     {{3'h2, to_sram_aw_ready & _to_sram_aw_valid_output}},
     {_GEN_55[from_lsu_req_bits_addr[8:5]] ? 4'h4 : 4'h7},
     {4'h0},
     {4'h0},
     {_GEN_7 ? (hit ? (from_lsu_req_bits_cmd == 4'h1 ? 4'h2 : 4'h1) : 4'h3) : 4'h0}};
  always @(posedge clock) begin
    if (reset) begin
      replace_set <= 1'h0;
      random_num <= 1'h0;
      tagArray_0_0 <= 23'h0;
      tagArray_0_1 <= 23'h0;
      tagArray_0_2 <= 23'h0;
      tagArray_0_3 <= 23'h0;
      tagArray_0_4 <= 23'h0;
      tagArray_0_5 <= 23'h0;
      tagArray_0_6 <= 23'h0;
      tagArray_0_7 <= 23'h0;
      tagArray_0_8 <= 23'h0;
      tagArray_0_9 <= 23'h0;
      tagArray_0_10 <= 23'h0;
      tagArray_0_11 <= 23'h0;
      tagArray_0_12 <= 23'h0;
      tagArray_0_13 <= 23'h0;
      tagArray_0_14 <= 23'h0;
      tagArray_0_15 <= 23'h0;
      tagArray_1_0 <= 23'h0;
      tagArray_1_1 <= 23'h0;
      tagArray_1_2 <= 23'h0;
      tagArray_1_3 <= 23'h0;
      tagArray_1_4 <= 23'h0;
      tagArray_1_5 <= 23'h0;
      tagArray_1_6 <= 23'h0;
      tagArray_1_7 <= 23'h0;
      tagArray_1_8 <= 23'h0;
      tagArray_1_9 <= 23'h0;
      tagArray_1_10 <= 23'h0;
      tagArray_1_11 <= 23'h0;
      tagArray_1_12 <= 23'h0;
      tagArray_1_13 <= 23'h0;
      tagArray_1_14 <= 23'h0;
      tagArray_1_15 <= 23'h0;
      validArray_0_0 <= 1'h0;
      validArray_0_1 <= 1'h0;
      validArray_0_2 <= 1'h0;
      validArray_0_3 <= 1'h0;
      validArray_0_4 <= 1'h0;
      validArray_0_5 <= 1'h0;
      validArray_0_6 <= 1'h0;
      validArray_0_7 <= 1'h0;
      validArray_0_8 <= 1'h0;
      validArray_0_9 <= 1'h0;
      validArray_0_10 <= 1'h0;
      validArray_0_11 <= 1'h0;
      validArray_0_12 <= 1'h0;
      validArray_0_13 <= 1'h0;
      validArray_0_14 <= 1'h0;
      validArray_0_15 <= 1'h0;
      validArray_1_0 <= 1'h0;
      validArray_1_1 <= 1'h0;
      validArray_1_2 <= 1'h0;
      validArray_1_3 <= 1'h0;
      validArray_1_4 <= 1'h0;
      validArray_1_5 <= 1'h0;
      validArray_1_6 <= 1'h0;
      validArray_1_7 <= 1'h0;
      validArray_1_8 <= 1'h0;
      validArray_1_9 <= 1'h0;
      validArray_1_10 <= 1'h0;
      validArray_1_11 <= 1'h0;
      validArray_1_12 <= 1'h0;
      validArray_1_13 <= 1'h0;
      validArray_1_14 <= 1'h0;
      validArray_1_15 <= 1'h0;
      dirtyArray_0_0 <= 1'h0;
      dirtyArray_0_1 <= 1'h0;
      dirtyArray_0_2 <= 1'h0;
      dirtyArray_0_3 <= 1'h0;
      dirtyArray_0_4 <= 1'h0;
      dirtyArray_0_5 <= 1'h0;
      dirtyArray_0_6 <= 1'h0;
      dirtyArray_0_7 <= 1'h0;
      dirtyArray_0_8 <= 1'h0;
      dirtyArray_0_9 <= 1'h0;
      dirtyArray_0_10 <= 1'h0;
      dirtyArray_0_11 <= 1'h0;
      dirtyArray_0_12 <= 1'h0;
      dirtyArray_0_13 <= 1'h0;
      dirtyArray_0_14 <= 1'h0;
      dirtyArray_0_15 <= 1'h0;
      dirtyArray_1_0 <= 1'h0;
      dirtyArray_1_1 <= 1'h0;
      dirtyArray_1_2 <= 1'h0;
      dirtyArray_1_3 <= 1'h0;
      dirtyArray_1_4 <= 1'h0;
      dirtyArray_1_5 <= 1'h0;
      dirtyArray_1_6 <= 1'h0;
      dirtyArray_1_7 <= 1'h0;
      dirtyArray_1_8 <= 1'h0;
      dirtyArray_1_9 <= 1'h0;
      dirtyArray_1_10 <= 1'h0;
      dirtyArray_1_11 <= 1'h0;
      dirtyArray_1_12 <= 1'h0;
      dirtyArray_1_13 <= 1'h0;
      dirtyArray_1_14 <= 1'h0;
      dirtyArray_1_15 <= 1'h0;
      off <= 3'h0;
      state_dcache <= 4'h0;
    end
    else begin
      if (~(_from_lsu_req_ready_output & _GEN_7) | hit) begin
      end
      else
        replace_set <= random_num;
      random_num <= random_num - 1'h1;
      if (_GEN_9)
        tagArray_0_0 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_11)
        tagArray_0_1 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_13)
        tagArray_0_2 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_15)
        tagArray_0_3 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_17)
        tagArray_0_4 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_19)
        tagArray_0_5 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_21)
        tagArray_0_6 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_23)
        tagArray_0_7 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_25)
        tagArray_0_8 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_27)
        tagArray_0_9 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_29)
        tagArray_0_10 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_31)
        tagArray_0_11 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_33)
        tagArray_0_12 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_35)
        tagArray_0_13 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_37)
        tagArray_0_14 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_38)
        tagArray_0_15 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_39)
        tagArray_1_0 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_40)
        tagArray_1_1 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_41)
        tagArray_1_2 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_42)
        tagArray_1_3 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_43)
        tagArray_1_4 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_44)
        tagArray_1_5 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_45)
        tagArray_1_6 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_46)
        tagArray_1_7 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_47)
        tagArray_1_8 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_48)
        tagArray_1_9 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_49)
        tagArray_1_10 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_50)
        tagArray_1_11 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_51)
        tagArray_1_12 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_52)
        tagArray_1_13 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_53)
        tagArray_1_14 <= from_lsu_req_bits_addr[31:9];
      if (_GEN_54)
        tagArray_1_15 <= from_lsu_req_bits_addr[31:9];
      validArray_0_0 <= _GEN_9 | validArray_0_0;
      validArray_0_1 <= _GEN_11 | validArray_0_1;
      validArray_0_2 <= _GEN_13 | validArray_0_2;
      validArray_0_3 <= _GEN_15 | validArray_0_3;
      validArray_0_4 <= _GEN_17 | validArray_0_4;
      validArray_0_5 <= _GEN_19 | validArray_0_5;
      validArray_0_6 <= _GEN_21 | validArray_0_6;
      validArray_0_7 <= _GEN_23 | validArray_0_7;
      validArray_0_8 <= _GEN_25 | validArray_0_8;
      validArray_0_9 <= _GEN_27 | validArray_0_9;
      validArray_0_10 <= _GEN_29 | validArray_0_10;
      validArray_0_11 <= _GEN_31 | validArray_0_11;
      validArray_0_12 <= _GEN_33 | validArray_0_12;
      validArray_0_13 <= _GEN_35 | validArray_0_13;
      validArray_0_14 <= _GEN_37 | validArray_0_14;
      validArray_0_15 <= _GEN_38 | validArray_0_15;
      validArray_1_0 <= _GEN_39 | validArray_1_0;
      validArray_1_1 <= _GEN_40 | validArray_1_1;
      validArray_1_2 <= _GEN_41 | validArray_1_2;
      validArray_1_3 <= _GEN_42 | validArray_1_3;
      validArray_1_4 <= _GEN_43 | validArray_1_4;
      validArray_1_5 <= _GEN_44 | validArray_1_5;
      validArray_1_6 <= _GEN_45 | validArray_1_6;
      validArray_1_7 <= _GEN_46 | validArray_1_7;
      validArray_1_8 <= _GEN_47 | validArray_1_8;
      validArray_1_9 <= _GEN_48 | validArray_1_9;
      validArray_1_10 <= _GEN_49 | validArray_1_10;
      validArray_1_11 <= _GEN_50 | validArray_1_11;
      validArray_1_12 <= _GEN_51 | validArray_1_12;
      validArray_1_13 <= _GEN_52 | validArray_1_13;
      validArray_1_14 <= _GEN_53 | validArray_1_14;
      validArray_1_15 <= _GEN_54 | validArray_1_15;
      dirtyArray_0_0 <= _GEN_4 & ~SetId & _GEN_8 | dirtyArray_0_0;
      dirtyArray_0_1 <= _GEN_4 & ~SetId & _GEN_10 | dirtyArray_0_1;
      dirtyArray_0_2 <= _GEN_4 & ~SetId & _GEN_12 | dirtyArray_0_2;
      dirtyArray_0_3 <= _GEN_4 & ~SetId & _GEN_14 | dirtyArray_0_3;
      dirtyArray_0_4 <= _GEN_4 & ~SetId & _GEN_16 | dirtyArray_0_4;
      dirtyArray_0_5 <= _GEN_4 & ~SetId & _GEN_18 | dirtyArray_0_5;
      dirtyArray_0_6 <= _GEN_4 & ~SetId & _GEN_20 | dirtyArray_0_6;
      dirtyArray_0_7 <= _GEN_4 & ~SetId & _GEN_22 | dirtyArray_0_7;
      dirtyArray_0_8 <= _GEN_4 & ~SetId & _GEN_24 | dirtyArray_0_8;
      dirtyArray_0_9 <= _GEN_4 & ~SetId & _GEN_26 | dirtyArray_0_9;
      dirtyArray_0_10 <= _GEN_4 & ~SetId & _GEN_28 | dirtyArray_0_10;
      dirtyArray_0_11 <= _GEN_4 & ~SetId & _GEN_30 | dirtyArray_0_11;
      dirtyArray_0_12 <= _GEN_4 & ~SetId & _GEN_32 | dirtyArray_0_12;
      dirtyArray_0_13 <= _GEN_4 & ~SetId & _GEN_34 | dirtyArray_0_13;
      dirtyArray_0_14 <= _GEN_4 & ~SetId & _GEN_36 | dirtyArray_0_14;
      dirtyArray_0_15 <=
        _GEN_4 & ~SetId & (&(from_lsu_req_bits_addr[8:5])) | dirtyArray_0_15;
      dirtyArray_1_0 <= _GEN_4 & SetId & _GEN_8 | dirtyArray_1_0;
      dirtyArray_1_1 <= _GEN_4 & SetId & _GEN_10 | dirtyArray_1_1;
      dirtyArray_1_2 <= _GEN_4 & SetId & _GEN_12 | dirtyArray_1_2;
      dirtyArray_1_3 <= _GEN_4 & SetId & _GEN_14 | dirtyArray_1_3;
      dirtyArray_1_4 <= _GEN_4 & SetId & _GEN_16 | dirtyArray_1_4;
      dirtyArray_1_5 <= _GEN_4 & SetId & _GEN_18 | dirtyArray_1_5;
      dirtyArray_1_6 <= _GEN_4 & SetId & _GEN_20 | dirtyArray_1_6;
      dirtyArray_1_7 <= _GEN_4 & SetId & _GEN_22 | dirtyArray_1_7;
      dirtyArray_1_8 <= _GEN_4 & SetId & _GEN_24 | dirtyArray_1_8;
      dirtyArray_1_9 <= _GEN_4 & SetId & _GEN_26 | dirtyArray_1_9;
      dirtyArray_1_10 <= _GEN_4 & SetId & _GEN_28 | dirtyArray_1_10;
      dirtyArray_1_11 <= _GEN_4 & SetId & _GEN_30 | dirtyArray_1_11;
      dirtyArray_1_12 <= _GEN_4 & SetId & _GEN_32 | dirtyArray_1_12;
      dirtyArray_1_13 <= _GEN_4 & SetId & _GEN_34 | dirtyArray_1_13;
      dirtyArray_1_14 <= _GEN_4 & SetId & _GEN_36 | dirtyArray_1_14;
      dirtyArray_1_15 <=
        _GEN_4 & SetId & (&(from_lsu_req_bits_addr[8:5])) | dirtyArray_1_15;
      if (~(_from_lsu_req_ready_output | state_dcache == 4'h1 | _GEN_4
            | state_dcache == 4'h3)) begin
        if (state_dcache == 4'h4)
          off <= 3'h0;
        else if (state_dcache == 4'h5) begin
          if (to_sram_w_ready & _to_sram_w_valid_output)
            off <= off + 3'h1;
        end
        else if (state_dcache != 4'h6) begin
          if (state_dcache == 4'h7)
            off <= 3'h0;
          else if (_GEN_5)
            off <= off + 3'h1;
        end
      end
      state_dcache <= _GEN_56[state_dcache];
    end
  end // always @(posedge)
  dataArray_256x32 dataArray_ext (
    .R0_addr (replaceCacheAddr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R1_addr (hitCacheAddr),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .W0_addr (hitCacheAddr),
    .W0_en   (_GEN_4),
    .W0_clk  (clock),
    .W0_data
      (_indata_T_1[31:0] & from_lsu_req_bits_wmask | _dataArray_ext_R1_data
       & ~from_lsu_req_bits_wmask),
    .W1_addr (replaceCacheAddr),
    .W1_en   (_GEN_5),
    .W1_clk  (clock),
    .W1_data (to_sram_r_bits_data),
    .R0_data (to_sram_w_bits_data),
    .R1_data (_dataArray_ext_R1_data)
  );
  assign from_lsu_req_ready = _from_lsu_req_ready_output;
  assign from_lsu_resp_valid = _from_lsu_resp_bits_wresp_T_1 | state_dcache == 4'h1;
  assign from_lsu_resp_bits_rdata = hit ? _dataArray_ext_R1_data : 32'h0;
  assign from_lsu_resp_bits_wresp = _from_lsu_resp_bits_wresp_T_1;
  assign to_sram_ar_valid = _to_sram_ar_valid_output;
  assign to_sram_ar_bits_addr =
    _to_sram_ar_valid_output ? {from_lsu_req_bits_addr[31:5], 5'h0} : 32'h0;
  assign to_sram_ar_bits_len = {5'h0, {3{_to_sram_ar_valid_output}}};
  assign to_sram_r_ready = _to_sram_r_ready_output;
  assign to_sram_aw_valid = _to_sram_aw_valid_output;
  assign to_sram_aw_bits_addr =
    {_GEN_6[from_lsu_req_bits_addr[8:5]], from_lsu_req_bits_addr[8:5], 5'h0};
  assign to_sram_aw_bits_len = {5'h0, {3{_to_sram_aw_valid_output}}};
  assign to_sram_w_valid = _to_sram_w_valid_output;
endmodule

module MMIO(
  input         clock,
                from_lsu_req_valid,
  input  [31:0] from_lsu_req_bits_addr,
                from_lsu_req_bits_wdata,
                from_lsu_req_bits_wmask,
  input  [3:0]  from_lsu_req_bits_cmd,
  output [31:0] from_lsu_resp_bits_rdata,
  output        from_lsu_resp_bits_wresp
);

  wire _from_lsu_resp_bits_wresp_T = from_lsu_req_bits_cmd == 4'h1;
  RamBB RamBB_i1 (
    .clock   (clock),
    .addr    (from_lsu_req_bits_addr),
    .mem_wen (_from_lsu_resp_bits_wresp_T),
    .valid   (from_lsu_req_valid),
    .wdata   (from_lsu_req_bits_wdata),
    .wmask   (from_lsu_req_bits_wmask[3:0]),
    .rdata   (from_lsu_resp_bits_rdata)
  );
  assign from_lsu_resp_bits_wresp = _from_lsu_resp_bits_wresp_T;
endmodule

module top(
  input         clock,
                reset,
  output [31:0] io_out_ifu_fetchPc,
                io_out_nextExecPC,
                io_out_ifu_inst,
                io_out_ifu_pc,
                io_out_idu_inst,
                io_out_idu_pc,
                io_out_isu_inst,
                io_out_isu_pc,
                io_out_exu_inst,
                io_out_exu_pc,
                io_out_wbu_inst,
                io_out_wbu_pc,
                io_out_difftest_mcause,
                io_out_difftest_mepc,
                io_out_difftest_mstatus,
                io_out_difftest_mtvec,
  output        io_out_wb
);

  wire [31:0] _mmio_from_lsu_resp_bits_rdata;
  wire        _mmio_from_lsu_resp_bits_wresp;
  wire        _dcache_from_lsu_req_ready;
  wire        _dcache_from_lsu_resp_valid;
  wire [31:0] _dcache_from_lsu_resp_bits_rdata;
  wire        _dcache_from_lsu_resp_bits_wresp;
  wire        _dcache_to_sram_ar_valid;
  wire [31:0] _dcache_to_sram_ar_bits_addr;
  wire [7:0]  _dcache_to_sram_ar_bits_len;
  wire        _dcache_to_sram_r_ready;
  wire        _dcache_to_sram_aw_valid;
  wire [31:0] _dcache_to_sram_aw_bits_addr;
  wire [7:0]  _dcache_to_sram_aw_bits_len;
  wire        _dcache_to_sram_w_valid;
  wire [31:0] _dcache_to_sram_w_bits_data;
  wire        _memXbar_io_in_req_ready;
  wire        _memXbar_io_in_resp_valid;
  wire [31:0] _memXbar_io_in_resp_bits_rdata;
  wire        _memXbar_io_in_resp_bits_wresp;
  wire        _memXbar_io_out_0_req_valid;
  wire [31:0] _memXbar_io_out_0_req_bits_addr;
  wire [31:0] _memXbar_io_out_0_req_bits_wdata;
  wire [31:0] _memXbar_io_out_0_req_bits_wmask;
  wire [3:0]  _memXbar_io_out_0_req_bits_cmd;
  wire        _memXbar_io_out_1_req_valid;
  wire [31:0] _memXbar_io_out_1_req_bits_addr;
  wire [31:0] _memXbar_io_out_1_req_bits_wdata;
  wire [31:0] _memXbar_io_out_1_req_bits_wmask;
  wire [3:0]  _memXbar_io_out_1_req_bits_cmd;
  wire        _ram_i2_axi_ar_ready;
  wire        _ram_i2_axi_r_valid;
  wire [31:0] _ram_i2_axi_r_bits_data;
  wire        _ram_i2_axi_r_bits_last;
  wire        _ram_i2_axi_aw_ready;
  wire        _ram_i2_axi_w_ready;
  wire        _bridge_io_in_req_ready;
  wire        _bridge_io_in_resp_valid;
  wire [31:0] _bridge_io_in_resp_bits_rdata;
  wire        _bridge_io_out_ar_valid;
  wire [31:0] _bridge_io_out_ar_bits_addr;
  wire        _bridge_io_out_r_ready;
  wire [31:0] _bridge_io_out_aw_bits_addr;
  wire        _icache_io_in_req_ready;
  wire        _icache_io_in_resp_valid;
  wire [31:0] _icache_io_in_resp_bits_rdata;
  wire        _icache_io_mem_req_valid;
  wire [31:0] _icache_io_mem_req_bits_addr;
  wire        _icache_io_mem_resp_ready;
  wire [31:0] _icache_io_stage2Addr;
  wire [31:0] _icache_s2_io_in_bits_addr__bore;
  wire        _icache_s2_io_in_valid__bore;
  wire        _ram_i_axi_ar_ready;
  wire        _ram_i_axi_r_valid;
  wire [31:0] _ram_i_axi_r_bits_data;
  wire        _IFU_i_to_IDU_valid;
  wire [31:0] _IFU_i_to_IDU_bits_inst;
  wire [31:0] _IFU_i_to_IDU_bits_pc;
  wire        _IFU_i_from_WBU_ready;
  wire        _IFU_i_to_mem_req_valid;
  wire [31:0] _IFU_i_to_mem_req_bits_addr;
  wire        _IFU_i_to_mem_resp_ready;
  wire [31:0] _IFU_i_fetch_PC;
  wire        _WBU_i_from_EXU_ready;
  wire        _WBU_i_to_ISU_valid;
  wire        _WBU_i_to_ISU_bits_reg_wen;
  wire [31:0] _WBU_i_to_ISU_bits_wdata;
  wire [4:0]  _WBU_i_to_ISU_bits_rd;
  wire [4:0]  _WBU_i_to_ISU_bits_hazard_rd;
  wire        _WBU_i_to_ISU_bits_hazard_have_wb;
  wire        _WBU_i_to_ISU_bits_hazard_isBR;
  wire        _WBU_i_to_IFU_valid;
  wire        _WBU_i_to_IFU_bits_redirect_valid;
  wire [31:0] _WBU_i_to_IFU_bits_redirect_target;
  wire        _EXU_i_from_ISU_ready;
  wire        _EXU_i_to_WBU_valid;
  wire [31:0] _EXU_i_to_WBU_bits_alu_result;
  wire [31:0] _EXU_i_to_WBU_bits_mdu_result;
  wire [31:0] _EXU_i_to_WBU_bits_lsu_rdata;
  wire [31:0] _EXU_i_to_WBU_bits_csr_rdata;
  wire [31:0] _EXU_i_to_WBU_bits_pc;
  wire        _EXU_i_to_WBU_bits_reg_wen;
  wire [4:0]  _EXU_i_to_WBU_bits_rd;
  wire [2:0]  _EXU_i_to_WBU_bits_fu_op;
  wire        _EXU_i_to_WBU_bits_redirect_valid;
  wire [31:0] _EXU_i_to_WBU_bits_redirect_target;
  wire [31:0] _EXU_i_to_WBU_bits_inst;
  wire        _EXU_i_lsu_to_mem_req_valid;
  wire [31:0] _EXU_i_lsu_to_mem_req_bits_addr;
  wire [31:0] _EXU_i_lsu_to_mem_req_bits_wdata;
  wire [31:0] _EXU_i_lsu_to_mem_req_bits_wmask;
  wire [3:0]  _EXU_i_lsu_to_mem_req_bits_cmd;
  wire        _EXU_i_lsu_to_mem_resp_ready;
  wire [4:0]  _EXU_i_to_ISU_hazard_rd;
  wire        _EXU_i_to_ISU_hazard_have_wb;
  wire        _EXU_i_to_ISU_hazard_isBR;
  wire        _ISU_i_from_IDU_ready;
  wire        _ISU_i_to_EXU_valid;
  wire [31:0] _ISU_i_to_EXU_bits_imm;
  wire [31:0] _ISU_i_to_EXU_bits_pc;
  wire [31:0] _ISU_i_to_EXU_bits_rdata1;
  wire [31:0] _ISU_i_to_EXU_bits_rdata2;
  wire [4:0]  _ISU_i_to_EXU_bits_rd;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_reg_wen;
  wire [2:0]  _ISU_i_to_EXU_bits_ctrl_sig_fu_op;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_mem_wen;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_is_ebreak;
  wire        _ISU_i_to_EXU_bits_ctrl_sig_not_impl;
  wire [1:0]  _ISU_i_to_EXU_bits_ctrl_sig_src1_op;
  wire [1:0]  _ISU_i_to_EXU_bits_ctrl_sig_src2_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_alu_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_lsu_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_bru_op;
  wire [2:0]  _ISU_i_to_EXU_bits_ctrl_sig_csr_op;
  wire [3:0]  _ISU_i_to_EXU_bits_ctrl_sig_mdu_op;
  wire [31:0] _ISU_i_to_EXU_bits_inst;
  wire        _IDU_i_from_IFU_ready;
  wire        _IDU_i_to_ISU_valid;
  wire [31:0] _IDU_i_to_ISU_bits_imm;
  wire [31:0] _IDU_i_to_ISU_bits_pc;
  wire [4:0]  _IDU_i_to_ISU_bits_rs1;
  wire [4:0]  _IDU_i_to_ISU_bits_rs2;
  wire [4:0]  _IDU_i_to_ISU_bits_rd;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_reg_wen;
  wire [2:0]  _IDU_i_to_ISU_bits_ctrl_sig_fu_op;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_mem_wen;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_is_ebreak;
  wire        _IDU_i_to_ISU_bits_ctrl_sig_not_impl;
  wire [1:0]  _IDU_i_to_ISU_bits_ctrl_sig_src1_op;
  wire [1:0]  _IDU_i_to_ISU_bits_ctrl_sig_src2_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_alu_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_lsu_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_bru_op;
  wire [2:0]  _IDU_i_to_ISU_bits_ctrl_sig_csr_op;
  wire [3:0]  _IDU_i_to_ISU_bits_ctrl_sig_mdu_op;
  wire [31:0] _IDU_i_to_ISU_bits_inst;
  reg         valid;
  reg  [31:0] IDU_i_from_IFU_bits_r_inst;
  reg  [31:0] IDU_i_from_IFU_bits_r_pc;
  reg         valid_1;
  reg  [31:0] ISU_i_from_IDU_bits_r_imm;
  reg  [31:0] ISU_i_from_IDU_bits_r_pc;
  reg  [4:0]  ISU_i_from_IDU_bits_r_rs1;
  reg  [4:0]  ISU_i_from_IDU_bits_r_rs2;
  reg  [4:0]  ISU_i_from_IDU_bits_r_rd;
  reg         ISU_i_from_IDU_bits_r_ctrl_sig_reg_wen;
  reg  [2:0]  ISU_i_from_IDU_bits_r_ctrl_sig_fu_op;
  reg         ISU_i_from_IDU_bits_r_ctrl_sig_mem_wen;
  reg         ISU_i_from_IDU_bits_r_ctrl_sig_is_ebreak;
  reg         ISU_i_from_IDU_bits_r_ctrl_sig_not_impl;
  reg  [1:0]  ISU_i_from_IDU_bits_r_ctrl_sig_src1_op;
  reg  [1:0]  ISU_i_from_IDU_bits_r_ctrl_sig_src2_op;
  reg  [3:0]  ISU_i_from_IDU_bits_r_ctrl_sig_alu_op;
  reg  [3:0]  ISU_i_from_IDU_bits_r_ctrl_sig_lsu_op;
  reg  [3:0]  ISU_i_from_IDU_bits_r_ctrl_sig_bru_op;
  reg  [2:0]  ISU_i_from_IDU_bits_r_ctrl_sig_csr_op;
  reg  [3:0]  ISU_i_from_IDU_bits_r_ctrl_sig_mdu_op;
  reg  [31:0] ISU_i_from_IDU_bits_r_inst;
  reg         valid_2;
  reg  [31:0] EXU_i_from_ISU_bits_r_imm;
  reg  [31:0] EXU_i_from_ISU_bits_r_pc;
  reg  [31:0] EXU_i_from_ISU_bits_r_rdata1;
  reg  [31:0] EXU_i_from_ISU_bits_r_rdata2;
  reg  [4:0]  EXU_i_from_ISU_bits_r_rd;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_reg_wen;
  reg  [2:0]  EXU_i_from_ISU_bits_r_ctrl_sig_fu_op;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_mem_wen;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_is_ebreak;
  reg         EXU_i_from_ISU_bits_r_ctrl_sig_not_impl;
  reg  [1:0]  EXU_i_from_ISU_bits_r_ctrl_sig_src1_op;
  reg  [1:0]  EXU_i_from_ISU_bits_r_ctrl_sig_src2_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_alu_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_bru_op;
  reg  [2:0]  EXU_i_from_ISU_bits_r_ctrl_sig_csr_op;
  reg  [3:0]  EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op;
  reg  [31:0] EXU_i_from_ISU_bits_r_inst;
  wire        _GEN = _ISU_i_from_IDU_ready & _IDU_i_to_ISU_valid;
  wire        _GEN_0 =
    _WBU_i_to_IFU_bits_redirect_valid & _IDU_i_from_IFU_ready & _IFU_i_to_IDU_valid;
  wire        _IDU_i_from_IFU_bits_T_1 = _IFU_i_to_IDU_valid & _IDU_i_from_IFU_ready;
  wire        _GEN_1 = _EXU_i_from_ISU_ready & _ISU_i_to_EXU_valid;
  wire        _GEN_2 = _WBU_i_to_IFU_bits_redirect_valid & _GEN;
  wire        _ISU_i_from_IDU_bits_T_1 = _IDU_i_to_ISU_valid & _ISU_i_from_IDU_ready;
  wire        _GEN_3 = _WBU_i_to_IFU_bits_redirect_valid & _GEN_1;
  wire        _EXU_i_from_ISU_bits_T_1 = _ISU_i_to_EXU_valid & _EXU_i_from_ISU_ready;
  always @(posedge clock) begin
    if (reset) begin
      valid <= 1'h0;
      valid_1 <= 1'h0;
      valid_2 <= 1'h0;
    end
    else begin
      valid <= ~_GEN_0 & (_IDU_i_from_IFU_bits_T_1 | ~_GEN & valid);
      valid_1 <= ~_GEN_2 & (_ISU_i_from_IDU_bits_T_1 | ~_GEN_1 & valid_1);
      valid_2 <=
        ~_GEN_3
        & (_EXU_i_from_ISU_bits_T_1 | ~(_WBU_i_from_EXU_ready & _EXU_i_to_WBU_valid)
           & valid_2);
    end
    if (_IDU_i_from_IFU_bits_T_1) begin
      if (_GEN_0) begin
        IDU_i_from_IFU_bits_r_inst <= 32'h0;
        IDU_i_from_IFU_bits_r_pc <= 32'h0;
      end
      else begin
        IDU_i_from_IFU_bits_r_inst <= _IFU_i_to_IDU_bits_inst;
        IDU_i_from_IFU_bits_r_pc <= _IFU_i_to_IDU_bits_pc;
      end
    end
    if (_ISU_i_from_IDU_bits_T_1) begin
      if (_GEN_2) begin
        ISU_i_from_IDU_bits_r_imm <= 32'h0;
        ISU_i_from_IDU_bits_r_pc <= 32'h0;
        ISU_i_from_IDU_bits_r_rs1 <= 5'h0;
        ISU_i_from_IDU_bits_r_rs2 <= 5'h0;
        ISU_i_from_IDU_bits_r_rd <= 5'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_fu_op <= 3'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_src1_op <= 2'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_src2_op <= 2'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_alu_op <= 4'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_lsu_op <= 4'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_bru_op <= 4'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_csr_op <= 3'h0;
        ISU_i_from_IDU_bits_r_ctrl_sig_mdu_op <= 4'h0;
        ISU_i_from_IDU_bits_r_inst <= 32'h0;
      end
      else begin
        ISU_i_from_IDU_bits_r_imm <= _IDU_i_to_ISU_bits_imm;
        ISU_i_from_IDU_bits_r_pc <= _IDU_i_to_ISU_bits_pc;
        ISU_i_from_IDU_bits_r_rs1 <= _IDU_i_to_ISU_bits_rs1;
        ISU_i_from_IDU_bits_r_rs2 <= _IDU_i_to_ISU_bits_rs2;
        ISU_i_from_IDU_bits_r_rd <= _IDU_i_to_ISU_bits_rd;
        ISU_i_from_IDU_bits_r_ctrl_sig_fu_op <= _IDU_i_to_ISU_bits_ctrl_sig_fu_op;
        ISU_i_from_IDU_bits_r_ctrl_sig_src1_op <= _IDU_i_to_ISU_bits_ctrl_sig_src1_op;
        ISU_i_from_IDU_bits_r_ctrl_sig_src2_op <= _IDU_i_to_ISU_bits_ctrl_sig_src2_op;
        ISU_i_from_IDU_bits_r_ctrl_sig_alu_op <= _IDU_i_to_ISU_bits_ctrl_sig_alu_op;
        ISU_i_from_IDU_bits_r_ctrl_sig_lsu_op <= _IDU_i_to_ISU_bits_ctrl_sig_lsu_op;
        ISU_i_from_IDU_bits_r_ctrl_sig_bru_op <= _IDU_i_to_ISU_bits_ctrl_sig_bru_op;
        ISU_i_from_IDU_bits_r_ctrl_sig_csr_op <= _IDU_i_to_ISU_bits_ctrl_sig_csr_op;
        ISU_i_from_IDU_bits_r_ctrl_sig_mdu_op <= _IDU_i_to_ISU_bits_ctrl_sig_mdu_op;
        ISU_i_from_IDU_bits_r_inst <= _IDU_i_to_ISU_bits_inst;
      end
      ISU_i_from_IDU_bits_r_ctrl_sig_reg_wen <=
        ~_GEN_2 & _IDU_i_to_ISU_bits_ctrl_sig_reg_wen;
      ISU_i_from_IDU_bits_r_ctrl_sig_mem_wen <=
        ~_GEN_2 & _IDU_i_to_ISU_bits_ctrl_sig_mem_wen;
      ISU_i_from_IDU_bits_r_ctrl_sig_is_ebreak <=
        ~_GEN_2 & _IDU_i_to_ISU_bits_ctrl_sig_is_ebreak;
      ISU_i_from_IDU_bits_r_ctrl_sig_not_impl <=
        ~_GEN_2 & _IDU_i_to_ISU_bits_ctrl_sig_not_impl;
    end
    if (_EXU_i_from_ISU_bits_T_1) begin
      if (_GEN_3) begin
        EXU_i_from_ISU_bits_r_imm <= 32'h0;
        EXU_i_from_ISU_bits_r_pc <= 32'h0;
        EXU_i_from_ISU_bits_r_rdata1 <= 32'h0;
        EXU_i_from_ISU_bits_r_rdata2 <= 32'h0;
        EXU_i_from_ISU_bits_r_rd <= 5'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_fu_op <= 3'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_src1_op <= 2'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_src2_op <= 2'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_alu_op <= 4'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op <= 4'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_bru_op <= 4'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_csr_op <= 3'h0;
        EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op <= 4'h0;
        EXU_i_from_ISU_bits_r_inst <= 32'h0;
      end
      else begin
        EXU_i_from_ISU_bits_r_imm <= _ISU_i_to_EXU_bits_imm;
        EXU_i_from_ISU_bits_r_pc <= _ISU_i_to_EXU_bits_pc;
        EXU_i_from_ISU_bits_r_rdata1 <= _ISU_i_to_EXU_bits_rdata1;
        EXU_i_from_ISU_bits_r_rdata2 <= _ISU_i_to_EXU_bits_rdata2;
        EXU_i_from_ISU_bits_r_rd <= _ISU_i_to_EXU_bits_rd;
        EXU_i_from_ISU_bits_r_ctrl_sig_fu_op <= _ISU_i_to_EXU_bits_ctrl_sig_fu_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_src1_op <= _ISU_i_to_EXU_bits_ctrl_sig_src1_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_src2_op <= _ISU_i_to_EXU_bits_ctrl_sig_src2_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_alu_op <= _ISU_i_to_EXU_bits_ctrl_sig_alu_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op <= _ISU_i_to_EXU_bits_ctrl_sig_lsu_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_bru_op <= _ISU_i_to_EXU_bits_ctrl_sig_bru_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_csr_op <= _ISU_i_to_EXU_bits_ctrl_sig_csr_op;
        EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op <= _ISU_i_to_EXU_bits_ctrl_sig_mdu_op;
        EXU_i_from_ISU_bits_r_inst <= _ISU_i_to_EXU_bits_inst;
      end
      EXU_i_from_ISU_bits_r_ctrl_sig_reg_wen <=
        ~_GEN_3 & _ISU_i_to_EXU_bits_ctrl_sig_reg_wen;
      EXU_i_from_ISU_bits_r_ctrl_sig_mem_wen <=
        ~_GEN_3 & _ISU_i_to_EXU_bits_ctrl_sig_mem_wen;
      EXU_i_from_ISU_bits_r_ctrl_sig_is_ebreak <=
        ~_GEN_3 & _ISU_i_to_EXU_bits_ctrl_sig_is_ebreak;
      EXU_i_from_ISU_bits_r_ctrl_sig_not_impl <=
        ~_GEN_3 & _ISU_i_to_EXU_bits_ctrl_sig_not_impl;
    end
  end // always @(posedge)
  IDU IDU_i (
    .from_IFU_valid                 (valid),
    .from_IFU_bits_inst             (IDU_i_from_IFU_bits_r_inst),
    .from_IFU_bits_pc               (IDU_i_from_IFU_bits_r_pc),
    .to_ISU_ready                   (_ISU_i_from_IDU_ready),
    .from_IFU_ready                 (_IDU_i_from_IFU_ready),
    .to_ISU_valid                   (_IDU_i_to_ISU_valid),
    .to_ISU_bits_imm                (_IDU_i_to_ISU_bits_imm),
    .to_ISU_bits_pc                 (_IDU_i_to_ISU_bits_pc),
    .to_ISU_bits_rs1                (_IDU_i_to_ISU_bits_rs1),
    .to_ISU_bits_rs2                (_IDU_i_to_ISU_bits_rs2),
    .to_ISU_bits_rd                 (_IDU_i_to_ISU_bits_rd),
    .to_ISU_bits_ctrl_sig_reg_wen   (_IDU_i_to_ISU_bits_ctrl_sig_reg_wen),
    .to_ISU_bits_ctrl_sig_fu_op     (_IDU_i_to_ISU_bits_ctrl_sig_fu_op),
    .to_ISU_bits_ctrl_sig_mem_wen   (_IDU_i_to_ISU_bits_ctrl_sig_mem_wen),
    .to_ISU_bits_ctrl_sig_is_ebreak (_IDU_i_to_ISU_bits_ctrl_sig_is_ebreak),
    .to_ISU_bits_ctrl_sig_not_impl  (_IDU_i_to_ISU_bits_ctrl_sig_not_impl),
    .to_ISU_bits_ctrl_sig_src1_op   (_IDU_i_to_ISU_bits_ctrl_sig_src1_op),
    .to_ISU_bits_ctrl_sig_src2_op   (_IDU_i_to_ISU_bits_ctrl_sig_src2_op),
    .to_ISU_bits_ctrl_sig_alu_op    (_IDU_i_to_ISU_bits_ctrl_sig_alu_op),
    .to_ISU_bits_ctrl_sig_lsu_op    (_IDU_i_to_ISU_bits_ctrl_sig_lsu_op),
    .to_ISU_bits_ctrl_sig_bru_op    (_IDU_i_to_ISU_bits_ctrl_sig_bru_op),
    .to_ISU_bits_ctrl_sig_csr_op    (_IDU_i_to_ISU_bits_ctrl_sig_csr_op),
    .to_ISU_bits_ctrl_sig_mdu_op    (_IDU_i_to_ISU_bits_ctrl_sig_mdu_op),
    .to_ISU_bits_inst               (_IDU_i_to_ISU_bits_inst)
  );
  ISU ISU_i (
    .clock                            (clock),
    .reset                            (reset),
    .from_IDU_valid                   (valid_1),
    .from_IDU_bits_imm                (ISU_i_from_IDU_bits_r_imm),
    .from_IDU_bits_pc                 (ISU_i_from_IDU_bits_r_pc),
    .from_IDU_bits_rs1                (ISU_i_from_IDU_bits_r_rs1),
    .from_IDU_bits_rs2                (ISU_i_from_IDU_bits_r_rs2),
    .from_IDU_bits_rd                 (ISU_i_from_IDU_bits_r_rd),
    .from_IDU_bits_ctrl_sig_reg_wen   (ISU_i_from_IDU_bits_r_ctrl_sig_reg_wen),
    .from_IDU_bits_ctrl_sig_fu_op     (ISU_i_from_IDU_bits_r_ctrl_sig_fu_op),
    .from_IDU_bits_ctrl_sig_mem_wen   (ISU_i_from_IDU_bits_r_ctrl_sig_mem_wen),
    .from_IDU_bits_ctrl_sig_is_ebreak (ISU_i_from_IDU_bits_r_ctrl_sig_is_ebreak),
    .from_IDU_bits_ctrl_sig_not_impl  (ISU_i_from_IDU_bits_r_ctrl_sig_not_impl),
    .from_IDU_bits_ctrl_sig_src1_op   (ISU_i_from_IDU_bits_r_ctrl_sig_src1_op),
    .from_IDU_bits_ctrl_sig_src2_op   (ISU_i_from_IDU_bits_r_ctrl_sig_src2_op),
    .from_IDU_bits_ctrl_sig_alu_op    (ISU_i_from_IDU_bits_r_ctrl_sig_alu_op),
    .from_IDU_bits_ctrl_sig_lsu_op    (ISU_i_from_IDU_bits_r_ctrl_sig_lsu_op),
    .from_IDU_bits_ctrl_sig_bru_op    (ISU_i_from_IDU_bits_r_ctrl_sig_bru_op),
    .from_IDU_bits_ctrl_sig_csr_op    (ISU_i_from_IDU_bits_r_ctrl_sig_csr_op),
    .from_IDU_bits_ctrl_sig_mdu_op    (ISU_i_from_IDU_bits_r_ctrl_sig_mdu_op),
    .from_IDU_bits_inst               (ISU_i_from_IDU_bits_r_inst),
    .from_WBU_valid                   (_WBU_i_to_ISU_valid),
    .from_WBU_bits_reg_wen            (_WBU_i_to_ISU_bits_reg_wen),
    .from_WBU_bits_wdata              (_WBU_i_to_ISU_bits_wdata),
    .from_WBU_bits_rd                 (_WBU_i_to_ISU_bits_rd),
    .from_WBU_bits_hazard_rd          (_WBU_i_to_ISU_bits_hazard_rd),
    .from_WBU_bits_hazard_have_wb     (_WBU_i_to_ISU_bits_hazard_have_wb),
    .from_WBU_bits_hazard_isBR        (_WBU_i_to_ISU_bits_hazard_isBR),
    .to_EXU_ready                     (_EXU_i_from_ISU_ready),
    .from_EXU_hazard_rd               (_EXU_i_to_ISU_hazard_rd),
    .from_EXU_hazard_have_wb          (_EXU_i_to_ISU_hazard_have_wb),
    .from_EXU_hazard_isBR             (_EXU_i_to_ISU_hazard_isBR),
    .from_IDU_ready                   (_ISU_i_from_IDU_ready),
    .to_EXU_valid                     (_ISU_i_to_EXU_valid),
    .to_EXU_bits_imm                  (_ISU_i_to_EXU_bits_imm),
    .to_EXU_bits_pc                   (_ISU_i_to_EXU_bits_pc),
    .to_EXU_bits_rdata1               (_ISU_i_to_EXU_bits_rdata1),
    .to_EXU_bits_rdata2               (_ISU_i_to_EXU_bits_rdata2),
    .to_EXU_bits_rd                   (_ISU_i_to_EXU_bits_rd),
    .to_EXU_bits_ctrl_sig_reg_wen     (_ISU_i_to_EXU_bits_ctrl_sig_reg_wen),
    .to_EXU_bits_ctrl_sig_fu_op       (_ISU_i_to_EXU_bits_ctrl_sig_fu_op),
    .to_EXU_bits_ctrl_sig_mem_wen     (_ISU_i_to_EXU_bits_ctrl_sig_mem_wen),
    .to_EXU_bits_ctrl_sig_is_ebreak   (_ISU_i_to_EXU_bits_ctrl_sig_is_ebreak),
    .to_EXU_bits_ctrl_sig_not_impl    (_ISU_i_to_EXU_bits_ctrl_sig_not_impl),
    .to_EXU_bits_ctrl_sig_src1_op     (_ISU_i_to_EXU_bits_ctrl_sig_src1_op),
    .to_EXU_bits_ctrl_sig_src2_op     (_ISU_i_to_EXU_bits_ctrl_sig_src2_op),
    .to_EXU_bits_ctrl_sig_alu_op      (_ISU_i_to_EXU_bits_ctrl_sig_alu_op),
    .to_EXU_bits_ctrl_sig_lsu_op      (_ISU_i_to_EXU_bits_ctrl_sig_lsu_op),
    .to_EXU_bits_ctrl_sig_bru_op      (_ISU_i_to_EXU_bits_ctrl_sig_bru_op),
    .to_EXU_bits_ctrl_sig_csr_op      (_ISU_i_to_EXU_bits_ctrl_sig_csr_op),
    .to_EXU_bits_ctrl_sig_mdu_op      (_ISU_i_to_EXU_bits_ctrl_sig_mdu_op),
    .to_EXU_bits_inst                 (_ISU_i_to_EXU_bits_inst)
  );
  EXU_pipeline EXU_i (
    .clock                            (clock),
    .reset                            (reset),
    .from_ISU_valid                   (valid_2),
    .from_ISU_bits_imm                (EXU_i_from_ISU_bits_r_imm),
    .from_ISU_bits_pc                 (EXU_i_from_ISU_bits_r_pc),
    .from_ISU_bits_rdata1             (EXU_i_from_ISU_bits_r_rdata1),
    .from_ISU_bits_rdata2             (EXU_i_from_ISU_bits_r_rdata2),
    .from_ISU_bits_rd                 (EXU_i_from_ISU_bits_r_rd),
    .from_ISU_bits_ctrl_sig_reg_wen   (EXU_i_from_ISU_bits_r_ctrl_sig_reg_wen),
    .from_ISU_bits_ctrl_sig_fu_op     (EXU_i_from_ISU_bits_r_ctrl_sig_fu_op),
    .from_ISU_bits_ctrl_sig_mem_wen   (EXU_i_from_ISU_bits_r_ctrl_sig_mem_wen),
    .from_ISU_bits_ctrl_sig_is_ebreak (EXU_i_from_ISU_bits_r_ctrl_sig_is_ebreak),
    .from_ISU_bits_ctrl_sig_not_impl  (EXU_i_from_ISU_bits_r_ctrl_sig_not_impl),
    .from_ISU_bits_ctrl_sig_src1_op   (EXU_i_from_ISU_bits_r_ctrl_sig_src1_op),
    .from_ISU_bits_ctrl_sig_src2_op   (EXU_i_from_ISU_bits_r_ctrl_sig_src2_op),
    .from_ISU_bits_ctrl_sig_alu_op    (EXU_i_from_ISU_bits_r_ctrl_sig_alu_op),
    .from_ISU_bits_ctrl_sig_lsu_op    (EXU_i_from_ISU_bits_r_ctrl_sig_lsu_op),
    .from_ISU_bits_ctrl_sig_bru_op    (EXU_i_from_ISU_bits_r_ctrl_sig_bru_op),
    .from_ISU_bits_ctrl_sig_csr_op    (EXU_i_from_ISU_bits_r_ctrl_sig_csr_op),
    .from_ISU_bits_ctrl_sig_mdu_op    (EXU_i_from_ISU_bits_r_ctrl_sig_mdu_op),
    .from_ISU_bits_inst               (EXU_i_from_ISU_bits_r_inst),
    .to_WBU_ready                     (_WBU_i_from_EXU_ready),
    .lsu_to_mem_req_ready             (_memXbar_io_in_req_ready),
    .lsu_to_mem_resp_valid            (_memXbar_io_in_resp_valid),
    .lsu_to_mem_resp_bits_rdata       (_memXbar_io_in_resp_bits_rdata),
    .lsu_to_mem_resp_bits_wresp       (_memXbar_io_in_resp_bits_wresp),
    .from_ISU_ready                   (_EXU_i_from_ISU_ready),
    .to_WBU_valid                     (_EXU_i_to_WBU_valid),
    .to_WBU_bits_alu_result           (_EXU_i_to_WBU_bits_alu_result),
    .to_WBU_bits_mdu_result           (_EXU_i_to_WBU_bits_mdu_result),
    .to_WBU_bits_lsu_rdata            (_EXU_i_to_WBU_bits_lsu_rdata),
    .to_WBU_bits_csr_rdata            (_EXU_i_to_WBU_bits_csr_rdata),
    .to_WBU_bits_pc                   (_EXU_i_to_WBU_bits_pc),
    .to_WBU_bits_reg_wen              (_EXU_i_to_WBU_bits_reg_wen),
    .to_WBU_bits_rd                   (_EXU_i_to_WBU_bits_rd),
    .to_WBU_bits_fu_op                (_EXU_i_to_WBU_bits_fu_op),
    .to_WBU_bits_redirect_valid       (_EXU_i_to_WBU_bits_redirect_valid),
    .to_WBU_bits_redirect_target      (_EXU_i_to_WBU_bits_redirect_target),
    .to_WBU_bits_inst                 (_EXU_i_to_WBU_bits_inst),
    .difftest_mcause                  (io_out_difftest_mcause),
    .difftest_mepc                    (io_out_difftest_mepc),
    .difftest_mstatus                 (io_out_difftest_mstatus),
    .difftest_mtvec                   (io_out_difftest_mtvec),
    .lsu_to_mem_req_valid             (_EXU_i_lsu_to_mem_req_valid),
    .lsu_to_mem_req_bits_addr         (_EXU_i_lsu_to_mem_req_bits_addr),
    .lsu_to_mem_req_bits_wdata        (_EXU_i_lsu_to_mem_req_bits_wdata),
    .lsu_to_mem_req_bits_wmask        (_EXU_i_lsu_to_mem_req_bits_wmask),
    .lsu_to_mem_req_bits_cmd          (_EXU_i_lsu_to_mem_req_bits_cmd),
    .lsu_to_mem_resp_ready            (_EXU_i_lsu_to_mem_resp_ready),
    .to_ISU_hazard_rd                 (_EXU_i_to_ISU_hazard_rd),
    .to_ISU_hazard_have_wb            (_EXU_i_to_ISU_hazard_have_wb),
    .to_ISU_hazard_isBR               (_EXU_i_to_ISU_hazard_isBR)
  );
  WBU WBU_i (
    .clock                         (clock),
    .reset                         (reset),
    .from_EXU_valid                (_EXU_i_to_WBU_valid),
    .from_EXU_bits_alu_result      (_EXU_i_to_WBU_bits_alu_result),
    .from_EXU_bits_mdu_result      (_EXU_i_to_WBU_bits_mdu_result),
    .from_EXU_bits_lsu_rdata       (_EXU_i_to_WBU_bits_lsu_rdata),
    .from_EXU_bits_csr_rdata       (_EXU_i_to_WBU_bits_csr_rdata),
    .from_EXU_bits_pc              (_EXU_i_to_WBU_bits_pc),
    .from_EXU_bits_reg_wen         (_EXU_i_to_WBU_bits_reg_wen),
    .from_EXU_bits_rd              (_EXU_i_to_WBU_bits_rd),
    .from_EXU_bits_fu_op           (_EXU_i_to_WBU_bits_fu_op),
    .from_EXU_bits_redirect_valid  (_EXU_i_to_WBU_bits_redirect_valid),
    .from_EXU_bits_redirect_target (_EXU_i_to_WBU_bits_redirect_target),
    .from_EXU_bits_inst            (_EXU_i_to_WBU_bits_inst),
    .to_IFU_ready                  (_IFU_i_from_WBU_ready),
    .from_EXU_ready                (_WBU_i_from_EXU_ready),
    .to_ISU_valid                  (_WBU_i_to_ISU_valid),
    .to_ISU_bits_reg_wen           (_WBU_i_to_ISU_bits_reg_wen),
    .to_ISU_bits_wdata             (_WBU_i_to_ISU_bits_wdata),
    .to_ISU_bits_rd                (_WBU_i_to_ISU_bits_rd),
    .to_ISU_bits_hazard_rd         (_WBU_i_to_ISU_bits_hazard_rd),
    .to_ISU_bits_hazard_have_wb    (_WBU_i_to_ISU_bits_hazard_have_wb),
    .to_ISU_bits_hazard_isBR       (_WBU_i_to_ISU_bits_hazard_isBR),
    .to_IFU_valid                  (_WBU_i_to_IFU_valid),
    .to_IFU_bits_redirect_valid    (_WBU_i_to_IFU_bits_redirect_valid),
    .to_IFU_bits_redirect_target   (_WBU_i_to_IFU_bits_redirect_target),
    .wb                            (io_out_wb)
  );
  IFU_pipeline IFU_i (
    .clock                         (clock),
    .reset                         (reset),
    .to_IDU_ready                  (_IDU_i_from_IFU_ready),
    .from_WBU_valid                (_WBU_i_to_IFU_valid),
    .from_WBU_bits_redirect_valid  (_WBU_i_to_IFU_bits_redirect_valid),
    .from_WBU_bits_redirect_target (_WBU_i_to_IFU_bits_redirect_target),
    .to_mem_req_ready              (_icache_io_in_req_ready),
    .to_mem_resp_valid             (_icache_io_in_resp_valid),
    .to_mem_resp_bits_rdata        (_icache_io_in_resp_bits_rdata),
    .to_IDU_PC                     (_icache_io_stage2Addr),
    .to_IDU_valid                  (_IFU_i_to_IDU_valid),
    .to_IDU_bits_inst              (_IFU_i_to_IDU_bits_inst),
    .to_IDU_bits_pc                (_IFU_i_to_IDU_bits_pc),
    .from_WBU_ready                (_IFU_i_from_WBU_ready),
    .to_mem_req_valid              (_IFU_i_to_mem_req_valid),
    .to_mem_req_bits_addr          (_IFU_i_to_mem_req_bits_addr),
    .to_mem_resp_ready             (_IFU_i_to_mem_resp_ready),
    .fetch_PC                      (_IFU_i_fetch_PC)
  );
  AXI4RAM ram_i (
    .clock            (clock),
    .reset            (reset),
    .axi_ar_valid     (_bridge_io_out_ar_valid),
    .axi_ar_bits_addr (_bridge_io_out_ar_bits_addr),
    .axi_ar_bits_len  (8'h7),
    .axi_r_ready      (_bridge_io_out_r_ready),
    .axi_aw_valid     (1'h0),
    .axi_aw_bits_addr (_bridge_io_out_aw_bits_addr),
    .axi_aw_bits_len  (8'h7),
    .axi_w_valid      (1'h0),
    .axi_w_bits_data  (32'h0),
    .axi_ar_ready     (_ram_i_axi_ar_ready),
    .axi_r_valid      (_ram_i_axi_r_valid),
    .axi_r_bits_data  (_ram_i_axi_r_bits_data),
    .axi_r_bits_last  (/* unused */),
    .axi_aw_ready     (/* unused */),
    .axi_w_ready      (/* unused */)
  );
  Cache icache (
    .clock                    (clock),
    .reset                    (reset),
    .io_in_req_valid          (_IFU_i_to_mem_req_valid),
    .io_in_req_bits_addr      (_IFU_i_to_mem_req_bits_addr),
    .io_in_resp_ready         (_IFU_i_to_mem_resp_ready),
    .io_mem_req_ready         (_bridge_io_in_req_ready),
    .io_mem_resp_valid        (_bridge_io_in_resp_valid),
    .io_mem_resp_bits_rdata   (_bridge_io_in_resp_bits_rdata),
    .io_flush                 (_WBU_i_to_IFU_bits_redirect_valid),
    .io_in_req_ready          (_icache_io_in_req_ready),
    .io_in_resp_valid         (_icache_io_in_resp_valid),
    .io_in_resp_bits_rdata    (_icache_io_in_resp_bits_rdata),
    .io_mem_req_valid         (_icache_io_mem_req_valid),
    .io_mem_req_bits_addr     (_icache_io_mem_req_bits_addr),
    .io_mem_resp_ready        (_icache_io_mem_resp_ready),
    .io_stage2Addr            (_icache_io_stage2Addr),
    .s2_io_in_bits_addr__bore (_icache_s2_io_in_bits_addr__bore),
    .s2_io_in_valid__bore     (_icache_s2_io_in_valid__bore)
  );
  SimpleBus2AXI4Converter bridge (
    .io_in_req_valid       (_icache_io_mem_req_valid),
    .io_in_req_bits_addr   (_icache_io_mem_req_bits_addr),
    .io_in_resp_ready      (_icache_io_mem_resp_ready),
    .io_out_ar_ready       (_ram_i_axi_ar_ready),
    .io_out_r_valid        (_ram_i_axi_r_valid),
    .io_out_r_bits_data    (_ram_i_axi_r_bits_data),
    .io_in_req_ready       (_bridge_io_in_req_ready),
    .io_in_resp_valid      (_bridge_io_in_resp_valid),
    .io_in_resp_bits_rdata (_bridge_io_in_resp_bits_rdata),
    .io_out_ar_valid       (_bridge_io_out_ar_valid),
    .io_out_ar_bits_addr   (_bridge_io_out_ar_bits_addr),
    .io_out_r_ready        (_bridge_io_out_r_ready),
    .io_out_aw_bits_addr   (_bridge_io_out_aw_bits_addr)
  );
  AXI4RAM ram_i2 (
    .clock            (clock),
    .reset            (reset),
    .axi_ar_valid     (_dcache_to_sram_ar_valid),
    .axi_ar_bits_addr (_dcache_to_sram_ar_bits_addr),
    .axi_ar_bits_len  (_dcache_to_sram_ar_bits_len),
    .axi_r_ready      (_dcache_to_sram_r_ready),
    .axi_aw_valid     (_dcache_to_sram_aw_valid),
    .axi_aw_bits_addr (_dcache_to_sram_aw_bits_addr),
    .axi_aw_bits_len  (_dcache_to_sram_aw_bits_len),
    .axi_w_valid      (_dcache_to_sram_w_valid),
    .axi_w_bits_data  (_dcache_to_sram_w_bits_data),
    .axi_ar_ready     (_ram_i2_axi_ar_ready),
    .axi_r_valid      (_ram_i2_axi_r_valid),
    .axi_r_bits_data  (_ram_i2_axi_r_bits_data),
    .axi_r_bits_last  (_ram_i2_axi_r_bits_last),
    .axi_aw_ready     (_ram_i2_axi_aw_ready),
    .axi_w_ready      (_ram_i2_axi_w_ready)
  );
  SimpleBusCrossBar1toN memXbar (
    .clock                    (clock),
    .reset                    (reset),
    .io_in_req_valid          (_EXU_i_lsu_to_mem_req_valid),
    .io_in_req_bits_addr      (_EXU_i_lsu_to_mem_req_bits_addr),
    .io_in_req_bits_wdata     (_EXU_i_lsu_to_mem_req_bits_wdata),
    .io_in_req_bits_wmask     (_EXU_i_lsu_to_mem_req_bits_wmask),
    .io_in_req_bits_cmd       (_EXU_i_lsu_to_mem_req_bits_cmd),
    .io_in_resp_ready         (_EXU_i_lsu_to_mem_resp_ready),
    .io_out_0_req_ready       (_dcache_from_lsu_req_ready),
    .io_out_0_resp_valid      (_dcache_from_lsu_resp_valid),
    .io_out_0_resp_bits_rdata (_dcache_from_lsu_resp_bits_rdata),
    .io_out_0_resp_bits_wresp (_dcache_from_lsu_resp_bits_wresp),
    .io_out_1_resp_bits_rdata (_mmio_from_lsu_resp_bits_rdata),
    .io_out_1_resp_bits_wresp (_mmio_from_lsu_resp_bits_wresp),
    .io_in_req_ready          (_memXbar_io_in_req_ready),
    .io_in_resp_valid         (_memXbar_io_in_resp_valid),
    .io_in_resp_bits_rdata    (_memXbar_io_in_resp_bits_rdata),
    .io_in_resp_bits_wresp    (_memXbar_io_in_resp_bits_wresp),
    .io_out_0_req_valid       (_memXbar_io_out_0_req_valid),
    .io_out_0_req_bits_addr   (_memXbar_io_out_0_req_bits_addr),
    .io_out_0_req_bits_wdata  (_memXbar_io_out_0_req_bits_wdata),
    .io_out_0_req_bits_wmask  (_memXbar_io_out_0_req_bits_wmask),
    .io_out_0_req_bits_cmd    (_memXbar_io_out_0_req_bits_cmd),
    .io_out_1_req_valid       (_memXbar_io_out_1_req_valid),
    .io_out_1_req_bits_addr   (_memXbar_io_out_1_req_bits_addr),
    .io_out_1_req_bits_wdata  (_memXbar_io_out_1_req_bits_wdata),
    .io_out_1_req_bits_wmask  (_memXbar_io_out_1_req_bits_wmask),
    .io_out_1_req_bits_cmd    (_memXbar_io_out_1_req_bits_cmd)
  );
  Dcache_SimpleBus dcache (
    .clock                    (clock),
    .reset                    (reset),
    .from_lsu_req_valid       (_memXbar_io_out_0_req_valid),
    .from_lsu_req_bits_addr   (_memXbar_io_out_0_req_bits_addr),
    .from_lsu_req_bits_wdata  (_memXbar_io_out_0_req_bits_wdata),
    .from_lsu_req_bits_wmask  (_memXbar_io_out_0_req_bits_wmask),
    .from_lsu_req_bits_cmd    (_memXbar_io_out_0_req_bits_cmd),
    .to_sram_ar_ready         (_ram_i2_axi_ar_ready),
    .to_sram_r_valid          (_ram_i2_axi_r_valid),
    .to_sram_r_bits_data      (_ram_i2_axi_r_bits_data),
    .to_sram_r_bits_last      (_ram_i2_axi_r_bits_last),
    .to_sram_aw_ready         (_ram_i2_axi_aw_ready),
    .to_sram_w_ready          (_ram_i2_axi_w_ready),
    .from_lsu_req_ready       (_dcache_from_lsu_req_ready),
    .from_lsu_resp_valid      (_dcache_from_lsu_resp_valid),
    .from_lsu_resp_bits_rdata (_dcache_from_lsu_resp_bits_rdata),
    .from_lsu_resp_bits_wresp (_dcache_from_lsu_resp_bits_wresp),
    .to_sram_ar_valid         (_dcache_to_sram_ar_valid),
    .to_sram_ar_bits_addr     (_dcache_to_sram_ar_bits_addr),
    .to_sram_ar_bits_len      (_dcache_to_sram_ar_bits_len),
    .to_sram_r_ready          (_dcache_to_sram_r_ready),
    .to_sram_aw_valid         (_dcache_to_sram_aw_valid),
    .to_sram_aw_bits_addr     (_dcache_to_sram_aw_bits_addr),
    .to_sram_aw_bits_len      (_dcache_to_sram_aw_bits_len),
    .to_sram_w_valid          (_dcache_to_sram_w_valid),
    .to_sram_w_bits_data      (_dcache_to_sram_w_bits_data)
  );
  MMIO mmio (
    .clock                    (clock),
    .from_lsu_req_valid       (_memXbar_io_out_1_req_valid),
    .from_lsu_req_bits_addr   (_memXbar_io_out_1_req_bits_addr),
    .from_lsu_req_bits_wdata  (_memXbar_io_out_1_req_bits_wdata),
    .from_lsu_req_bits_wmask  (_memXbar_io_out_1_req_bits_wmask),
    .from_lsu_req_bits_cmd    (_memXbar_io_out_1_req_bits_cmd),
    .from_lsu_resp_bits_rdata (_mmio_from_lsu_resp_bits_rdata),
    .from_lsu_resp_bits_wresp (_mmio_from_lsu_resp_bits_wresp)
  );
  assign io_out_ifu_fetchPc = _IFU_i_fetch_PC;
  assign io_out_nextExecPC =
    _EXU_i_to_WBU_valid
      ? _EXU_i_to_WBU_bits_pc
      : valid_2
          ? EXU_i_from_ISU_bits_r_pc
          : valid_1
              ? ISU_i_from_IDU_bits_r_pc
              : valid
                  ? IDU_i_from_IFU_bits_r_pc
                  : _icache_s2_io_in_valid__bore
                      ? _icache_s2_io_in_bits_addr__bore
                      : _IFU_i_fetch_PC;
  assign io_out_ifu_inst = _IFU_i_to_IDU_bits_inst;
  assign io_out_ifu_pc = _IFU_i_to_IDU_bits_pc;
  assign io_out_idu_inst = _IDU_i_to_ISU_bits_inst;
  assign io_out_idu_pc = _IDU_i_to_ISU_bits_pc;
  assign io_out_isu_inst = _ISU_i_to_EXU_bits_inst;
  assign io_out_isu_pc = _ISU_i_to_EXU_bits_pc;
  assign io_out_exu_inst = _EXU_i_to_WBU_bits_inst;
  assign io_out_exu_pc = _EXU_i_to_WBU_bits_pc;
  assign io_out_wbu_inst = _EXU_i_to_WBU_bits_inst;
  assign io_out_wbu_pc = _EXU_i_to_WBU_bits_pc;
endmodule




