// Generated by CIRCT firtool-1.43.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IFU_cache(	// <stdin>:2670:10
  input         clock,	// <stdin>:2671:11
                reset,	// <stdin>:2672:11
                from_EXU_bits_bru_ctrl_br,	// src/main/scala/rv32e/IFU.scala:143:24
  input  [31:0] from_EXU_bits_bru_addr,	// src/main/scala/rv32e/IFU.scala:143:24
  input         from_EXU_bits_csr_ctrl_br,	// src/main/scala/rv32e/IFU.scala:143:24
  input  [31:0] from_EXU_bits_csr_addr,	// src/main/scala/rv32e/IFU.scala:143:24
  input         from_WBU_valid,	// src/main/scala/rv32e/IFU.scala:144:24
                to_cache_ready,	// src/main/scala/rv32e/IFU.scala:145:24
                from_cache_valid,	// src/main/scala/rv32e/IFU.scala:146:24
  input  [31:0] from_cache_bits_data,	// src/main/scala/rv32e/IFU.scala:146:24
  output        to_IDU_valid,	// src/main/scala/rv32e/IFU.scala:142:24
  output [31:0] to_IDU_bits_inst,	// src/main/scala/rv32e/IFU.scala:142:24
                to_IDU_bits_pc,	// src/main/scala/rv32e/IFU.scala:142:24
  output        to_cache_valid,	// src/main/scala/rv32e/IFU.scala:145:24
  output [31:0] to_cache_bits_addr	// src/main/scala/rv32e/IFU.scala:145:24
);

  reg  [31:0] reg_PC;	// src/main/scala/rv32e/IFU.scala:148:26
  reg  [1:0]  state_ifu;	// src/main/scala/rv32e/IFU.scala:164:28
  wire        _to_cache_valid_output = state_ifu == 2'h0;	// <stdin>:2670:10, src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/IFU.scala:164:28
  wire        _GEN = state_ifu == 2'h1;	// <stdin>:2670:10, src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/IFU.scala:164:28
  wire        _to_IDU_valid_output = state_ifu == 2'h2;	// <stdin>:2670:10, src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/IFU.scala:164:28
  always @(posedge clock) begin	// <stdin>:2671:11
    if (reset) begin	// <stdin>:2671:11
      reg_PC <= 32'h80000000;	// src/main/scala/rv32e/IFU.scala:148:26
      state_ifu <= 2'h0;	// <stdin>:2670:10, src/main/scala/rv32e/IFU.scala:164:28
    end
    else begin	// <stdin>:2671:11
      automatic logic _GEN_0;	// src/main/scala/chisel3/util/Decoupled.scala:52:35
      _GEN_0 = _to_IDU_valid_output & from_WBU_valid;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/chisel3/util/Mux.scala:77:13
      if (_GEN_0) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35
        if (from_EXU_bits_bru_ctrl_br)	// src/main/scala/rv32e/IFU.scala:143:24
          reg_PC <= from_EXU_bits_bru_addr;	// src/main/scala/rv32e/IFU.scala:148:26
        else if (from_EXU_bits_csr_ctrl_br)	// src/main/scala/rv32e/IFU.scala:143:24
          reg_PC <= from_EXU_bits_csr_addr;	// src/main/scala/rv32e/IFU.scala:148:26
        else	// src/main/scala/rv32e/IFU.scala:143:24
          reg_PC <= reg_PC + 32'h4;	// src/main/scala/rv32e/IFU.scala:148:26, :156:27
      end
      if (_to_IDU_valid_output)	// src/main/scala/chisel3/util/Mux.scala:77:13
        state_ifu <= {~_GEN_0, 1'h0};	// <stdin>:2670:10, src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/rv32e/IFU.scala:164:28, :168:28
      else if (_GEN) begin	// src/main/scala/chisel3/util/Mux.scala:77:13
        if (_GEN & from_cache_valid)	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/chisel3/util/Mux.scala:77:13
          state_ifu <= 2'h2;	// <stdin>:2670:10, src/main/scala/rv32e/IFU.scala:164:28
        else	// src/main/scala/chisel3/util/Decoupled.scala:52:35
          state_ifu <= 2'h1;	// <stdin>:2670:10, src/main/scala/rv32e/IFU.scala:164:28
      end
      else	// src/main/scala/chisel3/util/Mux.scala:77:13
        state_ifu <= {1'h0, _to_cache_valid_output & to_cache_ready};	// <stdin>:2670:10, src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/IFU.scala:164:28, :166:26
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:2670:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2670:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2670:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2670:10
      automatic logic [31:0] _RANDOM[0:1];	// <stdin>:2670:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2670:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2670:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2670:10
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// <stdin>:2670:10
        end	// <stdin>:2670:10
        reg_PC = _RANDOM[1'h0];	// <stdin>:2670:10, src/main/scala/rv32e/IFU.scala:148:26
        state_ifu = _RANDOM[1'h1][1:0];	// <stdin>:2670:10, src/main/scala/rv32e/IFU.scala:164:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2670:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2670:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign to_IDU_valid = _to_IDU_valid_output;	// <stdin>:2670:10, src/main/scala/chisel3/util/Mux.scala:77:13
  assign to_IDU_bits_inst = _to_IDU_valid_output ? from_cache_bits_data : 32'h13;	// <stdin>:2670:10, src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/IFU.scala:178:28
  assign to_IDU_bits_pc = reg_PC;	// <stdin>:2670:10, src/main/scala/rv32e/IFU.scala:148:26
  assign to_cache_valid = _to_cache_valid_output;	// <stdin>:2670:10, src/main/scala/chisel3/util/Mux.scala:77:13
  assign to_cache_bits_addr = reg_PC;	// <stdin>:2670:10, src/main/scala/rv32e/IFU.scala:148:26
endmodule

