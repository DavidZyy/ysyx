// Generated by CIRCT firtool-1.43.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Alu(	// <stdin>:2056:10
  input  [31:0] io_in_src1,	// src/main/scala/rv32e/fu/alu.scala:22:16
                io_in_src2,	// src/main/scala/rv32e/fu/alu.scala:22:16
  input  [3:0]  io_in_op,	// src/main/scala/rv32e/fu/alu.scala:22:16
  output [31:0] io_out_result	// src/main/scala/rv32e/fu/alu.scala:22:16
);

  wire [62:0]       _GEN = {31'h0, io_in_src1} << io_in_src2[4:0];	// src/main/scala/rv32e/fu/alu.scala:31:25, :43:42
  wire [31:0]       _GEN_0 = {27'h0, io_in_src2[4:0]};	// src/main/scala/rv32e/fu/alu.scala:31:25, :44:42
  wire [15:0][31:0] _GEN_1 =
    {{32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {$signed($signed(io_in_src1) >>> _GEN_0)},
     {io_in_src1 >> _GEN_0},
     {_GEN[31:0]},
     {{31'h0, io_in_src1 < io_in_src2}},
     {{31'h0, $signed(io_in_src1) < $signed(io_in_src2)}},
     {io_in_src1 ^ io_in_src2},
     {io_in_src1 | io_in_src2},
     {io_in_src1 & io_in_src2},
     {io_in_src1 - io_in_src2},
     {io_in_src1 + io_in_src2},
     {32'h0}};	// src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/fu/alu.scala:36:42, :37:42, :38:42, :39:42, :40:42, :41:49, :42:42, :43:42, :44:42, :45:49
  assign io_out_result = _GEN_1[io_in_op];	// <stdin>:2056:10, src/main/scala/chisel3/util/Mux.scala:77:13
endmodule

