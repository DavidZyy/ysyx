// Generated by CIRCT firtool-1.43.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module WBU(	// <stdin>:2642:10
  input         from_EXU_valid,	// src/main/scala/rv32e/WBU.scala:11:22
  input  [31:0] from_EXU_bits_alu_result,	// src/main/scala/rv32e/WBU.scala:11:22
                from_EXU_bits_mdu_result,	// src/main/scala/rv32e/WBU.scala:11:22
                from_EXU_bits_lsu_rdata,	// src/main/scala/rv32e/WBU.scala:11:22
                from_EXU_bits_csr_rdata,	// src/main/scala/rv32e/WBU.scala:11:22
                from_EXU_bits_pc,	// src/main/scala/rv32e/WBU.scala:11:22
  input         from_EXU_bits_reg_wen,	// src/main/scala/rv32e/WBU.scala:11:22
  input  [4:0]  from_EXU_bits_rd,	// src/main/scala/rv32e/WBU.scala:11:22
  input  [2:0]  from_EXU_bits_fu_op,	// src/main/scala/rv32e/WBU.scala:11:22
  output        to_ISU_bits_reg_wen,	// src/main/scala/rv32e/WBU.scala:12:22
  output [31:0] to_ISU_bits_wdata,	// src/main/scala/rv32e/WBU.scala:12:22
  output [4:0]  to_ISU_bits_rd,	// src/main/scala/rv32e/WBU.scala:12:22
  output        to_IFU_valid	// src/main/scala/rv32e/WBU.scala:13:22
);

  wire [7:0][31:0] _GEN =
    {{32'h0},
     {32'h0},
     {from_EXU_bits_csr_rdata},
     {from_EXU_bits_lsu_rdata},
     {from_EXU_bits_pc + 32'h4},
     {from_EXU_bits_mdu_result},
     {from_EXU_bits_alu_result},
     {32'h0}};	// src/main/scala/chisel3/util/Mux.scala:77:13, src/main/scala/rv32e/WBU.scala:25:47
  assign to_ISU_bits_reg_wen = from_EXU_valid & from_EXU_bits_reg_wen;	// <stdin>:2642:10, src/main/scala/rv32e/WBU.scala:19:31
  assign to_ISU_bits_wdata = _GEN[from_EXU_bits_fu_op];	// <stdin>:2642:10, src/main/scala/chisel3/util/Mux.scala:77:13
  assign to_ISU_bits_rd = from_EXU_bits_rd;	// <stdin>:2642:10
  assign to_IFU_valid = from_EXU_valid;	// <stdin>:2642:10
endmodule

